package HumanEval_69_search;

public class HumanEval_69_search {

    
    public static int search_Problem_16_69821cd1_6f4d_467e_89f7_a1be0b852e7c(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? max : -1;
    }

    
    public static int search_Problem_10_bec517b7_0f1b_498f_91fd_721a94703e8b(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == -1) {
            return -1;
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) == max) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_5_33a538c0_8cc6_47db_b492_2e541664a911(ArrayList<Integer> lst) {

        int max = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_24_1110d73d_b51a_4eba_9789_bef7025948dc(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (i > max) {
                max = i;
            }
            if (freq > i) {
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_7_b9663e76_b45a_47bb_939f_3791547e761e(ArrayList<Integer> lst) {

        // write your code in Java SE 8
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_24_68dae0e5_fd37_446e_a42c_ee625b2062c5(ArrayList<Integer> lst) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1L);
            }
        }
        int max = -1;
        for (Integer i : map.keySet()) {
            if (i <= map.get(i) && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_11_462b6cce_8427_49a4_9375_083f5433641a(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_24_f610483e_c8ff_481c_9f08_743fd1014af1(ArrayList<Integer> lst) {
        if (lst.size() < 1) return -1;
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            Integer prev = map.putIfAbsent(i, 0L);
            if (prev != null && prev > 0) map.put(i, map.get(prev) + 1);
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) > 0 && map.get(i) == lst.get(lst.indexOf(i))) return i;
        }
        return -1;
    }

    
    public static int search_Problem_18_f52f6a24_24bf_433a_bfa6_aa3349bf8867(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_41912114_448d_4efd_898f_5af1f815e85f(ArrayList<Integer> lst) {

        int max = -1;
        int maxCount = 0;
        for (int i : lst) {
            int count = Collections.frequency(lst, i);
            if (i > max && count >= i) {
                max = i;
                maxCount = count;
            }
        }
        return maxCount >= max ? max : -1;
    }

    
    public static int search_Problem_10_57f615d0_4c53_42d4_a3f8_a814e4005db9(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        int max = 0;
        for (int i : map.keySet()) {
            if (i > 0 && map.get(i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_ba23e33b_d6d3_4016_938d_f8faa6582f93(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (lst.stream().filter(x -> x == i).count() > maxFreq) {
                maxFreq = lst.stream().filter(x -> x == i).count();
                max = i;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_21_c740e4a4_54cd_4bf8_8060_fccabe2a3d6d(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        int currFreq = 0;
        int curr = 0;
        for (int i : lst) {
            currFreq = lst.stream().filter(x -> x == i).count();
            if (currFreq > maxFreq) {
                maxFreq = currFreq;
                curr = i;
            }
        }
        return curr;
    }

    
    public static int search_Problem_9_7aeb0d9c_ace9_42c1_b172_f9328170aa2e(ArrayList<Integer> lst) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1L);
            }
        }
        int max = -1;
        for (Integer i : map.keySet()) {
            if (i <= map.get(i) && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_9_9c380ee4_490a_472e_9f4e_e9184d1ac3ad(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_14_29a8d98e_854c_4bc1_9c20_02434485f5fa(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_0_caaac0b7_6203_49ec_84c7_d5fa2370acc9(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_24_0eda4a74_83e7_4ce2_9dc9_7aab7dfc1ab6(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_11_2dff4d84_f0aa_471d_8877_8024d58d4241(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_6_a80b8f07_834d_488c_9342_d6198b7f2ec3(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) == max) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_7_ca9955dc_12ef_47d5_b925_57e4b26296f1(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            Integer count = map.get(l);
            if (count == null) {
                map.put(l, 1);
            } else {
                map.put(l, count + 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_11_22f1c45b_60b1_4276_9ede_02fa2ef48827(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq > lst.size()? -1 : max;
    }

    
    public static int search_Problem_0_61536c47_e787_4ec0_ba39_9e7dd091652c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int i : lst) {
            if(i>0) {
                int freq = Collections.frequency(lst, i);
                if(freq>maxFreq) {
                    maxFreq = freq;
                    maxVal = i;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_22_b1d41f5c_1f82_4bbb_a4d0_633c3dc854f3(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_b8775e85_f0ba_4ada_8d5c_f56c60132baf(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxVal == -1 || maxFreq < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq == i) {
                maxFreq++;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_24_43d4c872_a9f5_4f1e_b91b_47f22f430049(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_3_a1b5dcc2_40ae_499b_831e_d91bfe1583be(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1) {
                freq = i;
                max = i;
            } else if (freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_2_e2ad134d_7a16_45ee_bed0_b39a3642e191(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_21_9ddaa53e_211e_44fc_80d0_8586daeabb49(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l,  1);
            }
        }
        int max = -1;
        int max_key = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                max_key = entry.getKey();
            }
        }
        if (max_key > 0) {
            return max_key;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_10_2433b27c_781f_4ce0_8b72_84a94bd1f64f(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_18_4580ef92_53c6_4653_8eee_7b701cb4e41a(ArrayList<Integer> lst) {
        int max = -1;
        ArrayList <Integer> freq = new ArrayList <Integer> ();
        for (int x : lst) {
            if (freq.contains(x)) {
                freq.remove(x);
            }
            freq.add(x);
            if (x > max) {
                max = x;
            }
        }
        if (max > 0) {
            return max;
        }
        else {
            return -1;
        }
    }

    
    public static int search_Problem_4_c1a000df_51a9_4de0_b82a_91ca7794fc54(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                maxKey = l;
            }
        }
        if (max == 0) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_18_c12c4549_e1a9_4d60_a6e7_2c549a05b128(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_df030546_8c46_43f9_a1ef_4a381fb709b6(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_3_8e974f0a_5108_475a_986b_f79ec7b11b17(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_d2bfefac_a1c1_4075_b9b0_2e8e83c57da9(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_19_0cf9d3b9_cf12_40f0_a2b9_3e695d6c3b2d(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_1df64ee5_35f4_4334_8514_23f69b55e251(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        for (Integer l : lst) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_9_77a38810_12cd_4815_ae7e_639d7f4884ab(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (int l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().filter(e -> e.getKey() > 0 && e.getValue() >= e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_10_868744d5_061b_42ba_bd31_347cf59870d2(ArrayList<Integer> lst) {

        // Your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        for (Integer l : lst) {
            if (map.get(l) > l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_11_f2c4ffd4_2df7_4d6e_83e6_8666b8862220(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().max(Comparator.comparing(Map.Entry::getValue)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_20_4b0c895b_b846_4a21_86d2_b7aed4d550ac(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            }
        }
        return maxFreq > maxVal ? maxFreq : -1;

    }

    
    public static int search_Problem_24_aba2947d_9c07_4c90_9838_78fe61b95c75(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_1_3d3281f2_9030_428e_a5a8_675c8ec21f8d(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer i : lst) {
            if (freq.containsKey(i)) {
                freq.put(i, freq.get(i) + 1);
            } else {
                freq.put(i,  1);
            }
        }
        int max = -1;
        int maxFreq = -1;
        for (Integer i : freq.keySet()) {
            if (freq.get(i) > maxFreq) {
                max = i;
                maxFreq = freq.get(i);
            }
        }
        return max;
    }

    
    public static int search_Problem_17_1fcd5a2f_6625_40c1_ae2c_968c437c6d65(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int max_freq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                max_freq = 1;
            } else if (l == max) {
                max_freq++;
            }
        }
        if (max_freq == 0) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_4_65a521b4_c782_4ddb_b2a7_39519cbdc23b(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                max_freq = 1;
            } else if (i == max) {
                max_freq++;
            }
        }
        if (max_freq == 0) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_24_84eae471_b4ad_4d30_96fd_dad761e01628(ArrayList<Integer> lst) {
        Integer greatestInteger = null;
        Set<Integer> unique = new HashSet<Integer>();
        for (Integer i : lst) {
            if (!unique.add(i)) {
                unique.add(i);
                if (greatestInteger == null || i > greatestInteger) {
                    greatestInteger = i;
                }
            }
        }
        return unique.contains(greatestInteger) ? greatestInteger : -1;
    }

    
    public static int search_Problem_23_32c4f775_3304_4c3c_8e8e_62c7ff8a9228(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : lst) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_22_fcf44e66_d2b1_49ef_a59c_7ff506c9d5d5(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        int freq = 0;
        for (int l : lst) {
            if (l > max) {
                max = l;
                maxFreq = freq;
            }
            if (l == max) {
                maxFreq = Math.max(maxFreq, freq);
            }
            freq++;
        }
        return maxFreq == 0 ? -1 : max;
    }

    
    public static int search_Problem_12_01cbd1d2_8653_41fb_9d93_8791883c4eeb(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_13_e212a1f1_f93d_4e56_9b82_0f6694364ea0(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_86f7fa98_e158_4c3a_8c06_e59526e3ace8(ArrayList<Integer> lst) {
        int result = -1;
        for (int num : lst) {
            if (num > 0) {
                int freq = lst
                        .stream()
                        .filter(x -> x == num)
                        .count();
                if (freq >= num) {
                    result = num;
                }
            }
        }
        return result;
    }

    
    public static int search_Problem_7_4e6eba07_392e_4e3e_aec0_886279fdd256(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                if (maxVal < 0 || maxVal > val) {
                    maxVal = val;
                    maxFreq = val;
                }
                else {
                    maxFreq++;
                }
            }
        }
        return maxFreq > maxVal ? maxVal : -1;

    }

    
    public static int search_Problem_10_2ed0fa47_7c0a_4e2d_a206_eb63c3c8ec2a(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            if (freq == 0 || freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_19_abf973f4_cfa6_4382_a98f_129f796c2456(ArrayList<Integer> lst) {

        int max = 0;
        int count = 0;
        for (Integer i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_3_50ab1adb_6c22_471c_919a_db9f06ab6c99(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_e212a1f1_f93d_4e56_9b82_0f6694364ea0(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_49cdd6c7_ff4c_464c_8a8f_44178e377064(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_5_6f20ffa2_c6bb_4b6e_bb19_ae5f09986472(ArrayList<Integer> lst) {
        int max = 0;
        Map<Integer, Integer> freqs = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (freqs.get(i) == null) {
                freqs.put(i, 1);
            } else {
                freqs.put(i, freqs.get(i) + 1);
            }
        }
        for (Map.Entry<Integer, Integer> e : freqs.entrySet()) {
            if (e.getValue() >= max) {
                max = e.getValue();
            }
        }
        return max == 0 ? -1 :  max;
    }

    
    public static int search_Problem_15_28084cab_464b_408e_b679_c23d56f0a015(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_11_c12c4549_e1a9_4d60_a6e7_2c549a05b128(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_3_222294e4_a374_4689_bd58_3e0772d942f4(ArrayList<Integer> lst) {
        Collections.sort(lst);
        for (int x : lst) {
            if (x > 0) return x;
        }
        return -1;
    }

    
    public static int search_Problem_17_780b7289_75d6_46cb_8921_cf7353c10850(ArrayList<Integer> lst) {

        // Your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_0_145115a4_5be9_4bbe_8110_a2bda29de3fe(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_16_0b3f9131_7548_4898_b0d8_40b106853377(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        Integer max = -1;
        Integer maxFreq = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxFreq) {
                max = l;
                maxFreq = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_18_4fc37822_a3ee_4c05_8b43_25404803aec2(ArrayList<Integer> lst) {

        int max = 0;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_20_f56c86b4_0e85_4370_93bf_f52786f6c000(ArrayList<Integer> lst) {

        int max = -1;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_4_c9f1bfb7_fd9b_4c43_adee_2f50604edb3c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                if (maxFreq < val) maxFreq = val;
                if (maxVal < val) maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_6_a93472a3_a25a_4aaf_9511_391c0359b416(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_17_867df0da_7ac7_4bea_b0d0_6e9aeebb5728(ArrayList<Integer> lst) {

        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                max = entry.getKey();
            }
        }
        return max;
    }

    
    public static int search_Problem_15_54bdc5fb_4c9c_4fac_aa26_2ee3e0a8a061(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_0_dd54eb56_bc22_4c0b_b012_1ab055bd0648(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().filter(e -> e.getKey() > 0 && e.getValue() >= e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_13_868744d5_061b_42ba_bd31_347cf59870d2(ArrayList<Integer> lst) {

        // Your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        for (Integer l : lst) {
            if (map.get(l) > l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_23_3c7429de_ef0b_4943_9311_e2ba85e27244(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1) {
                freq = i;
                max = i;
            } else if (freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_1_1a5ff06d_da65_41b2_974c_b8d626938848(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_20_25876edf_2fe6_43cd_9680_e72e5c1d8599(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq == i) {
                maxFreq++;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_17_ec5b0056_2cdf_4640_897e_83efc0bbf2a4(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_18_79265086_4662_4c32_b662_d8abff490dd1(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_4_a32c15c4_fd3a_4fed_9d43_0330149c117b(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_11_711f4351_c248_412a_a2c3_aa186b45f8ad(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > max_freq) {
                max_freq = freq;
                max = i;
            }
        }
        if (max_freq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_5_d97e020a_b337_4547_8647_344285c6fd00(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_17_590ade4f_ecdb_43b3_aa90_866fc02988f5(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxCount = 0;
            }
            if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_1_d825d98b_a9b6_4606_ad70_1f35921857d5(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxVal == -1 || maxFreq < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq == i) {
                maxFreq++;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_9_e94e0ad4_1cc4_4b6a_b9ba_1324142df0eb(ArrayList<Integer> lst) {

        // write your code here
        if(lst.size() == 0) return -1;
        int max = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for(int i : lst) {
            if(map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for(Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if(entry.getValue() > max) {
                max = entry.getValue();
            }
        }
        if(max == 0) return -1;
        for(Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if(entry.getValue() == max) {
                return entry.getKey();
            }
        }
        return -1;
    }

    
    public static int search_Problem_23_0fea2503_6108_4afd_8774_08e0357839a7(ArrayList<Integer> lst) {
        // write your code in Java 7
        return -1;
    }

    
    public static int search_Problem_12_f46e0b35_648d_4e58_afe5_54e3ee52b8fc(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().filter(e -> e.getKey() > 0 && e.getValue() >= e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_8_1d924b13_2fe8_47ca_a5e6_fd942aa040bb(ArrayList<Integer> lst) {

        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                max = entry.getKey();
            }
        }
        return max;
    }

    
    public static int search_Problem_19_e86f8def_382a_45d4_916b_55a33a1a3db1(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_4859b23b_9104_4da6_8ba9_99338acf5c2f(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        int res = -1;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > max) {
                max = lst.get(i);
                maxFreq = 1;
            } else if (lst.get(i) == max) {
                maxFreq++;
            }
            if (maxFreq > res) {
                res = maxFreq;
            }
        }
        return res == 0 ? -1 : max;
    }

    
    public static int search_Problem_4_b83a09c7_5573_4d60_9744_2100c1dbcd89(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        Integer max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = l;
            }
        }
        if (max == -1) {
            return -1;
        }
        if (map.get(max) >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_8_bcf7fec0_d3a1_4cd8_91b0_9a71b3784aa2(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1) {
                freq = i;
                max = i;
            } else if (freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_24_b79f9cfb_2f4d_4f86_b223_453157682b01(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_6_868744d5_061b_42ba_bd31_347cf59870d2(ArrayList<Integer> lst) {

        // Your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        for (Integer l : lst) {
            if (map.get(l) > l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_6_fdc75040_5df2_428f_ac6b_89011b0bca28(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_20_d7584f7e_0aa2_498b_9728_13476dc93a11(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (maxFreq < val && val > 0) {
                maxFreq = val;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_22_78fba301_a269_4638_8e03_6ed10f2315f8(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_11_43d4c872_a9f5_4f1e_b91b_47f22f430049(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_6ac158d9_6375_46e5_965a_040a21d26cec(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparingInteger(x -> x)).get();
    }

    
    public static int search_Problem_8_e2abc391_0c8c_4094_9ab8_324759cc938b(ArrayList<Integer> lst) {

        // Your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (int i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxKey = i;
            }
        }
        if (maxKey > 0) {
            return maxKey;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_6_944f16eb_5d8a_461d_a221_477971af348a(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_16_4772b99a_231a_43c3_a23f_843a92705dd1(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
            if (lst.stream().filter(x -> x == i).count() > maxFreq) {
                maxFreq = lst.stream().filter(x -> x == i).count();
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_10_dfcfab40_cfcd_46f1_b3b9_c6a4c8ab596f(ArrayList<Integer> lst) {

        // Write your code here
        return -1;
    }

    
    public static int search_Problem_15_1452dd64_329f_4746_a7e8_a5b0bbe8a57d(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq >= maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_16_4de34714_b2e9_454c_b0a5_511556d4ecf3(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i) {
                maxFreq = i;
                maxVal = i;
            } else if (maxFreq == i) {
                maxVal = Math.max(maxVal, i);
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_24_f46e0b35_648d_4e58_afe5_54e3ee52b8fc(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().filter(e -> e.getKey() > 0 && e.getValue() >= e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_15_d3d05df5_34c3_4630_8a6e_822b20ece40b(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        int max = lst.get(0);
        int count = 1;
        for (int i = 1; i < lst.size(); i++) {
            if (lst.get(i) == max) {
                count++;
            } else if (lst.get(i) > max) {
                max = lst.get(i);
                count = 1;
            }
        }
        if (count >= max) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_16_53c45ca3_c863_463d_882c_f69b5b765f37(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_1361118a_c032_4e42_a50d_810a440eccc7(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i) {
                maxFreq = i;
                maxVal = i;
            } else if (maxFreq == i) {
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_2_a072df67_4de4_4a90_989e_31fa6738d407(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_15_3595d5e4_acfb_45db_9df4_69276cd8efad(ArrayList<Integer> lst) {
        int maxVal = -1;
        int freq = -1;
        for(Integer val : lst) {
            freq = Collections.frequency(lst, val);
            if(freq >= val) break;
            maxVal = val;
        }
        return maxVal;
    }

    
    public static int search_Problem_4_39c6be5c_f181_4018_bbaf_f92b1fed4793(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > maxFreq) {
                maxFreq = freq;
                max = i;
            }
        }
        return maxFreq >= max ? max : -1;
    }

    
    public static int search_Problem_21_cc5099b2_2c32_4401_a38a_5a5f1068c6c8(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_16_d6938612_66dd_4462_b29d_9457acaa99b6(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_10_c0210ab5_c7f7_48e3_99a7_654ab2b6f933(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_29a8d98e_854c_4bc1_9c20_02434485f5fa(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_17_b4c8435f_5714_4241_a2ba_bd2165fd6839(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_23_fa40bb23_2f84_492f_989a_1dbd14ed45a2(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_24_aa5c96a1_f135_429e_86d3_2eb602e7a801(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_67e003ed_8729_4d34_bfad_41aebec85b4a(ArrayList<Integer> lst) {

        // Your code here
        int max = -1;
        for (int i : lst) {
            if (i > max && Collections.frequency(lst, i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_986759fb_82e4_41fd_9935_119147e4310b(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_7636a358_de74_4432_a902_c97f3d3a5596(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int res = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                res = l;
            }
        }
        return res;
    }

    
    public static int search_Problem_12_2785d7f6_7671_4320_888d_ca98d7cdc09a(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : lst) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_12_e2d66cb1_f756_4277_aa82_10aa4a3e1ac7(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq >= maxFreq) {
                maxFreq = freq;
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_3_412f26ba_b641_4334_9bec_0403666425df(ArrayList<Integer> lst) {
        // TODO: write your code here
        int max =  Math.pow(2, lst.size());
        int freq = -1;
        for(int i : lst) {
            if(freq == -1) {
                freq = 1;
                max = i;
            }
            freq += i;
            if(max > freq) {
                freq = max;
            }
        }
        return freq;
    }

    
    public static int search_Problem_4_ba418f86_5ea9_4b98_8f34_a7ca21e10d9b(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_4_08a1799a_7d1f_4f68_ae6a_ed16228c525f(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int i : lst) {
            if(i == 0) {
                continue;
            }
            int freq = Collections.frequency(lst, i);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_1_ee2e7d44_7229_42ba_af29_67b15c1ed82f(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i) {
                max = Math.max(max, i);
            }
        }
        return max;
    }

    
    public static int search_Problem_7_db699e26_e064_4268_98e6_7c3be53a0557(ArrayList<Integer> lst) {
        if (lst.size() <= 0) return -1;
        Set<Integer> set = new TreeSet<>(lst);
        Integer result = set.stream().filter((x) -> x > 0).max(Integer::compareTo).get();
        if (result != null)
            return result.intValue();
        else return -1;
    }

    
    public static int search_Problem_19_39a9c84d_f8bb_4ac4_8cd0_e08eb9d59f04(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().filter(e -> e.getValue() > e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_18_45c9e6c5_98c9_437c_8d64_afcd4802d532(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_17_10f10503_67bc_4451_a9a7_27e6a9d5bf7b(ArrayList<Integer> lst) {
        int result = -1;
        // Write your code here.
        return result;
    }

    
    public static int search_Problem_8_ec3d4a0e_aa24_4def_98f0_eca5f20864aa(ArrayList<Integer> lst) {

        int[] arr = lst.stream().mapToInteger(Integer::intValue).toArray();
        Arrays.sort(arr);
        for (int i = arr.length - 1; i >= 0; i--) {
            if (arr[i] > 0 && arr[i] <= arr.length - i) {
                return arr[i];
            }
        }
        return -1;
    }

    
    public static int search_Problem_22_1f431f5d_5563_4792_b201_0d6315f4e178(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        int max = lst.get(0);
        int count = 1;
        for (int i = 1; i < lst.size(); i++) {
            if (lst.get(i) == max) {
                count++;
            } else if (lst.get(i) > max) {
                max = lst.get(i);
                count = 1;
            }
        }
        if (count >= max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_12_7420df8f_2a31_4167_bf05_badb6587b9a5(ArrayList<Integer> lst) {
        int maxVal = Integer.MIN_VALUE, maxFreq = Integer.MIN_VALUE;
        for (Integer val : lst) {
            if (val > maxVal) {
                maxVal = val;
            }
            if (val > maxFreq) {
                maxFreq = val;
            }
        }
        return maxVal > 0 ? maxVal : -1;
    }

    
    public static int search_Problem_8_d16fe193_2bac_48c5_b013_bdd4c58c3ca2(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_c8d3c03e_03d7_4eed_84f1_213a49a6338f(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_7c3e4115_1f0a_492c_9765_fa9786e27713(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        int maxKey = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                maxKey = l;
            }
        }
        if (max == 0) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_14_e86f8def_382a_45d4_916b_55a33a1a3db1(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_ab04337d_dbed_4239_85ca_813baa73e62f(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_23_67e003ed_8729_4d34_bfad_41aebec85b4a(ArrayList<Integer> lst) {

        // Your code here
        int max = -1;
        for (int i : lst) {
            if (i > max && Collections.frequency(lst, i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_f2191aa3_912b_4821_ad45_fc6fa9606ba2(ArrayList<Integer> lst) {

        int max = 0;
        for (Integer i : lst) {
            if (i > max) {
                max = i;
            }
        }
        if (max == 0) {
            return -1;
        }
        int count = 0;
        for (Integer i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= 2) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_0_a9c16827_b0c9_4b1d_8976_0bb6d7538a69(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_12_36b4d001_5b52_4083_b0ed_0210ca2abb2b(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i = max; i > 0; i--) {
            int count = 0;
            for (int j : lst) {
                if (j == i) {
                    count++;
                }
            }
            if (count >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_7_6c88fbf8_e889_476c_888f_cf6605d17058(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_4_18bcda2e_2d7c_4d1b_9f10_0692e9aa33b7(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : lst) {
            if (l > 0 && map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_2_1903709f_5399_4830_9bfc_4562468ceeb1(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_7677010a_9bbf_4bf3_b5ad_53cfec0b8420(ArrayList<Integer> lst) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1L);
            }
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (i <= map.get(i) && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_17_b4537487_bef7_4f20_b38d_ac2b84627c68(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_867df0da_7ac7_4bea_b0d0_6e9aeebb5728(ArrayList<Integer> lst) {

        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                max = entry.getKey();
            }
        }
        return max;
    }

    
    public static int search_Problem_8_0192f9f5_ffcc_4467_9317_99a81a0c3b69(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1) {
                freq = i;
                max = i;
            } else if (freq >= i) {
                freq = i;
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_f407d1cf_803c_474f_82e7_c2e8e3d9d3c5(ArrayList<Integer> lst) {
        int ans = -1;
        Collections.sort(lst);
        System.out.println(lst);
        
        for(Integer value : lst) {
            if(value >= 0 && ans > value) {
                ans = value;
            }
        }
        
        return ans;
    }

    
    public static int search_Problem_19_9d03e8a4_26b9_4bd5_8774_1bff547dc5ab(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = lst.stream().filter(i -> i == val).count();
                if(freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_4_11984dfe_d998_4f2d_b1d1_b41125ab06fe(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i) {
                max = Math.max(max, i);
            }
        }
        return max == 0 ? -1 : max;
    }

    
    public static int search_Problem_1_6b3d4312_dd5e_4239_a5d6_c352dad46557(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        int max = 0;
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_f5024411_6b59_4eeb_a191_466b6ebc553b(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_3_db46886d_392f_4d04_bc41_95a46eebf685(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_944f16eb_5d8a_461d_a221_477971af348a(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_15_2c69a20b_be58_4542_a94d_d622710d3f38(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        int max_freq = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max_freq) {
                max = entry.getKey();
                max_freq = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_19_8ef7c5ae_4806_4729_a4d9_1bde2f0a01c0(ArrayList<Integer> lst) {

        // Your code here
        int max = -1;
        int freq = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > max) {
                max = lst.get(i);
                freq = 1;
            } else if (lst.get(i) == max) {
                freq++;
            }
        }
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > max && freq >= lst.get(i)) {
                return max;
            }
        }
        return -1;
    }

    
    public static int search_Problem_20_0192f9f5_ffcc_4467_9317_99a81a0c3b69(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1) {
                freq = i;
                max = i;
            } else if (freq >= i) {
                freq = i;
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_5d00a8bb_74e5_4fe9_9ce3_3e7f1b05d25c(ArrayList<Integer> lst) {
        ArrayList<Integer> ints = new ArrayList<>();
        for(Integer x : lst) {
            if(ints.contains(x)) {
                ints.set(ints.indexOf(x), x + 1);
            } else {
                ints.add(x);
            }
        }
        int max = Integer.MIN_VALUE;
        for(int i = 0; i <= ints.size(); i++) {
            for(int j = i+1; j <= ints.size(); j++) {
                if((ints.get(i) + ints.get(j)) > max) {
                    max = ints.get(i) + ints.get(j);
                }
            }
        }
        return max;
    }

    
    public static int search_Problem_2_a569d824_7d7b_4532_bd11_1d608635859d(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max && Collections.frequency(lst, i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_f4f3949a_931b_48cb_a00a_a8c35e54c114(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for(Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        
        int max = 0;
        int freq = 0;
        for(Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if(entry.getValue() > freq) {
                max = entry.getKey();
                freq = entry.getValue();
            }
        }
        
        return freq >= max ? max : -1;
    }

    
    public static int search_Problem_14_f5b8baa5_499d_4aa3_b66e_5d771b7ec197(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= lst.size()) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_0_c5bf7352_d040_485f_91c1_f2424e572a04(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_17_f610483e_c8ff_481c_9f08_743fd1014af1(ArrayList<Integer> lst) {
        if (lst.size() < 1) return -1;
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            Integer prev = map.putIfAbsent(i, 0L);
            if (prev != null && prev > 0) map.put(i, map.get(prev) + 1);
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) > 0 && map.get(i) == lst.get(lst.indexOf(i))) return i;
        }
        return -1;
    }

    
    public static int search_Problem_3_d4e90559_aa80_4ae4_b4b6_aaf779727126(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_8_7aa0a066_cba4_4099_880c_997219e72721(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_14_6f69e21c_5be0_4954_94db_763cde3389c7(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        int max = 0;
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        if (max == 0) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_20_a87503d9_88b9_4c86_a40b_0f310e3d9040(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > max) {
                max = lst.get(i);
                maxFreq = 1;
            } else if (lst.get(i) == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_19_ef390120_0cc2_4202_9be1_13314d0fd755(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq++;
            if(freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_13_f06e3308_90d0_40c3_b4a5_0197f2d925f9(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_22_33039bb6_d7a0_4504_a080_5900bcfb3092(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_16_c526b781_2b3c_42c6_bb44_5aa66178cbcc(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > maxFreq) {
                max = i;
                maxFreq = freq;
            }
        }
        if (maxFreq < max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_8_fbad1ffa_6d84_4957_bcfe_b5d6c97ad692(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_8_5345986f_dd43_4e92_a04f_775a3e9ff0ee(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l,  1);
            }
        }
        for (Integer l : lst) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_24_dbb0591f_fbd3_457d_b7b1_5471fb3eb46f(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_e8a7e3d5_8885_4064_b024_5a8e628cbf9a(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_8_b79f9cfb_2f4d_4f86_b223_453157682b01(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_8_944f16eb_5d8a_461d_a221_477971af348a(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_15_8c564e2d_e634_46d3_a615_39fc5e4b5c14(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        for (Integer l : lst) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_10_9651fa16_db0c_4800_86fb_6419edae9c3c(ArrayList<Integer> lst) {

        int greatest = 0;
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
            if (i > greatest) {
                greatest = i;
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_3_2ff1c5cb_53fa_418a_9d36_0392ef6a6cae(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            int freq = lst.stream().filter(j -> j == i).count();
            if (freq >= maxFreq) {
                max = i;
                maxFreq = freq;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_90cbed25_000a_4152_9f93_05f8382e80d7(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq == -1 || maxFreq > i) {
                maxFreq = i;
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_e7489cf5_1d9f_47b3_b27f_ddaaa0369438(ArrayList<Integer> lst) {

        // Write your code here
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_9_47bdf02e_8b8d_45b2_93e4_89ca5ed05e29(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_15_459c4d05_0099_47aa_a4fb_a9723d3a2fb9(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxCount = 1;
            } else if (i == max) {
                maxCount++;
            }
        }
        for (int i : lst) {
            if (i > maxCount) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_19_c95feff2_fa70_4a44_b10f_6dc0f08ee1aa(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_23_b690b259_44f3_4fe9_b126_59426e36c954(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        Integer max = -1;
        Integer maxKey = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (maxKey > 0) {
            return maxKey;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_22_4772b99a_231a_43c3_a23f_843a92705dd1(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
            if (lst.stream().filter(x -> x == i).count() > maxFreq) {
                maxFreq = lst.stream().filter(x -> x == i).count();
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_12_ba93473d_544a_4d69_87af_69d1a9f7f9cb(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_11_08e3f4cd_c5f0_483f_9398_21bb85fe6042(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                maxFreq = val;
            } else if (val == maxVal && val >= maxFreq) {
                maxFreq = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_18_02da4b23_c23e_4dd3_944d_f0b9de1786f4(ArrayList<Integer> lst) {
        ArrayList<Integer> freq = new ArrayList<>();
        int maxFreq = -1;
        int maxVal = -1;
        for (int val : lst) {
            if (freq.stream().filter(f -> f == val).count() == 0) {
                freq.add(val);
                if (val > maxVal) {
                    maxFreq = maxVal;
                    maxVal = val;
                } else if (val == maxVal) {
                    maxFreq = val;
                }
            }
        }
        return maxFreq == -1 ? -1 : maxVal;
    }

    
    public static int search_Problem_6_3fba11a1_0357_4142_8079_b51667a0dc84(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (lst.stream().filter(x -> x == i).count() > lst.stream().filter(x -> x == i).max(Comparator.comparing(Integer::valueOf)).get()) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_f66826c0_b307_4895_bd3a_49905d7ef8c9(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_24_7524d6ff_4304_4581_b760_bcb1b7bdb987(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_14_ef7da592_afdb_4a85_9fbb_8948e1a8acfb(ArrayList<Integer> lst) {

        int greatest = 0;
        for (int i : lst) {
            if (lst.stream().filter(x -> x == i).count() > lst.stream().filter(x -> x == i).mapToInteger(x -> x).max().getAsInteger()) {
                greatest = i;
            }
        }
        return greatest;
    }

    
    public static int search_Problem_23_fa76f9e5_baf8_4aa7_9825_f26a8973e5f4(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_13_968352cd_1cab_4638_888d_e6c95e77b1df(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_13_dbb0591f_fbd3_457d_b7b1_5471fb3eb46f(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_a569d824_7d7b_4532_bd11_1d608635859d(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max && Collections.frequency(lst, i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_b1d41f5c_1f82_4bbb_a4d0_633c3dc854f3(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_17_10ddea85_ab3c_4e2a_b241_c845e57298d2(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq == i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq > i && maxVal == i) {
                maxFreq = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_11_7420df8f_2a31_4167_bf05_badb6587b9a5(ArrayList<Integer> lst) {
        int maxVal = Integer.MIN_VALUE, maxFreq = Integer.MIN_VALUE;
        for (Integer val : lst) {
            if (val > maxVal) {
                maxVal = val;
            }
            if (val > maxFreq) {
                maxFreq = val;
            }
        }
        return maxVal > 0 ? maxVal : -1;
    }

    
    public static int search_Problem_10_2f589fc6_ffd4_482f_9f55_63630e529816(ArrayList<Integer> lst) {
        int max = -1;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (freq > max) {
                max = freq;
            }
            if (freq == i) {
                freq++;
            }
        }
        return max;

    }

    
    public static int search_Problem_19_287a1721_1bbd_4c4f_940f_ec6d0a18802e(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i = 1; i < lst.size(); i++) {
            if (map.containsKey(i) && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_3_8f21bf7b_9b46_41fb_b46e_a848b496d777(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_61a58b3c_f392_4f94_b534_9593d49ed8d9(ArrayList<Integer> lst) {

        // your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                max = Math.max(max, entry.getKey());
            }
        }
        return max;
    }

    
    public static int search_Problem_9_7377bd0d_7999_484a_95cc_bbe0b9cf2bd7(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer x : lst) {
            map.put(x, map.getOrDefault(x, 0) + 1);
        }
        int max = 0;
        for (Integer x : map.keySet()) {
            if (map.get(x) >= max) {
                max = map.get(x);
            }
        }
        return max;
    }

    
    public static int search_Problem_1_0f866524_ff3f_427c_90cc_cba4208c378d(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_18_ec3d4a0e_aa24_4def_98f0_eca5f20864aa(ArrayList<Integer> lst) {

        int[] arr = lst.stream().mapToInteger(Integer::intValue).toArray();
        Arrays.sort(arr);
        for (int i = arr.length - 1; i >= 0; i--) {
            if (arr[i] > 0 && arr[i] <= arr.length - i) {
                return arr[i];
            }
        }
        return -1;
    }

    
    public static int search_Problem_16_6f60d3cf_0320_4744_9bc1_9b32d36631a8(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_15_a480b873_3bf9_4c72_a871_1305d1b1bd90(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_15_6748d58a_6923_4957_9774_203393489795(ArrayList<Integer> lst) {
        int max = 0;
        int maxFreq = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = i;
            } else if (maxFreq == -1 || maxFreq > i) {
                maxFreq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_22_a50b11b3_466b_42f0_811d_554e19aee8ce(ArrayList<Integer> lst) {

        // Sort the list in descending order
        Collections.sort(lst, Collections.reverseOrder());

        // Iterate through the sorted list
        for (int num : lst) {
            // Check if the frequency of the current number is greater than or equal to the number itself
            if (Collections.frequency(lst, num) >= num) {
                return num;
            }
        }

        // If no such number exists, return -1
        return -1;
    }

    
    public static int search_Problem_2_a9ef5082_811e_487b_92b3_609f5cead847(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_20ad7ae4_679a_4195_85ed_7a85a89f1389(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        if (max == -1) {
            return -1;
        }
        int freq = 0;
        for (int i : lst) {
            if (i == max) {
                freq++;
            }
        }
        if (freq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_24_d6b46695_ae0f_4bf2_89ea_613b8488368d(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_f55cbb4e_8367_4db1_9ad2_451eb822e669(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_9bfec60d_13a4_4098_b41b_2d2517b28eda(ArrayList<Integer> lst) {

        // your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : lst) {
            if (map.get(i) > i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_6_750ad179_bfe8_4741_b68a_8e2237b91c5d(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxCount = 0;
        for (int val : lst) {
            if (val > 0) {
                int count = Collections.frequency(lst, val);
                if (count > maxCount) {
                    maxCount = count;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_0_84eae471_b4ad_4d30_96fd_dad761e01628(ArrayList<Integer> lst) {
        Integer greatestInteger = null;
        Set<Integer> unique = new HashSet<Integer>();
        for (Integer i : lst) {
            if (!unique.add(i)) {
                unique.add(i);
                if (greatestInteger == null || i > greatestInteger) {
                    greatestInteger = i;
                }
            }
        }
        return unique.contains(greatestInteger) ? greatestInteger : -1;
    }

    
    public static int search_Problem_17_9b835a56_29f7_47ad_84b4_913706bf910f(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1 || freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_f5024411_6b59_4eeb_a191_466b6ebc553b(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_8_496aa325_e913_485d_af8c_d6fe3b24c3b8(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > maxFreq) {
                maxFreq = freq;
                max = i;
            }
        }
        if (maxFreq < max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_12_910d2de5_22fe_4b1c_b9ef_317e08fb524d(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1L);
            }
        }
        Integer max = -1L;
        for (Integer l : map.keySet()) {
            if (l > 0 && map.get(l) >= l) {
                max = l;
                break;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_4903da4d_797a_4cd9_814c_c2f9c7e23827(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (i > max) {
                max = i;
                freq = freq - 1;
            }
        }
        if (freq >= 0) {
            return max;
        }
        return -1;

    }

    
    public static int search_Problem_23_1a629829_e4f4_400f_b412_b3d43d8cc4b2(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max == 0 ? -1 : max;
    }

    
    public static int search_Problem_8_2a302c69_6936_40c8_a52a_59baf7d5a8ec(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer i : lst) {
            if (i > max) {
                max = i;
            }
            if (lst.stream().filter(j -> j == i).count() > maxFreq) {
                maxFreq = lst.stream().filter(j -> j == i).count();
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_3_7f72f684_8d04_4768_909c_3e6d6b1c0c54(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i = lst.size(); i > 0; i--) {
            if (map.containsKey(i) && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_1_0e151b6d_169b_4938_9845_f503f1e62b1b(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_c933de4f_f1f8_4ecc_9b81_afacd29ebd32(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_11_715119f4_fedc_452e_ae06_7484ede18335(ArrayList<Integer> lst) {
        int retVal = -1;
        for (int l : lst) {
            int f = Collections.frequency(lst, l);
            if (f > 0 && f >= retVal) {
                retVal = l;
            }
        }
        return retVal;
    }

    
    public static int search_Problem_19_b8ca31af_ba3d_4b16_8f55_6bb0950c9370(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxCount) {
                max = l;
                maxCount = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_19_a4106e4c_1ff9_4565_9df9_49d9dd86c455(ArrayList<Integer> lst) {
        int freq = 0;
        ArrayList<Integer> newArr = new ArrayList<>();
        for (Integer i : lst) {
            if (i > 0) freq++;
            newArr.add(i);
        }
        if (freq == 0)
            return -1;
        else
            return newArr.get(newArr.size() - 1);
    }

    
    public static int search_Problem_19_7c3e4115_1f0a_492c_9765_fa9786e27713(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        int maxKey = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                maxKey = l;
            }
        }
        if (max == 0) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_4_55c6327a_1461_49fd_a5f2_55a72f09859d(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i = 0; i < lst.size(); i++) {
            Integer key = lst.get(i);
            if (map.containsKey(key)) {
                map.put(key, map.get(key) + 1);
            } else {
                map.put(key, 1);
            }
        }
        Integer max = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            Integer key = entry.getKey();
            Integer value = entry.getValue();
            if (value > max) {
                max = value;
            }
        }
        if (max == -1) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_14_1580c256_91e3_4db3_9700_a6534b03618b(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            if (i > 0 && freq >= i) {
                max = i;
                freq = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_0b05cc89_e346_4a9b_9b03_7142fcf49fdd(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x, Comparator.reverseOrder())).get();
    }

    
    public static int search_Problem_1_d6938612_66dd_4462_b29d_9457acaa99b6(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_1_56d90851_d68a_4c47_8785_1555308d7b2f(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (int num : lst) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        int max = -1;
        int maxFreq = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxFreq) {
                max = entry.getKey();
                maxFreq = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_6_c9b94f5e_1c41_4254_9925_eeeaf62e67d2(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == -1) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_14_49578c7a_cf0c_4faa_83f9_8018efa6c347(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_14_dca3dbb9_fc63_4002_8113_d8ced87fea7a(ArrayList<Integer> lst) {

        // Your code here
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
            if (lst.stream().filter(x -> x == i).count() > maxFreq) {
                maxFreq = lst.stream().filter(x -> x == i).count();
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_9_1af2357a_e122_4336_a52b_0805cbf14114(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_6981b45f_e47d_4298_8bc3_1416577d9296(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxKey = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (maxKey == -1) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_4_5a794d4e_e7c1_41c2_a2fe_d2d8815e672a(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_21_dbb0591f_fbd3_457d_b7b1_5471fb3eb46f(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_ca9955dc_12ef_47d5_b925_57e4b26296f1(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            Integer count = map.get(l);
            if (count == null) {
                map.put(l, 1);
            } else {
                map.put(l, count + 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_7_f2191aa3_912b_4821_ad45_fc6fa9606ba2(ArrayList<Integer> lst) {

        int max = 0;
        for (Integer i : lst) {
            if (i > max) {
                max = i;
            }
        }
        if (max == 0) {
            return -1;
        }
        int count = 0;
        for (Integer i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= 2) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_16_b9a7d3ef_2020_4195_b92f_e7b44b558144(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (i > max) {
                max = i;
                freq = freq - 1;
            }
        }
        return freq > 0 ? max : -1;

    }

    
    public static int search_Problem_3_d33105fd_ae82_483d_8aec_d798583c84af(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_6_45153bea_20d3_4db7_8c17_0fcc1584ea03(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_15_f058ba41_e5a0_4800_9b6e_ef0c19812839(ArrayList<Integer> lst) {
        return lst.stream().filter(i -> Collections.frequency(lst, i) >= i).max(Comparator.naturalOrder()).orElse(-1);
    }

    
    public static int search_Problem_17_8ba8e236_8895_4c97_90a7_112bad88532e(ArrayList<Integer> lst) {
        int maxFreq = 0;
        int maxVal = 0;

        List<Integer> list = lst.stream().distinct().sorted(Comparator.reverseOrder()).collect(Collectors.toList());
        Collections.sort(list);

        for (int i : list) {
            int freq = list.stream().filter(j -> j == i).count();
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = i;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_21_c87d175a_b038_45bd_a52a_c667a2530759(ArrayList<Integer> lst) {

        int max = 0;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_2_42efd88d_655d_4cad_b068_88364e957026(ArrayList<Integer> lst) {
        // Your code here
        return -1;
    }

    
    public static int search_Problem_3_95bf6511_83b7_486d_b00b_452e2fa92b2f(ArrayList<Integer> lst) {

        // Your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        for (Integer l : lst) {
            if (map.get(l) > l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_4_414f58ac_13b1_4db9_b734_ebba7537f8af(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_21_41e4c49c_1032_475d_8e45_74d98e9a71cb(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_7_57f18433_187e_4649_991e_f4a5a0ff1a10(ArrayList<Integer> lst) {
        // BEGIN
            Map<Integer, Integer> dictionary = new HashMap<Integer, Integer>();
            for (int el : lst) {
                if (dictionary.containsKey(el)) {
                    dictionary.put(el, dictionary.get(el) + 1);
                } else {
                    dictionary.put(el, 1);
                }
            }
            int max = -1;
            for (int key : dictionary.keySet()) {
                if (key >= dictionary.get(key) && key > max) {
                    max = key;
                }
            }
            return max;
        // END
    }

    
    public static int search_Problem_3_4772b99a_231a_43c3_a23f_843a92705dd1(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
            if (lst.stream().filter(x -> x == i).count() > maxFreq) {
                maxFreq = lst.stream().filter(x -> x == i).count();
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_3_10ddea85_ab3c_4e2a_b241_c845e57298d2(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq == i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq > i && maxVal == i) {
                maxFreq = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_11_f06e3308_90d0_40c3_b4a5_0197f2d925f9(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_13_59f8f807_7899_4efc_a0f0_cf34881d7d55(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        Integer max = 0;
        Integer maxKey = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_18_6a3602a7_4941_45c1_9a98_5470b62d8b77(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq++;
            if(freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_6_0b05cc89_e346_4a9b_9b03_7142fcf49fdd(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x, Comparator.reverseOrder())).get();
    }

    
    public static int search_Problem_22_e39f3662_998c_4232_a338_1769da571e6e(ArrayList<Integer> lst) {
        int max = 0;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
        }
        if (count < lst.size()) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_9_dab9a6fb_f59b_4bdc_9e57_d09da6935045(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_31e15d8b_2418_4c5b_a9b8_ceb4eccb8bda(ArrayList<Integer> lst) {
        if (lst.isEmpty()) return -1;
        int m = Collections.max(lst);
        int f = Collections.frequency(lst, m);
        return f >= m ? m : -1;
    }

    
    public static int search_Problem_13_f9a91ea7_0ded_49d6_a51c_77226db305cc(ArrayList<Integer> lst) {
        int mostFrequent = lst.get(0); // start at the first element
        int frequencyOfMostFrequent = 1;
        for (Integer l : lst) {
            if (l == mostFrequent) frequencyOfMostFrequent++;
            else {
                if (frequencyOfMostFrequent > 1) return -1;
                if (frequencyOfMostFrequent == 1) { // found a match
                    if (l > mostFrequent) mostFrequent = l;
                    frequencyOfMostFrequent = 1;
                }
            }
        }
        return mostFrequent;
    }

    
    public static int search_Problem_7_a569d824_7d7b_4532_bd11_1d608635859d(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max && Collections.frequency(lst, i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_6488e94e_d1ec_433f_8e5f_1c1bd263a6d9(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_8_598c6386_e2d8_466f_b429_b5feb3be3f43(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_98770eb3_7c2a_4828_9969_7d2cd7e09286(ArrayList<Integer> lst) {
        int mostFrequent = -1;
        for (int l : lst) {
            int frequency = lst.stream().filter(x -> x == l).count();
            if (frequency >= mostFrequent) {
                mostFrequent = l;
            } else if (frequency < mostFrequent) {
                return -1;
            }
        }
        return mostFrequent;
    }

    
    public static int search_Problem_11_7135436b_b56f_4caa_ab64_f95e389e0db0(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int max_count = 0;
        for (int i = 0; i < lst.size(); i++) {
            int count = 0;
            for (int j = 0; j < lst.size(); j++) {
                if (lst.get(j) == lst.get(i)) {
                    count++;
                }
            }
            if (count > max_count) {
                max = lst.get(i);
                max_count = count;
            }
        }
        if (max_count == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_22_d2e6f719_6f55_464c_b732_a58fc97485fb(ArrayList<Integer> lst) {
        int maxVal = -1;
        int freq = -1;
        if (lst.isEmpty()) return -1;
        int val = lst.get(0);
        for (int i : lst) {
            freq += 1;
            if (val != i && freq >= i) {
                freq = -1;
                val = i;
            }
        }
        maxVal = val > 0 ? val : -1;
        return maxVal;
    }

    
    public static int search_Problem_8_ec5b0056_2cdf_4640_897e_83efc0bbf2a4(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_4_c933de4f_f1f8_4ecc_9b81_afacd29ebd32(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_17_ce173da5_5189_4260_b53e_8b817c89c31e(ArrayList<Integer> lst) {
        int largest = -1;
        int frequency = 0;
        for (Integer i : lst)
            if (i >= frequency) {
                frequency = i;
                largest = i;
            }
        return largest;
    }

    
    public static int search_Problem_6_0e151b6d_169b_4938_9845_f503f1e62b1b(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_8_cdbbb7b6_ea55_4a24_b36a_7a7bf9f6f666(ArrayList<Integer> lst) {

        int max = 0;
        int max_count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                max_count = 1;
            } else if (i == max) {
                max_count++;
            }
        }
        for (int i : lst) {
            if (i > 0 && i <= max && i >= max_count) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_17_294f3c90_5963_4c18_acec_935d8606fe6d(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_15_2fa63e9c_ec1a_4e10_b016_bb0bdf5e5332(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (int l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxKey = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (maxKey > 0) {
            return maxKey;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_2_0c1472b4_4123_4385_8e5c_95435dde6fde(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int max_count = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max_count) {
                max = l;
                max_count = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_13_c526b781_2b3c_42c6_bb44_5aa66178cbcc(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > maxFreq) {
                max = i;
                maxFreq = freq;
            }
        }
        if (maxFreq < max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_16_42efd88d_655d_4cad_b068_88364e957026(ArrayList<Integer> lst) {
        // Your code here
        return -1;
    }

    
    public static int search_Problem_13_f0edbe6d_3455_470f_b3c1_de4f91b94e73(ArrayList<Integer> lst) {
        int max = 0;
        int maxFreq = -1;
        for(int i : lst) {
            if(i>0) {
                int freq = Collections.frequency(lst, i);
                if(freq>maxFreq) {
                    max = i;
                    maxFreq = freq;
                }
            }
        }
        return max;

    }

    
    public static int search_Problem_17_b9dd5313_3e83_4a6b_90dd_75ad2556173b(ArrayList<Integer> lst) {

        int max = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
            }
        }
        if (max == 0) {
            return -1;
        }
        int count = 0;
        for (Integer l : lst) {
            if (l == max) {
                count++;
            }
        }
        if (count >= 2) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_14_1ac6a45f_6f16_431d_ae24_e74f341d426f(ArrayList<Integer> lst) {

        // Write your code here.
        // return -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int max_count = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max_count) {
                max = l;
                max_count = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_19_5405a6e4_6a1c_46ce_ae22_7144ca5253f5(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            }
            if (maxFreq == i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_20_2f614d3c_e852_4600_821f_3df555fe65c5(ArrayList<Integer> lst) {
        int maxVal = lst.get(0);
        for (int i = 0; i < lst.size(); ++i) {
            if (lst.get(i) >= maxVal) {
                maxVal = lst.get(i);
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_9_4fd9ef25_b212_4564_a0e8_081b2008394f(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i : lst) {
            if(map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for(int i : map.keySet()) {
            if(map.get(i) > max && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_8_fc77c553_d162_4b59_b200_289093e2a6f2(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_29a8d98e_854c_4bc1_9c20_02434485f5fa(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_23_0b168592_0e15_4f68_a32b_fc8ac1592a3e(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int maxFreq = 0;
        for (int i : lst) {
            if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_8_24fa5aa5_b2b3_4381_b653_f344fdc9f3f6(ArrayList<Integer> lst) {
        Map<Integer, Integer> map = new TreeMap<>();
        lst.stream().forEach(e -> map.put(new Integer(e), map.getOrDefault(new Integer(e), 0) + 1));
        boolean exists = False;
        for (Integer e : map.keySet()) {
            if (map.get(e) >= map.get(new Integer(e))) {
                exists = True;
                return e;
            }
        }
        if (exists) {
            return -1;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_2_f3087897_ba24_4b48_af4e_63805b442ee4(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            if (freq.containsKey(l)) {
                freq.put(l, freq.get(l) + 1);
            } else {
                freq.put(l, 1);
            }
        }
        Integer max = freq.keySet().stream().max(Comparator.comparing(freq::get)).get();
        if (freq.get(max) >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_3_2504374f_70da_4de9_91c9_b5fe595c524a(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (int l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int max_count = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max_count) {
                max = entry.getKey();
                max_count = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_23_99e0d385_35f3_4758_b1f9_60a80d9fa5c6(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_53ff8c35_e836_4e04_a369_bd8fa29213b8(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (int l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().filter(e -> e.getValue() > e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_24_06d89672_7249_4af3_92bd_f3245dcc8e05(ArrayList<Integer> lst) {
        int maxVal = Integer.MIN_VALUE, maxCount = Integer.MIN_VALUE;
        for (Integer l : lst) {
            if (maxCount < l) {
                maxCount = l;
                maxVal = l;
            }
        }
        return maxVal > 0 ? maxVal : -1;
    }

    
    public static int search_Problem_12_069c53c3_73ce_4b33_9c9f_93effc675279(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxCount = 0;
        for (int i : lst) {
            if (maxCount < i) {
                maxCount = i;
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_8_b28364f8_860a_4db5_ad27_fdcc4ab1d90c(ArrayList<Integer> lst) {

        // write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : lst) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_10_dbd11b32_c28c_4414_b698_92c09a768095(ArrayList<Integer> lst) {
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? -1 : max;
    }

    
    public static int search_Problem_2_914fe20c_ba0b_47b6_a58a_c3e4a336b306(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for(Integer i : lst) {
            if(map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for(Integer i : map.keySet()) {
            if(map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_1_44952c7b_653d_4497_8def_543d537e2a5f(ArrayList<Integer> lst) {
        int max = -1;
        int value = -1;
        for (int l : lst) {
            if (max < 0 || l > max) {
                max = l;
                value = -1;
            }
            else if (value >= 0 && l == value) {
                ++value;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_4e6eba07_392e_4e3e_aec0_886279fdd256(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                if (maxVal < 0 || maxVal > val) {
                    maxVal = val;
                    maxFreq = val;
                }
                else {
                    maxFreq++;
                }
            }
        }
        return maxFreq > maxVal ? maxVal : -1;

    }

    
    public static int search_Problem_4_7aeb0d9c_ace9_42c1_b172_f9328170aa2e(ArrayList<Integer> lst) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1L);
            }
        }
        int max = -1;
        for (Integer i : map.keySet()) {
            if (i <= map.get(i) && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_2f0dc20f_3e68_42f8_b86c_ffced68db765(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_8_7f2a4010_a03a_4f96_abe8_f06cc4047160(ArrayList<Integer> lst) {
        int maxVal = lst.get(0);
        int maxFreq = lst.get(0);
        for(int i : lst) {
            if(i == maxVal) {
                maxFreq++;
            } else {
                if(maxFreq >= i) {
                    maxVal = i;
                    maxFreq = i;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_21_5809281c_5d91_4c87_87ab_d522ba103fdd(ArrayList<Integer> lst) {

        int max = 0;
        int freq = 0;
        int freqMax = 0;
        for (Integer x : lst) {
            if (x > max) {
                freqMax = freq;
                max = x;
            }
            freq++;
        }
        if (freqMax >= freq) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_8_d74d9d4c_bc0f_41f9_9439_b2fc86955ad1(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_19380f62_9c43_4431_b6f9_a012afbe3934(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_170a874b_4ce8_41d9_9336_314f1f731185(ArrayList<Integer> lst) {
        int result = -1;
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1L);
            }
        }
        for (int i : lst) {
            if (map.get(i) >= i) {
                result = i;
            }
        }
        return result;

    }

    
    public static int search_Problem_13_bf15a6c4_ccb7_413f_a501_795ecf5456d2(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_1_5eb0d6fb_619a_4e14_8ad2_72b38cc1405a(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().filter(e -> e.getValue() >= e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_7_0b5db196_6720_4235_a894_5c759be5db04(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        if (max == 0) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_18_b3dcaee2_f724_43ee_b51e_3512c16eef53(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_0_65a521b4_c782_4ddb_b2a7_39519cbdc23b(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                max_freq = 1;
            } else if (i == max) {
                max_freq++;
            }
        }
        if (max_freq == 0) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_9_9e2edda4_777d_4360_a4bc_083e8a1193ab(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_17_5405a6e4_6a1c_46ce_ae22_7144ca5253f5(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            }
            if (maxFreq == i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_21_78fba301_a269_4638_8e03_6ed10f2315f8(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_99109fd8_3926_4101_afdf_e5eb40128a46(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                return entry.getKey();
            }
        }
        return -1;
    }

    
    public static int search_Problem_20_f5024411_6b59_4eeb_a191_466b6ebc553b(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_bbee6bf9_e7e1_4e4f_a296_691214b73bcf(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        int maxCount = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxCount) {
                max = entry.getKey();
                maxCount = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_17_2dff4d84_f0aa_471d_8877_8024d58d4241(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_8_222294e4_a374_4689_bd58_3e0772d942f4(ArrayList<Integer> lst) {
        Collections.sort(lst);
        for (int x : lst) {
            if (x > 0) return x;
        }
        return -1;
    }

    
    public static int search_Problem_22_60dfd769_2160_4c21_9271_c907999e1afa(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_9_cc30f95d_1381_4df1_b156_f6f71aaefb57(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_18_a04e2093_9b8f_4048_915a_730aabc74231(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_11_3d3281f2_9030_428e_a5a8_675c8ec21f8d(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer i : lst) {
            if (freq.containsKey(i)) {
                freq.put(i, freq.get(i) + 1);
            } else {
                freq.put(i,  1);
            }
        }
        int max = -1;
        int maxFreq = -1;
        for (Integer i : freq.keySet()) {
            if (freq.get(i) > maxFreq) {
                max = i;
                maxFreq = freq.get(i);
            }
        }
        return max;
    }

    
    public static int search_Problem_8_ac3743e7_7b1e_4cd8_8ee7_c64471278284(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_8_a9c16827_b0c9_4b1d_8976_0bb6d7538a69(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_22_c3091029_2dcd_49ad_8abb_f09d8a969ded(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
            if (map.get(i) > i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_20c0cea3_041e_488a_88cd_7218acd25a78(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (Integer i : lst) {
            freq += i;
            if (freq > max) {
                max = freq;
            }
        }
        return max > 0 ? max : -1;

    }

    
    public static int search_Problem_1_75172c87_1316_4a96_b313_e86bee55a46b(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxCount = 0;
        for (int i : lst) {
            if (maxCount < i) {
                maxCount = i;
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_3_8a510569_dac3_4dbe_8a22_4a0c8d2600c7(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int max_key = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                max_key = entry.getKey();
            }
        }
        if (max_key > 0) {
            return max_key;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_18_f0bb2e09_aba5_4449_908c_19d46f25341e(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_18_926dce09_9027_41e0_8c00_dcea5875b3ec(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1L);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                maxKey = l;
            }
        }
        return maxKey;
    }

    
    public static int search_Problem_17_2b905ee2_606a_4f80_993e_d6e0aa83c847(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_8_a09aaed8_8004_4cbc_8502_7834bac7afbe(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_4_26ac39da_6cb9_464a_af24_a2edcf907444(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        for (int i : lst) {
            if (lst.stream().filter(x -> x == i).count() >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_770cf412_3586_4284_84d2_7f9b77ace601(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxFreq = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxFreq) {
                max = l;
                maxFreq = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_20_079e386e_2d6e_4e3a_8f2a_d76ecdc65225(ArrayList<Integer> lst) {
        int maxValue = -1;
        int maxCount = 0;
        for (Integer l : lst) {
            int count = Collections.frequency(lst, l);
            if (count > maxCount) {
                maxCount = count;
                maxValue = l;
            }
        }
        return maxValue;
    }

    
    public static int search_Problem_20_1463fc04_d824_4055_8b21_7d5d3308fa12(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        int maxFreq = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxFreq) {
                max = entry.getKey();
                maxFreq = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_13_63c7680d_63d9_4547_a71d_d1febfcfacf8(ArrayList<Integer> lst) {
        // Your code here
        return -1;
    }

    
    public static int search_Problem_9_eedb0bf0_8312_4959_97f0_1f9d9b01ba99(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max && Collections.frequency(lst, i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_24_78962c36_c153_4933_b972_2e7c55c674f2(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_21_c2921377_348a_4770_ac1a_875547fa11a0(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_8f8c6c16_4160_4918_9a98_39990f17f21a(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_dbd11b32_c28c_4414_b698_92c09a768095(ArrayList<Integer> lst) {
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? -1 : max;
    }

    
    public static int search_Problem_5_b8b18924_9876_4f90_95c7_3fe4ea3c855b(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_3_69c99530_4186_494c_bf36_cf6353e82cd7(ArrayList<Integer> lst) {

        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
            }
        }
        if (max == -1) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_13_ff957fd4_2307_4277_a354_50d1c8f8cf4f(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (maxFreq < val) maxFreq = val;
            if (maxVal < val) maxVal = val;
        }
        return maxVal;

    }

    
    public static int search_Problem_13_09352cce_7fd8_40aa_a713_e15252c07b05(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_6760111d_4141_4c58_b0bc_583485454673(ArrayList<Integer> lst) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer v : lst) {
            int cnt = map.getOrDefault(v,0);
            map.put(v, ++cnt);
        }
        for (Integer v : map.keySet()) {
            if (map.get(v) >= map.get(v)) {
                return v;
            }
        }
        return -1;
    }

    
    public static int search_Problem_21_bbee6bf9_e7e1_4e4f_a296_691214b73bcf(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        int maxCount = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxCount) {
                max = entry.getKey();
                maxCount = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_16_6e31d389_16dc_4ce6_8ca2_98ac556db54c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_3_b535b964_8a4f_4495_9181_069f5f1d5c57(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for (Integer i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) == max) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_0_56d1c224_5e2a_42f8_94fe_7cd9d6025af6(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            if (i > 0 && freq >= i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_3_214c41c5_c843_456e_936a_0b8ae9406677(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max && Collections.frequency(lst, i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_2c864c4e_50fc_4ebc_b82d_1d840682f41d(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_3_8576a965_eca9_4c71_8d47_bcd59f4f4567(ArrayList<Integer> lst) {
        int max_val = -1;
        int max_freq = -1;

        for (int x : lst) {
            if (max_freq == -1 || x >= max_freq) {
                max_val = x;
                max_freq = x;
            }
            else if (x >= max_freq) {
                max_freq = x;
            }
        }

        return max_val;
    }

    
    public static int search_Problem_1_b11c6e4e_8771_4985_bdbb_f3c4ad8cd620(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                return max;
            }
        }
        return -1;
    }

    
    public static int search_Problem_19_11507560_26e7_4dae_9648_155379cbc2da(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l,  1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_12_8d938d12_2bce_456a_bb29_3a7567ced22b(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_11_b9dd5313_3e83_4a6b_90dd_75ad2556173b(ArrayList<Integer> lst) {

        int max = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
            }
        }
        if (max == 0) {
            return -1;
        }
        int count = 0;
        for (Integer l : lst) {
            if (l == max) {
                count++;
            }
        }
        if (count >= 2) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_7_beafc98f_ba4c_45a9_82ba_82dfe325ad6c(ArrayList<Integer> lst) {
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? -1 : max;
    }

    
    public static int search_Problem_23_825af927_179a_48fb_a505_2903eae30155(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream()
                .filter(e -> e.getValue() > e.getKey())
                .map(Map.Entry::getKey)
                .max(Comparator.naturalOrder())
                .orElse(-1);
    }

    
    public static int search_Problem_12_d7aadf7e_d5a2_412c_89e3_bca43e04b30c(ArrayList<Integer> lst) {
        Integer max = new Integer(0);
        Integer maxFreq = new Integer(0);
        for (Integer i : lst) {
            if (i > max) {
                max = i;
            }
            if (i.equals(max)) {
                maxFreq++;
            }
        }
        if (maxFreq >= max.intValue()) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_0_f3647ac3_dbfb_4884_9500_dc429d34210c(ArrayList<Integer> lst) {
        // Your code here
        return -1;
    }

    
    public static int search_Problem_17_1a5ff06d_da65_41b2_974c_b8d626938848(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_4_222294e4_a374_4689_bd58_3e0772d942f4(ArrayList<Integer> lst) {
        Collections.sort(lst);
        for (int x : lst) {
            if (x > 0) return x;
        }
        return -1;
    }

    
    public static int search_Problem_2_561a25ad_8b0d_47ce_adca_ea630e4d2f0d(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            }
            else if (maxFreq == i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_8_487a9b77_bb2b_4906_8950_e76938681839(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_16_f536f9e2_62f3_4cf2_a5fc_56cb9b050672(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int max_count = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max_count) {
                max_count = map.get(l);
                max = l;
            }
        }
        if (max_count < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_18_11212299_e15b_4955_96a5_5646b9dd8a87(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_11_4b69437d_1c4b_483c_87b6_50c1abab2ff4(ArrayList<Integer> lst) {
        int max = 0;
        for(int i : lst)
            if (i > 0) 
                max += i;
        if (max == 0) return -1;
        int freq = lst.stream().filter(i -> i > 0).count();
        return Math.max(max, freq);
    }

    
    public static int search_Problem_16_ee14dc35_0105_4691_8614_eb0bcf8c3e00(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            } else if (val == maxVal) {
                if (val > maxFreq) {
                    maxFreq = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_1_a9cd5b33_9b94_4531_b600_be56524db2b3(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int max_count = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > max) {
                max = lst.get(i);
                max_count = 1;
            } else if (lst.get(i) == max) {
                max_count++;
            }
        }
        if (max_count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_13_7ad8c680_4f0c_4b72_bbfe_365e5afda47d(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_c2921377_348a_4770_ac1a_875547fa11a0(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_11_d9347604_7ae9_4699_a95b_5e3d35df81d8(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int max_freq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                max_freq = 1;
            } else if (l == max) {
                max_freq++;
            }
        }
        if (max_freq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_7_f7998e71_317b_452d_871a_99ace61717ce(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i : lst) {
            if(map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            }
            else {
                map.put(i, 1);
            }
        }
        int max = -1;
        for(int i : map.keySet()) {
            if(map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_0192f9f5_ffcc_4467_9317_99a81a0c3b69(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1) {
                freq = i;
                max = i;
            } else if (freq >= i) {
                freq = i;
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_9179e5fd_8652_47e0_a859_89f97c9d38e2(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_23_4d4d0372_fa58_4e8c_94e4_d4c15db2ddb2(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        if (max == 0) {
            return -1;
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_2_928b8493_82a3_46fc_b82a_bcbfeba8e1ab(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_d6961b00_c64b_462d_a118_5255b105b2f1(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int res = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                res = l;
            }
        }
        return res;
    }

    
    public static int search_Problem_4_0d1e3d84_ba61_4d97_b7c0_0d624f7081db(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_9_5a25abac_0d57_498a_bcb7_de0ced493309(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_fdbdbebd_bc4e_4bf4_9041_aa13dd322cca(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        for (int i : lst) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_11_e97844f4_ea8c_48db_879b_8ec179f2d772(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_4_5b5b4a7f_d6ef_4601_8400_1090d332704c(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        Integer max = Collections.max(map.keySet());
        if (map.get(max) >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_0_027a41df_b838_47da_843e_cc3a510d5a00(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                max_freq++;
            }
        }
        if (max_freq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_3_d38b7080_4cc9_4903_a07c_02ff4b364c5e(ArrayList<Integer> lst) {

        int max = -1;
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_8d65d1f5_05ea_4fda_947b_7c21602c76a0(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_7_c7310735_6be8_4b9c_b10c_ea2ed58299c1(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream()
                .filter(e -> e.getValue() > e.getKey())
                .map(Map.Entry::getKey)
                .max(Comparator.naturalOrder())
                .orElse(-1);
    }

    
    public static int search_Problem_11_a8ca56d6_4f8c_43e0_8a63_4c34057329df(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_56811ddc_b69c_43a7_9a14_fbd669ad45c3(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_12_33109515_e93c_4c5d_b0a1_c3a2dbf94bbb(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_7_fae87fdf_e03d_43b2_bc85_48a054a4ea1f(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq == i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq > i && maxVal == i) {
                maxFreq = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_22_1f415932_de75_4114_8174_9fdb4e47e66e(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        if (max == 0) {
            return -1;
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= 2) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_20_443c4e41_1bdd_41ce_85de_619ea96542f6(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_17_a0d66240_ab0c_446a_916c_f45bb76f9eee(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_11_8f4ac413_1655_42ca_9dcf_89fdbb7a8c7c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_2_588b3590_e974_46f1_8afd_0bd9f58cfe88(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_4_2e6b3252_abe4_4c1b_9aeb_7badccaf75da(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_21_8daa32b0_a742_41c7_8e7e_00da5e9460a3(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_192e4f75_0973_4e99_b0b5_5fae962de673(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i) {
                maxFreq = i;
                maxVal = i;
            } else if (maxFreq == i) {
                maxVal = Math.max(maxVal, i);
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_23_0f0cdf63_305a_40ae_90bb_6f726f76631b(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        int max = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > max) {
                max = lst.get(i);
            }
        }
        if (max == 0) {
            return -1;
        }
        int count = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) == max) {
                count++;
            }
        }
        if (count == 1) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_17_41912114_448d_4efd_898f_5af1f815e85f(ArrayList<Integer> lst) {

        int max = -1;
        int maxCount = 0;
        for (int i : lst) {
            int count = Collections.frequency(lst, i);
            if (i > max && count >= i) {
                max = i;
                maxCount = count;
            }
        }
        return maxCount >= max ? max : -1;
    }

    
    public static int search_Problem_10_7636a358_de74_4432_a902_c97f3d3a5596(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int res = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                res = l;
            }
        }
        return res;
    }

    
    public static int search_Problem_22_6f0f7490_0928_4f6a_a70e_b21ecf33d90e(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_12_8a510569_dac3_4dbe_8a22_4a0c8d2600c7(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int max_key = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                max_key = entry.getKey();
            }
        }
        if (max_key > 0) {
            return max_key;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_2_73361bd0_0385_456d_bfc6_c35cd881f987(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq += i;
            if (freq > max) {
                max = freq;
            }
        }
        return max > 0 ? max : -1;
    }

    
    public static int search_Problem_6_e47f8fb2_1b80_499e_bdd5_eaa88ee7013a(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            }
        }
        return maxFreq > maxVal ? maxFreq : -1;

    }

    
    public static int search_Problem_9_bf9223ca_6953_4fd4_8d53_d07cd14bd004(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq += i;
            if (freq > max) {
                max = freq;
            }
        }
        return max >= 0 ? max : -1;

    }

    
    public static int search_Problem_15_5f067a56_9b40_4252_8690_d1af6c5964ce(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxCount) {
                max = entry.getKey();
                maxCount = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_23_51a19348_3e22_4559_af38_f780fe18066d(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_12_256d22df_0c9f_4262_85be_ca79310258aa(ArrayList<Integer> lst) {

        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_496aa325_e913_485d_af8c_d6fe3b24c3b8(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > maxFreq) {
                maxFreq = freq;
                max = i;
            }
        }
        if (maxFreq < max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_0_fa76f9e5_baf8_4aa7_9825_f26a8973e5f4(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_10_5f6bd213_59a5_4749_8a30_0e5828089cf1(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                max = Math.max(max, entry.getKey());
            }
        }
        return max;
    }

    
    public static int search_Problem_10_fc5f7dfc_3ffe_4e47_b552_83096aab811f(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_24_135b2d59_fd89_4be3_915d_7e14dfb110ac(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_11_682fbb0c_d0f4_45cf_b692_24dc69bcd0ef(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_23_244060d3_5b78_4d86_8687_f275f392833c(ArrayList<Integer> lst) {
        if (lst.isEmpty()) return -1; // no such value
        int maxVal = -1;
        int curVal = lst.get(0);
        int maxCount = 0;
        for (int i = 1; i < lst.size(); i++) {
            curVal = lst.get(i);
            if (curVal == -1) return -1; // no such value
            int cnt = lst.get(i).intValue();
            if (cnt > maxCount) {
                maxVal = curVal;
                maxCount = cnt;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_11_17fbe16e_7edd_49cd_93be_4240f1483e53(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxCount = 1;
            } else if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_5_3caad047_965b_4e7d_bca4_dffbb6eb95cd(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_20_9e2edda4_777d_4360_a4bc_083e8a1193ab(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_24_746cd7ab_88fb_4275_8a8f_3c1208aaaa9c(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_16_a4106e4c_1ff9_4565_9df9_49d9dd86c455(ArrayList<Integer> lst) {
        int freq = 0;
        ArrayList<Integer> newArr = new ArrayList<>();
        for (Integer i : lst) {
            if (i > 0) freq++;
            newArr.add(i);
        }
        if (freq == 0)
            return -1;
        else
            return newArr.get(newArr.size() - 1);
    }

    
    public static int search_Problem_12_9651fa16_db0c_4800_86fb_6419edae9c3c(ArrayList<Integer> lst) {

        int greatest = 0;
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
            if (i > greatest) {
                greatest = i;
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_6_8be40d32_07ac_49a1_95b3_dee65efcc156(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_22_4859b23b_9104_4da6_8ba9_99338acf5c2f(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        int res = -1;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > max) {
                max = lst.get(i);
                maxFreq = 1;
            } else if (lst.get(i) == max) {
                maxFreq++;
            }
            if (maxFreq > res) {
                res = maxFreq;
            }
        }
        return res == 0 ? -1 : max;
    }

    
    public static int search_Problem_0_b3d5d24f_a7dd_4d6e_a2c3_ae058ab213ce(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_1_e7de9ea7_ad79_4da6_9c83_d15e86ac7f33(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (int i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxKey = i;
            }
        }
        if (max == 0) {
            return -1;
        } else {
            return maxKey;
        }
    }

    
    public static int search_Problem_6_1cf8d8cc_1fbc_470d_bb24_a4debf7cab03(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_10_08e3f4cd_c5f0_483f_9398_21bb85fe6042(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                maxFreq = val;
            } else if (val == maxVal && val >= maxFreq) {
                maxFreq = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_18_bda330ec_6b9c_46de_83a9_3eb0b47139f1(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i : lst) {
            if(map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = -1;
        for(int i : map.keySet()) {
            if(map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_d5787934_3bb2_4433_9d85_c748cc6374db(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_5_17ae3662_124b_41f9_a35b_8da829c38f55(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i = lst.size(); i > 0; i--) {
            if (map.containsKey(i) && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_14_e7cbd5aa_b981_4241_81f3_023fa35a3fbf(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max && Collections.frequency(lst, i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_8_9396907f_0e66_4f00_9139_c7e56d4292c9(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_5_fbdd92d5_720e_4f1f_a89c_c4e966cc0d82(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_1_0c910242_f1ce_4ba0_98fd_4ee16ebc5a8e(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        for(int i : lst){
            if(lst.stream().filter(x -> x == i).count() >= i){
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_74c6d266_8b0c_481c_a3b2_0c818252626e(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (maxVal == -1 || maxVal < val) {
                maxVal = val;
                maxFreq = val;
            } else if (maxFreq >= val) {
                maxFreq = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_19_675a3c30_bc8f_46b4_9912_b82eb2b01bae(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            map.put(i, map.getOrDefault(i, 0L) + 1);
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_18_bbee6bf9_e7e1_4e4f_a296_691214b73bcf(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        int maxCount = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxCount) {
                max = entry.getKey();
                maxCount = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_6_4254be1d_6589_40e3_a9a0_1772474cb79a(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_24_834b47d3_fa4d_4824_9c64_ca8a3c0e50c3(ArrayList<Integer> lst) {
        ArrayList<Integer> copy = new ArrayList<>();
        int maxIndex = -1;
        for (int num : lst) {
            if (!copy.contains(num)) {
                copy.add(num);
                if (copy.size() > maxIndex) {
                    maxIndex = copy.size() - 1;
                }
            }
        }
        for (int num : copy) {
            if (num > 0) {
                int freq = lst.stream().filter(n -> n == num).count();
                if (freq >= num) {
                    return num;
                }
            }
        }
        return -1;
    }

    
    public static int search_Problem_22_5b3fb716_d86f_4965_b39e_8c9fd604cd84(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        int maxCount = 0;
        for (Integer i : lst) {
            if (i > max) {
                max = i;
                maxCount = 1;
            } else if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_11_c8fdcf0a_47af_4343_80f6_8efee4357270(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        int maxKey = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                maxKey = l;
            }
        }
        return maxKey;
    }

    
    public static int search_Problem_24_78fba301_a269_4638_8e03_6ed10f2315f8(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_17_bc30360c_86db_46c9_a359_60c5b7cecb92(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            if (freq < i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_3_675a3c30_bc8f_46b4_9912_b82eb2b01bae(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            map.put(i, map.getOrDefault(i, 0L) + 1);
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_102b8167_0e69_44a5_ac61_670403b60de3(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxCount = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxCount = 1;
            } else if (l == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_6_b587352a_ee73_4ffc_a4b0_7ccf75181eeb(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int max_count = 0;
        for(int i : lst) {
            if(i > max) {
                max = i;
                max_count = 1;
            } else if(i == max) {
                max_count++;
            }
        }
        if(max_count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_4_f0edbe6d_3455_470f_b3c1_de4f91b94e73(ArrayList<Integer> lst) {
        int max = 0;
        int maxFreq = -1;
        for(int i : lst) {
            if(i>0) {
                int freq = Collections.frequency(lst, i);
                if(freq>maxFreq) {
                    max = i;
                    maxFreq = freq;
                }
            }
        }
        return max;

    }

    
    public static int search_Problem_18_b535b964_8a4f_4495_9181_069f5f1d5c57(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for (Integer i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) == max) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_9_a3e98018_5032_4202_b6c3_0635ed1bb511(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_a78bc9be_2c3d_4c8c_98cb_90ec5d6c68d6(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
            if (count > maxCount) {
                maxCount = count;
            }
        }
        if (maxCount >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_17_6bc78077_bfe1_4592_b06e_4f9c92a6af06(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_5_2785d7f6_7671_4320_888d_ca98d7cdc09a(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : lst) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_3_b8d98c6c_f366_4331_b9d7_e5aee0966a87(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == -1) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_22_c7435003_479d_4d32_b2fb_1b9aea58b610(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_0c910242_f1ce_4ba0_98fd_4ee16ebc5a8e(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        for(int i : lst){
            if(lst.stream().filter(x -> x == i).count() >= i){
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_9aa38e13_c23d_4b4a_b00a_ceffc44f9d19(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_a6f82188_4b0c_4a53_9d8d_b645f1eafb4b(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxCount = 0;
        for(int val : lst) {
            int count = Collections.frequency(lst, val);
            if(count > maxCount) {
                maxCount = count;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_2_5af4b9a6_2dd0_41e9_9ff3_f88d7d0876fd(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_9_79425b2b_e0fc_4151_b454_f0f581fcc1c4(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_0c1472b4_4123_4385_8e5c_95435dde6fde(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int max_count = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max_count) {
                max = l;
                max_count = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_23_9651fa16_db0c_4800_86fb_6419edae9c3c(ArrayList<Integer> lst) {

        int greatest = 0;
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
            if (i > greatest) {
                greatest = i;
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_16_f5b8baa5_499d_4aa3_b66e_5d771b7ec197(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= lst.size()) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_17_f19581b8_5030_41c1_8586_d2ea96b71250(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_5_f8c33cc5_7c29_4773_9b27_933f8457cbee(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        int res = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
            if (maxFreq >= lst.size()) {
                res = max;
                break;
            }
        }
        return res;
    }

    
    public static int search_Problem_8_745a129d_4116_42cb_be7c_705ade38b03b(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            int count = Collections.frequency(lst, i);
            if (count > maxCount) {
                maxCount = count;
                max = i;
            }
        }
        return maxCount >= max ? max : -1;
    }

    
    public static int search_Problem_18_386f04c3_a999_423e_b2a3_427a4a957aef(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_366bb190_a667_41ed_8fde_ef13418ad335(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_3_e28fe6b9_5bb6_40ea_bd1b_3cb5d0c608a6(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxFreq = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxFreq) {
                maxFreq = entry.getValue();
                max = entry.getKey();
            }
        }
        return max;
    }

    
    public static int search_Problem_3_ee71fb16_368d_4dfd_af93_232e75863a93(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_3e8a3c5d_b761_4e5f_9f95_58f9f48f65a3(ArrayList<Integer> lst) {
        List<Integer> sortedLst = lst.stream().sorted().collect(Collectors.toList());
        
        int first = sortedLst.get(0); // first value
        int max = first;
        int cnt = 0;
        
        for (int i = 0; i < sortedLst.size(); i++) {
            if (sortedLst.get(i) > 0 && sortedLst.get(i) <= max) {
                cnt++;
                max = sortedLst.get(i);
            }
        }
        
        if (cnt >= sortedLst.size() || max <= 0) {
            return -1L;
        }
        
        for (int i = 0; i < sortedLst.size(); i++) {
            if (sortedLst.get(i) > 0 && sortedLst.get(i) == max) {
                return i;
            }
        }
        
        return -1L;
    }

    
    public static int search_Problem_15_44810787_33a6_40bf_b0c6_d09d764c9d51(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        for (int l : map.keySet()) {
            if (map.get(l) >= l && l > max) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_dc7acd40_8182_4bc2_9ca8_d6779a0ee2bf(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_3_7600ca3c_a2c2_4f63_8b3f_d1d675a8a61e(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_6_fae87fdf_e03d_43b2_bc85_48a054a4ea1f(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq == i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq > i && maxVal == i) {
                maxFreq = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_24_1c21a877_0aa5_43f5_bae9_6b5d10c857fe(ArrayList<Integer> lst) {

        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                max = entry.getKey();
            }
        }
        return max;
    }

    
    public static int search_Problem_12_76588fc0_5d84_4b06_ae10_4db7945ccf35(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_590ade4f_ecdb_43b3_aa90_866fc02988f5(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxCount = 0;
            }
            if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_13_0a755a50_3a6b_4701_aeef_43767dd5ca7e(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_2ed0fa47_7c0a_4e2d_a206_eb63c3c8ec2a(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            if (freq == 0 || freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_8_4e6eba07_392e_4e3e_aec0_886279fdd256(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                if (maxVal < 0 || maxVal > val) {
                    maxVal = val;
                    maxFreq = val;
                }
                else {
                    maxFreq++;
                }
            }
        }
        return maxFreq > maxVal ? maxVal : -1;

    }

    
    public static int search_Problem_3_95176853_9229_41a5_9a3a_83d817b589af(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        return map.entrySet().stream().filter(e -> e.getValue() > e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_7_8b44da3b_143c_4ac6_9557_817833127ac0(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_e7528919_2003_4faa_a52b_6553cd7b2634(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > maxFreq) {
                max = i;
                maxFreq = freq;
            }
        }
        if (maxFreq < max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_7_32cf49dd_c306_489c_a08c_237166bf8e0d(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_711f4351_c248_412a_a2c3_aa186b45f8ad(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > max_freq) {
                max_freq = freq;
                max = i;
            }
        }
        if (max_freq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_4_4f014b42_44fa_4dfe_837f_cc16057e2f6c(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int max_key = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                max_key = l;
            }
        }
        if (max == 0) {
            return -1;
        }
        return max_key;
    }

    
    public static int search_Problem_1_ce2059a7_d0d9_443b_9c01_61718e3828e1(ArrayList<Integer> lst) {

        // Your code here
        int max = 0;
        int maxFreq = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) > maxFreq) {
                maxFreq = map.get(i);
                max = i;
            }
        }
        return maxFreq >= max ? max : -1;
    }

    
    public static int search_Problem_18_968352cd_1cab_4638_888d_e6c95e77b1df(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_19_fe77f6d5_77b5_4602_b76f_d51dbfd3dea6(ArrayList<Integer> lst) {
        int max = 0;
        for(int l : lst) {
            max = Math.max(max, l);
            max = Math.min(max, l);
        }
        return max;
    }

    
    public static int search_Problem_10_9e47b236_3907_4993_94f8_33e8a1a1b8a4(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_3f6f3e1e_97db_4112_9366_533f7d7cd09b(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            }
        }
        return maxFreq > maxVal ? maxFreq : -1;

    }

    
    public static int search_Problem_11_192e4f75_0973_4e99_b0b5_5fae962de673(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i) {
                maxFreq = i;
                maxVal = i;
            } else if (maxFreq == i) {
                maxVal = Math.max(maxVal, i);
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_14_d7dcf3f3_85ac_4b71_9157_a3c4aa2b8b00(ArrayList<Integer> lst) {
        List<Integer> sortedLst = lst.stream().sorted().collect(Collectors.toList());
        for (int l : sortedLst) {
            int freq = Collections.frequency(lst, l);
            if (freq >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_3_3d6b7caf_58e4_44eb_aa58_9099afa0f421(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        int max = 0;
        int maxVal = 0;
        for (int i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxVal = i;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_20_a04e2093_9b8f_4048_915a_730aabc74231(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_6166374f_0430_42be_8de4_21499d083c6a(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_5f6bd213_59a5_4749_8a30_0e5828089cf1(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                max = Math.max(max, entry.getKey());
            }
        }
        return max;
    }

    
    public static int search_Problem_8_c0ab565d_78ee_4b97_8f35_cbbe04ceb0a1(ArrayList<Integer> lst) {
        if (lst.isEmpty()) {
            return -1;
        }
        int maxVal = 0;
        int maxFreq = 0;
        for (Integer i : lst) {
            int freq = lst.stream().filter(v -> v.equals(i)).count();
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = i;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_5_0c1472b4_4123_4385_8e5c_95435dde6fde(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int max_count = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max_count) {
                max = l;
                max_count = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_13_ad4f6f5f_6e89_41bf_99c5_e90a4758efe1(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l,  1);
            }
        }
        int max = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey() && entry.getKey() > max) {
                max = entry.getKey();
            }
        }
        return max;
    }

    
    public static int search_Problem_21_38b6050a_75f1_491e_83ff_1ca314d3e5c6(ArrayList<Integer> lst) {

        // Write your code here
        return lst.stream().max(Comparator.comparing(x -> x, Comparator.reverseOrder())).get();
    }

    
    public static int search_Problem_1_a098d62a_a553_4ade_9a75_79535ff3a62b(ArrayList<Integer> lst) {

        // write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : lst) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_8_f663888b_49c0_4cc0_bada_097ac0b02fb0(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        for(int i : lst){
            if(i > max && Collections.frequency(lst, i) >= i)
                max = i;
        }
        return max;
    }

    
    public static int search_Problem_14_b71e261f_c776_4411_a685_746f0de9c888(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_2f614d3c_e852_4600_821f_3df555fe65c5(ArrayList<Integer> lst) {
        int maxVal = lst.get(0);
        for (int i = 0; i < lst.size(); ++i) {
            if (lst.get(i) >= maxVal) {
                maxVal = lst.get(i);
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_5_b2626fec_e3dc_4183_9c8d_94e52e63ead5(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_3_c158e614_67ca_4230_8a79_fa034e92e59d(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            if (freq.containsKey(l)) {
                freq.put(l, freq.get(l) + 1);
            } else {
                freq.put(l, 1);
            }
        }
        int max = -1;
        int maxFreq = 0;
        for (Integer l : freq.keySet()) {
            if (freq.get(l) > maxFreq) {
                max = l;
                maxFreq = freq.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_1_8ba38142_d567_4e4a_802e_7149f07ae5a4(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_9_9bfec60d_13a4_4098_b41b_2d2517b28eda(ArrayList<Integer> lst) {

        // your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : lst) {
            if (map.get(i) > i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_9_e46117bb_b5b6_45f8_895c_bf2538f55e42(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        int count = 0;
        for(int i : lst){
            if(i > max){
                count = 0;
                max = i;
            }
            if(i == max){
                count++;
            }
            if(count >= i){
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_23_c44b5dc4_ad4b_4230_ac68_a4b56f43f8d7(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_6_a4ab28e5_f9ed_407c_aa2c_62e8c848c0f4(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            map.put(i, map.getOrDefault(i, 0L) + 1);
        }
        for (Integer i : lst) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_13_f7adaaaa_e4ce_448f_b4da_6b1fc7c4bd59(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxFreq = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxFreq) {
                max = l;
                maxFreq = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_16_28d29544_8b48_47a1_9f43_4f02540f0280(ArrayList<Integer> lst) {
        int max = -1;
        int freq = 0;
        for (Integer i : lst) {
            freq += i;
            if (freq > max) {
                max = freq;
            }
        }
        return max;

    }

    
    public static int search_Problem_2_cc763eb2_78e7_4703_9ca6_ed9402c80bac(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int max_count = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max_count) {
                max_count = entry.getValue();
                max = entry.getKey();
            }
        }
        return max;
    }

    
    public static int search_Problem_18_67e003ed_8729_4d34_bfad_41aebec85b4a(ArrayList<Integer> lst) {

        // Your code here
        int max = -1;
        for (int i : lst) {
            if (i > max && Collections.frequency(lst, i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_24_d0653b8e_478d_40cd_a973_21d0d41cd72b(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int maxCount = 0;
        for(int i : lst) {
            if(i > max) {
                max = i;
                maxCount = 1;
            } else if(i == max) {
                maxCount++;
            }
        }
        if(maxCount >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_0_16fef4e7_fb74_4448_8b50_e6600a3a6a23(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxCount) {
                max = l;
                maxCount = map.get(l);
            }
        }
        if (maxCount == 1) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_0_5d00a8bb_74e5_4fe9_9ce3_3e7f1b05d25c(ArrayList<Integer> lst) {
        ArrayList<Integer> ints = new ArrayList<>();
        for(Integer x : lst) {
            if(ints.contains(x)) {
                ints.set(ints.indexOf(x), x + 1);
            } else {
                ints.add(x);
            }
        }
        int max = Integer.MIN_VALUE;
        for(int i = 0; i <= ints.size(); i++) {
            for(int j = i+1; j <= ints.size(); j++) {
                if((ints.get(i) + ints.get(j)) > max) {
                    max = ints.get(i) + ints.get(j);
                }
            }
        }
        return max;
    }

    
    public static int search_Problem_21_707b2625_500e_4722_86c2_23df7a9249e1(ArrayList<Integer> lst) {

        // your code here
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : lst) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_7_ab986697_8fe0_4950_969c_e9b84320be58(ArrayList<Integer> lst) {
        
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxVal < 0) {
                maxVal = i;
                maxFreq = i;
            } else if (i < maxVal) {
                maxVal = i;
                maxFreq = i;
            } else if (i == maxVal) {
                maxFreq++;
            }
        }
        if (maxFreq >= maxVal) {
            return maxVal;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_24_a7e4be8e_87a3_427a_91b0_d5c547a82c36(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_18_4b0c895b_b846_4a21_86d2_b7aed4d550ac(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            }
        }
        return maxFreq > maxVal ? maxFreq : -1;

    }

    
    public static int search_Problem_3_7135436b_b56f_4caa_ab64_f95e389e0db0(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int max_count = 0;
        for (int i = 0; i < lst.size(); i++) {
            int count = 0;
            for (int j = 0; j < lst.size(); j++) {
                if (lst.get(j) == lst.get(i)) {
                    count++;
                }
            }
            if (count > max_count) {
                max = lst.get(i);
                max_count = count;
            }
        }
        if (max_count == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_5_5345986f_dd43_4e92_a04f_775a3e9ff0ee(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l,  1);
            }
        }
        for (Integer l : lst) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_5_d4e90559_aa80_4ae4_b4b6_aaf779727126(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_6_e518fe27_2bdc_4fc5_aa88_55988ae35f39(ArrayList<Integer> lst) {

        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_cea1a008_461d_4c1c_8dc8_ed931aeec6cc(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_8d50debe_bb7b_4005_9945_4bce3244422c(ArrayList<Integer> lst) {
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? -1 : max;
    }

    
    public static int search_Problem_15_96e6545a_c7ca_4b85_8e9d_88c70ab6b6f5(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).orElse(-1);
    }

    
    public static int search_Problem_21_7c05614e_449f_45a4_b95d_49edd1b3d733(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream()
                .filter(e -> e.getKey() > 0 && e.getValue() >= e.getKey())
                .max(Comparator.comparing(Map.Entry::getKey))
                .map(Map.Entry::getKey)
                .orElse(-1);
    }

    
    public static int search_Problem_21_0fea2503_6108_4afd_8774_08e0357839a7(ArrayList<Integer> lst) {
        // write your code in Java 7
        return -1;
    }

    
    public static int search_Problem_6_49b07bd6_9602_4e17_91f6_96b598496d8b(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().max(Comparator.comparing(Map.Entry::getValue)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_4_2504374f_70da_4de9_91c9_b5fe595c524a(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (int l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int max_count = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max_count) {
                max = entry.getKey();
                max_count = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_8_9ddaa53e_211e_44fc_80d0_8586daeabb49(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l,  1);
            }
        }
        int max = -1;
        int max_key = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                max_key = entry.getKey();
            }
        }
        if (max_key > 0) {
            return max_key;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_10_4b69437d_1c4b_483c_87b6_50c1abab2ff4(ArrayList<Integer> lst) {
        int max = 0;
        for(int i : lst)
            if (i > 0) 
                max += i;
        if (max == 0) return -1;
        int freq = lst.stream().filter(i -> i > 0).count();
        return Math.max(max, freq);
    }

    
    public static int search_Problem_1_38b6050a_75f1_491e_83ff_1ca314d3e5c6(ArrayList<Integer> lst) {

        // Write your code here
        return lst.stream().max(Comparator.comparing(x -> x, Comparator.reverseOrder())).get();
    }

    
    public static int search_Problem_20_4b9b24f9_3a40_4b6b_9d2d_3f41900fd8d9(ArrayList<Integer> lst) {
        int max = -1;
        int freq = 0;
        for (int i : lst) {
            if (i > 0 && freq >= i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_0_aa5c96a1_f135_429e_86d3_2eb602e7a801(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_35541442_80c9_4c9b_b080_dbcc49c88376(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1L);
            }
        }
        Integer max = 0L;
        for (Integer i : map.keySet()) {
            if (map.get(i) > max && i > 0) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_c98aa025_cbe3_4a8e_85ea_dae95b2133e3(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_13_6ebca5a5_f6ca_423a_a444_56d608c56a85(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().max(Comparator.comparing(Map.Entry::getValue)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_17_d41cb9ae_3307_40b3_8618_4339d9893757(ArrayList<Integer> lst) {
        int max = -1;
        for(int i : lst){
            if( i > 0 ){
                if( (i+max) >= 0 && (i+max) >= i ) max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_18_56e4132f_3c41_4286_bf8a_2fe3f4cddd95(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                max = Math.max(max, entry.getKey());
            }
        }
        return max;
    }

    
    public static int search_Problem_9_a8ca56d6_4f8c_43e0_8a63_4c34057329df(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_598c6386_e2d8_466f_b429_b5feb3be3f43(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_9be68ec5_0ce5_48dd_aa8c_986716611188(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for (Integer i : map.keySet()) {
            if (map.get(i) > map.get(max) && map.get(i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_e6c03dbd_5698_4564_8f1b_1da318148a1f(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_37b5f594_f270_4ef5_b9e6_ad08f05ad08d(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_15_f663888b_49c0_4cc0_bada_097ac0b02fb0(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        for(int i : lst){
            if(i > max && Collections.frequency(lst, i) >= i)
                max = i;
        }
        return max;
    }

    
    public static int search_Problem_2_b9f062ab_9c9b_4f6b_aeae_13d0e7690062(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxCount) {
                max = l;
                maxCount = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_16_8652d889_1954_46d5_8813_79cc71ca5a69(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? max : -1;
    }

    
    public static int search_Problem_21_92fb837c_81a6_47a8_b0b7_03823f0559a3(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (int l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getKey() < entry.getValue() && entry.getKey() > max) {
                max = entry.getKey();
            }
        }
        return max;
    }

    
    public static int search_Problem_10_6363f576_8e4c_4ac3_bcae_903c0f2b8d68(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int maxKey = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                maxKey = l;
            }
        }
        return maxKey;
    }

    
    public static int search_Problem_22_f610483e_c8ff_481c_9f08_743fd1014af1(ArrayList<Integer> lst) {
        if (lst.size() < 1) return -1;
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            Integer prev = map.putIfAbsent(i, 0L);
            if (prev != null && prev > 0) map.put(i, map.get(prev) + 1);
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) > 0 && map.get(i) == lst.get(lst.indexOf(i))) return i;
        }
        return -1;
    }

    
    public static int search_Problem_15_a46d49d1_a69c_46fb_ba40_8249650c89e2(ArrayList<Integer> lst) {
        int max = -1;
        HashMap<Integer, Integer> hm = new HashMap<Integer, Integer>();
        for (int val : lst) {
            hm.put(val, hm.getOrDefault(val, 0L) + 1);
            if (hm.getOrDefault(val, 0L) > max) {
                max = hm.getOrDefault(val, 0L);
            }
        }
        return max;
    }

    
    public static int search_Problem_23_94aca11d_a42f_431d_a2be_d853de76215d(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_9_184d9555_b5dd_4c06_8fab_80a84f3de604(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > max_freq) {
                max = i;
                max_freq = freq;
            }
        }
        return max_freq >= max ? max : -1;
    }

    
    public static int search_Problem_7_b8d726c4_a8ff_413e_8ca1_0e62344b0d38(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxFreq = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxFreq) {
                max = l;
                maxFreq = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_12_06d89672_7249_4af3_92bd_f3245dcc8e05(ArrayList<Integer> lst) {
        int maxVal = Integer.MIN_VALUE, maxCount = Integer.MIN_VALUE;
        for (Integer l : lst) {
            if (maxCount < l) {
                maxCount = l;
                maxVal = l;
            }
        }
        return maxVal > 0 ? maxVal : -1;
    }

    
    public static int search_Problem_10_53e25d72_6df1_408a_87f9_6da0fd58b7f6(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_18_ee846170_4308_42c2_8091_d199abe733d3(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_598c6386_e2d8_466f_b429_b5feb3be3f43(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_4d4d0372_fa58_4e8c_94e4_d4c15db2ddb2(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        if (max == 0) {
            return -1;
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_23_b9a7d3ef_2020_4195_b92f_e7b44b558144(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (i > max) {
                max = i;
                freq = freq - 1;
            }
        }
        return freq > 0 ? max : -1;

    }

    
    public static int search_Problem_13_c13d803b_d252_49d8_8325_b8a077cc7935(ArrayList<Integer> lst) {
        int greatestVal = -1;
        int greatestFreq = 0;
        for (int e : lst) {
            if (e > 0 && e >= greatestFreq) {
                greatestVal = e;
                greatestFreq = e;
            } else if (e > 0 && e < greatestFreq) {
                greatestFreq = e;
            }
        }
        if (greatestVal != -1) {
            return greatestVal;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_14_f33ca2cc_cee3_402e_9ae1_c7f309b495ae(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_c83b0ecd_c363_40cd_b8cc_26efda03a9d2(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i) {
                max = i;
                maxFreq = i;
            } else if (maxFreq == i) {
                maxFreq++;
            }
        }
        return max;

    }

    
    public static int search_Problem_2_7ee72e5c_ac1f_42fa_ad8a_1dfa72fc4265(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        int maxVal = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
                maxVal = l;
            } else if (l == max) {
                maxFreq++;
                if (maxFreq > maxFreq) {
                    maxVal = l;
                }
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return maxVal;
    }

    
    public static int search_Problem_15_78962c36_c153_4933_b972_2e7c55c674f2(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_24_eb916da8_6f93_4acb_961d_f35cccf6daf6(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : lst) {
            if (map.get(i) >= i && i > 0) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_1_7636a358_de74_4432_a902_c97f3d3a5596(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int res = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                res = l;
            }
        }
        return res;
    }

    
    public static int search_Problem_13_3750061a_b5b3_4f8f_a483_167259b4d890(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > max_freq) {
                max = i;
                max_freq = freq;
            }
        }
        if (max_freq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_20_9bfec60d_13a4_4098_b41b_2d2517b28eda(ArrayList<Integer> lst) {

        // your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : lst) {
            if (map.get(i) > i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_13_0c910242_f1ce_4ba0_98fd_4ee16ebc5a8e(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        for(int i : lst){
            if(lst.stream().filter(x -> x == i).count() >= i){
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_97323af0_3fd8_4681_a2fd_6d6312b39d0a(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_9_d97e020a_b337_4547_8647_344285c6fd00(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_f236915b_8ada_4658_8a03_99f6fa08b578(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (int i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxKey = i;
            }
        }
        if (maxKey == 0) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_10_b1d41f5c_1f82_4bbb_a4d0_633c3dc854f3(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_02da4b23_c23e_4dd3_944d_f0b9de1786f4(ArrayList<Integer> lst) {
        ArrayList<Integer> freq = new ArrayList<>();
        int maxFreq = -1;
        int maxVal = -1;
        for (int val : lst) {
            if (freq.stream().filter(f -> f == val).count() == 0) {
                freq.add(val);
                if (val > maxVal) {
                    maxFreq = maxVal;
                    maxVal = val;
                } else if (val == maxVal) {
                    maxFreq = val;
                }
            }
        }
        return maxFreq == -1 ? -1 : maxVal;
    }

    
    public static int search_Problem_15_5f85706c_d5e2_45f8_a076_be1f06d10a8f(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxCount = 0;
        for (int val : lst) {
            if (val == 0)
                continue;
            if (maxVal == -1 || val > maxVal) {
                maxVal = val;
                maxCount = 0;
            } else {
                ++maxCount;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_23_bffdfb4c_4b04_4d99_8f8e_330a0df24e9b(ArrayList<Integer> lst) {
        int max = -1;
        int freq = 0;
        for (Integer i : lst) {
            if (freq > i.intValue()) break;
            freq += 1;
            if (freq > i.intValue()) {
                max = i;
                freq = i.intValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_1_98bfe3ed_f3ce_47d1_8bea_af7d7e64762f(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
            if (map.get(i) > maxFreq) {
                maxFreq = map.get(i);
                max = i;
            }
        }
        if (maxFreq > 1) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_4_770cf412_3586_4284_84d2_7f9b77ace601(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxFreq = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxFreq) {
                max = l;
                maxFreq = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_5_bc30360c_86db_46c9_a359_60c5b7cecb92(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            if (freq < i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_0_f058ba41_e5a0_4800_9b6e_ef0c19812839(ArrayList<Integer> lst) {
        return lst.stream().filter(i -> Collections.frequency(lst, i) >= i).max(Comparator.naturalOrder()).orElse(-1);
    }

    
    public static int search_Problem_8_6bc78077_bfe1_4592_b06e_4f9c92a6af06(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_16_69c99530_4186_494c_bf36_cf6353e82cd7(ArrayList<Integer> lst) {

        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
            }
        }
        if (max == -1) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_21_d33105fd_ae82_483d_8aec_d798583c84af(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_16_a04e2093_9b8f_4048_915a_730aabc74231(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_6ea44e65_c02c_44c2_a843_3905ab5cb9c5(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_5_5df75cfb_3dea_4d52_8bf5_991c81cc9f1c(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_d16891fd_191b_4424_87c8_549fbb96d74b(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_dbd11b32_c28c_4414_b698_92c09a768095(ArrayList<Integer> lst) {
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? -1 : max;
    }

    
    public static int search_Problem_4_6a0ce858_cb00_4a00_a7bc_371fefd13857(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? max : -1;
    }

    
    public static int search_Problem_7_43e6b27e_ac4f_43ac_9bd3_1bc3072ea43a(ArrayList<Integer> lst) {
        int max = -1;
        int freq = 0;
        for (int i : lst) {
            if (freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_f6e4ed8f_2384_48cb_af77_d4b3d22b86c0(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1L);
            }
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_8_6242e2bc_00ba_462b_aa6a_f5a8f1e4c375(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_17_bf4c9e57_c2aa_45b1_8c6a_a06b6a432f92(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                max = entry.getKey();
            }
        }
        return max;
    }

    
    public static int search_Problem_24_bf9223ca_6953_4fd4_8d53_d07cd14bd004(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq += i;
            if (freq > max) {
                max = freq;
            }
        }
        return max >= 0 ? max : -1;

    }

    
    public static int search_Problem_3_56e4132f_3c41_4286_bf8a_2fe3f4cddd95(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                max = Math.max(max, entry.getKey());
            }
        }
        return max;
    }

    
    public static int search_Problem_18_fbad1ffa_6d84_4957_bcfe_b5d6c97ad692(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_20ed5ec9_c048_41b1_abc7_5b9b76dcb511(ArrayList<Integer> lst) {
        int n = lst.size();
        
        Collections.sort(lst);
        
        if (n > 1) { // if there is at least 2 or more occurrences we need to return -1
            
            int freq = 1;
            int max;
            
            for (int i = 1; i < n; i++) {
                if (lst.get(i) - lst.get(i-1) > 0) {
                    freq++;
                } else {
                    break;
                }
            }
            
            if (freq > lst.get(0) && freq >= n) {
                max = lst.get(0);
            } else {
                max = -1;
            }
            
            for (int i = 0; i < n; i++) {
                if (lst.get(i) == freq) {
                    max = lst.get(i);
                    break;
                }
                if (lst.get(i) > freq) {
                    max = lst.get(i);
                }
            }
            
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_4_2a302c69_6936_40c8_a52a_59baf7d5a8ec(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer i : lst) {
            if (i > max) {
                max = i;
            }
            if (lst.stream().filter(j -> j == i).count() > maxFreq) {
                maxFreq = lst.stream().filter(j -> j == i).count();
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_5_c95feff2_fa70_4a44_b10f_6dc0f08ee1aa(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_14_8a510569_dac3_4dbe_8a22_4a0c8d2600c7(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int max_key = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                max_key = entry.getKey();
            }
        }
        if (max_key > 0) {
            return max_key;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_8_fdc75040_5df2_428f_ac6b_89011b0bca28(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_14_4f38e83c_b0b7_4c11_838c_829841c4d527(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i > max && Collections.frequency(lst, i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_11_e2a3bad5_006d_4fd7_a3b3_92c8170913d4(ArrayList<Integer> lst) {
        return lst.stream()
                .max(Comparator.comparingInteger(item -> item.intValue()))
                .orElse(-1);
    }

    
    public static int search_Problem_6_ef842b3a_f167_4794_82b5_d496c2cf41be(ArrayList<Integer> lst) {
        Set<Integer> intSet = lst.stream().map(Number::intValue).collect(Collectors.toSet());
        Integer greatest = Integer.MIN_VALUE;
        Integer highestFreq = Integer.MIN_VALUE;
        for (Integer i : intSet) {
            if (highestFreq < i && i > 0) {
                highestFreq = i;
                greatest = i;
            }
        }
        return greatest == Integer.MIN_VALUE ? -1 : greatest;
    }

    
    public static int search_Problem_15_8ba8e236_8895_4c97_90a7_112bad88532e(ArrayList<Integer> lst) {
        int maxFreq = 0;
        int maxVal = 0;

        List<Integer> list = lst.stream().distinct().sorted(Comparator.reverseOrder()).collect(Collectors.toList());
        Collections.sort(list);

        for (int i : list) {
            int freq = list.stream().filter(j -> j == i).count();
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = i;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_14_3e8d7fd4_2d6c_4aa4_a19d_95b9799e186a(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        int maxFreq = -1;
        for (Integer l : freq.keySet()) {
            if (freq.get(l) > maxFreq) {
                max = l;
                maxFreq = freq.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_9_0a9b58e4_3cd2_4206_bb8b_54de8dfe78fb(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().filter(e -> e.getValue() > e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_24_e97844f4_ea8c_48db_879b_8ec179f2d772(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_22_2e93e5a3_1734_4ad7_b875_ea461684de26(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (int num : lst) {
            map.put(num, map.getOrDefault(num, 0L) + 1);
        }
        for (int key : map.keySet()) {
            if (map.get(key) >= key) {
                return key;
            }
        }
        return -1;
    }

    
    public static int search_Problem_14_8f21bf7b_9b46_41fb_b46e_a848b496d777(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_9_fe4c43d2_bf90_483d_a3d7_ced4bd7a4cf5(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_2f2c4628_7c24_4ec4_b67a_72286aac61e9(ArrayList<Integer> lst) {

        // Your code here
        int max = 0;
        int maxFreq = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
            if (map.get(i) > maxFreq) {
                max = i;
                maxFreq = map.get(i);
            }
        }
        return maxFreq > max ? max : -1;
    }

    
    public static int search_Problem_13_c35640fa_aa3f_48d6_a057_91adab4104c2(ArrayList<Integer> lst) {

        if (lst.size() == 0) return -1;
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (int i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxKey = i;
            }
        }
        return maxKey;
    }

    
    public static int search_Problem_15_7a46ab70_b76d_4341_ae65_848a6fb042f7(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_13_7f72f684_8d04_4768_909c_3e6d6b1c0c54(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i = lst.size(); i > 0; i--) {
            if (map.containsKey(i) && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_12_11507560_26e7_4dae_9648_155379cbc2da(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l,  1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_14_ab154e07_a3f7_48f9_8248_adddb4b64591(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int i : lst) {
            int freq = Collections.frequency(lst, i);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_5_5540641d_49d2_421e_a2d7_3c729b4f62e6(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        } else {
            return maxKey;
        }
    }

    
    public static int search_Problem_22_d149f240_5861_48fa_a65e_b9ccaebdb446(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        int currFreq = 0;
        int curr = 0;
        for (int i = 0; i < lst.size(); i++) {
            curr = lst.get(i);
            currFreq = 0;
            for (int j = 0; j < lst.size(); j++) {
                if (lst.get(j) == curr) {
                    currFreq++;
                }
            }
            if (currFreq > maxFreq) {
                max = curr;
                maxFreq = currFreq;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_9_8e974f0a_5108_475a_986b_f79ec7b11b17(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_8410dcc2_28c2_4cb0_83bb_56fa2e6e05ac(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq == -1 || maxFreq < i) {
                maxFreq = i;
                maxVal = i;
            } else if (maxFreq == i) {
                maxFreq++;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_17_f18ac1ad_c574_408f_9c00_ff41a8dc9eb2(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_18_edbc8149_405c_4540_8114_81429cb34261(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_18_f5009f9f_8ec1_41f2_89eb_d2baebc6b0ec(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i = max; i > 0; i--) {
            int count = 0;
            for (int j : lst) {
                if (j == i) {
                    count++;
                }
            }
            if (count >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_2_83c421ce_c0fe_4273_870a_8a50aff0a4e9(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i) {
                maxFreq = i;
                maxVal = i;
            } else if (maxFreq == i) {
                maxVal = Math.max(maxVal, i);
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_7_45c9e6c5_98c9_437c_8d64_afcd4802d532(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_1_12081ec7_ea74_4416_99d9_20288b05a825(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_0_a50b6e25_daca_408c_8f17_6aded972325e(ArrayList<Integer> lst) {
        int maxCount = 0;
        for (int num : lst) {
            if (num == 0 || num < 0) {
                return -1;
            }
            int count = lst.stream().filter(i -> i==num).count();
            if (count >= maxCount) {
                return maxCount;
            }
            maxCount = count;
        }
        return -1;
    }

    
    public static int search_Problem_22_d89a4c21_e28d_4b3b_a7bd_8535543f2662(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_18_8de11e55_78e5_4199_93fc_479b27540c42(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > max) {
                max = lst.get(i);
                maxFreq = 1;
            } else if (lst.get(i) == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_24_b9a7d3ef_2020_4195_b92f_e7b44b558144(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (i > max) {
                max = i;
                freq = freq - 1;
            }
        }
        return freq > 0 ? max : -1;

    }

    
    public static int search_Problem_20_33109515_e93c_4c5d_b0a1_c3a2dbf94bbb(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_4_db082a8c_19ad_4f49_8b59_53e53a8f2ce6(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_22_5dbf939e_7873_48a0_aaa7_512febd4d1a2(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_11_5a794d4e_e7c1_41c2_a2fe_d2d8815e672a(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_13_7d9b84d8_269f_4435_adfa_3dcded6bebc7(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            if (freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_24_7fe02556_39eb_4dc9_963d_b2775886e7df(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_11_6b07e4a2_4607_4734_9d2d_8ca8e151a7b4(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        int max_key = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                max_key = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        }
        return max_key;
    }

    
    public static int search_Problem_15_0913d8fe_29db_4211_9276_d165f367912f(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_1_95bf6511_83b7_486d_b00b_452e2fa92b2f(ArrayList<Integer> lst) {

        // Your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        for (Integer l : lst) {
            if (map.get(l) > l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_2_acafe13a_fba9_476e_be33_4e939418f3d4(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_dd54eb56_bc22_4c0b_b012_1ab055bd0648(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().filter(e -> e.getKey() > 0 && e.getValue() >= e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_23_8545fe00_41f8_4560_840f_e2742e79c4ad(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        if (max == -1) {
            return -1;
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_14_06b59eaf_f7d5_475a_b612_76509db662f1(ArrayList<Integer> lst) {
        // Create an array to hold frequencies of each integer
        int[] freq = new int[ lst.size()];
        int count = 0;

        // Iterate through each element in array and find frequency and increment by 1
        for (int l : lst) {
            freq[ l] = ++count;
        }

        // Now iterate through frequency array and find greatest frequency
        int result = Integer.MIN_VALUE;
        for (int i = 0; i < freq.length; i++) {
            if (freq[i] > result) {
                result = freq[i];
            }
        }
        return result < 0 ? -1 : result;
    }

    
    public static int search_Problem_19_b4c8435f_5714_4241_a2ba_bd2165fd6839(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_0_0b3f9131_7548_4898_b0d8_40b106853377(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        Integer max = -1;
        Integer maxFreq = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxFreq) {
                max = l;
                maxFreq = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_19_488b0124_4149_46f8_8642_e7fa7dc3b559(ArrayList<Integer> lst) {

        // Write your code here.
        // return -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxCount) {
                max = l;
                maxCount = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_10_d8cccfd3_5302_4d97_ad7e_2ed482e6875c(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for(int i : lst) {
            freq = Collections.frequency(lst, i);
            if(freq >= 0) {
                if(freq > max) {
                    max = freq;
                }
            }
        }
        return max;

    }

    
    public static int search_Problem_17_0bd0e132_c8bc_47ea_89f4_39a6754afc1b(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_3_678772f7_416e_446b_a653_8df0f365ead5(ArrayList<Integer> lst) {

        int max = 0;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_4_cea1a008_461d_4c1c_8dc8_ed931aeec6cc(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_a998ee89_8e9a_428d_ba35_3d2ad868b4c0(ArrayList<Integer> lst) {

        int max = -1;
        int maxCount = -1;
        for (int i = 1; i < 1000000000; i++) {
            int count = 0;
            for (Integer l : lst) {
                if (l == i) {
                    count++;
                }
            }
            if (count >= i && maxCount < count) {
                max = i;
                maxCount = count;
            }
        }
        if (maxCount >= 1) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_14_c29a7117_7350_4774_9b46_8e0e6717ff86(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq++;
            if(freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_17_a4106e4c_1ff9_4565_9df9_49d9dd86c455(ArrayList<Integer> lst) {
        int freq = 0;
        ArrayList<Integer> newArr = new ArrayList<>();
        for (Integer i : lst) {
            if (i > 0) freq++;
            newArr.add(i);
        }
        if (freq == 0)
            return -1;
        else
            return newArr.get(newArr.size() - 1);
    }

    
    public static int search_Problem_23_f5e589b2_23ca_4442_8c4c_21c044b95708(ArrayList<Integer> lst) {
        Map<Integer, Integer> frequency = new HashMap<>();
        for( int val : lst ){
            if( !frequency.containsKey(val) ){
                frequency.put(val, 0);
            }
            frequency.put(val, frequency.get(val) + 1);
        }
        for( int val : frequency.keySet() ){
            if( frequency.get(val) >= val ){
                return val;
            }
        }
        return -1;
    }

    
    public static int search_Problem_9_c00bf205_c730_4556_be5e_358334b6a1fb(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxCount) {
                max = l;
                maxCount = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_12_2c29fe97_cbe4_48a8_be3e_65d44dd2f558(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_20ad7ae4_679a_4195_85ed_7a85a89f1389(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        if (max == -1) {
            return -1;
        }
        int freq = 0;
        for (int i : lst) {
            if (i == max) {
                freq++;
            }
        }
        if (freq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_13_4ceaf7a9_4bfc_4add_b4f0_c0f6b3abf303(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_21_c3091029_2dcd_49ad_8abb_f09d8a969ded(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
            if (map.get(i) > i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_6a3602a7_4941_45c1_9a98_5470b62d8b77(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq++;
            if(freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_19_dddd1869_c12a_4d3f_8dc9_4fc84742ce5d(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        Integer max = freq.entrySet().stream().max((a, b) -> a.getValue().compareTo(b.getValue())).get().getKey();
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_13_438549b7_92be_43b1_abd7_13aa5470ec3b(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_18_68dae0e5_fd37_446e_a42c_ee625b2062c5(ArrayList<Integer> lst) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1L);
            }
        }
        int max = -1;
        for (Integer i : map.keySet()) {
            if (i <= map.get(i) && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_32bd9d50_1c6b_4de8_a2fc_bb2c31925c2e(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_6c88fbf8_e889_476c_888f_cf6605d17058(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_10_dc7acd40_8182_4bc2_9ca8_d6779a0ee2bf(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_18_bca22f92_9217_4891_8acd_25733f5dc8df(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_9_93e505ab_763c_4367_b7e8_4971673ba635(ArrayList<Integer> lst) {
        int max = lst.stream().filter(e -> e > 0).max(Integer::compareTo).get();
        int maxCount = 0;
        for (int e : lst) {
            if (e > 0 && e > max) max = e;
            ++maxCount;
        }
        return max > 0 ? max : -1;
    }

    
    public static int search_Problem_6_7677010a_9bbf_4bf3_b5ad_53cfec0b8420(ArrayList<Integer> lst) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1L);
            }
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (i <= map.get(i) && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_a003edd3_51c6_44a9_b2ce_4dee2c07da85(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = lst.stream().filter(v -> v == val).count();
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_15_5a588fa0_a8cc_425d_9a2b_f68a732aac65(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (int l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int max_count = 0;
        for (int l : map.keySet()) {
            if (map.get(l) > max_count) {
                max = l;
                max_count = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_20_db03fc5f_cfd1_448d_91aa_d15a80adf926(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        int currFreq = -1;
        for (int val : lst) {
            currFreq = Collections.frequency(lst, val);
            if (currFreq > maxFreq) {
                maxFreq = currFreq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_9_f78e9cff_1384_45f7_9006_413da86fb11a(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        int curFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                curFreq++;
            }
        }
        if (curFreq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_24_0a9b58e4_3cd2_4206_bb8b_54de8dfe78fb(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().filter(e -> e.getValue() > e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_0_32c4f775_3304_4c3c_8e8e_62c7ff8a9228(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : lst) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_12_bc30360c_86db_46c9_a359_60c5b7cecb92(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            if (freq < i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_1_244060d3_5b78_4d86_8687_f275f392833c(ArrayList<Integer> lst) {
        if (lst.isEmpty()) return -1; // no such value
        int maxVal = -1;
        int curVal = lst.get(0);
        int maxCount = 0;
        for (int i = 1; i < lst.size(); i++) {
            curVal = lst.get(i);
            if (curVal == -1) return -1; // no such value
            int cnt = lst.get(i).intValue();
            if (cnt > maxCount) {
                maxVal = curVal;
                maxCount = cnt;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_17_88912f6e_0791_44e6_a710_88218b3f3050(ArrayList<Integer> lst) {
        // Your code here
        return -1;
    }

    
    public static int search_Problem_0_459fe921_e172_41b8_8416_3429e9220c4c(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_a569d824_7d7b_4532_bd11_1d608635859d(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max && Collections.frequency(lst, i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_1065bc23_c245_45ed_a26d_291be51180b1(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_17_f56c86b4_0e85_4370_93bf_f52786f6c000(ArrayList<Integer> lst) {

        int max = -1;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_12_914fe20c_ba0b_47b6_a58a_c3e4a336b306(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for(Integer i : lst) {
            if(map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for(Integer i : map.keySet()) {
            if(map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_13_ad571352_2353_415a_9c1f_511eea418187(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (int i : lst) {
            freq.put(i, freq.getOrDefault(i, 0) + 1);
        }
        int max = 0;
        int max_key = 0;
        for (Map.Entry<Integer, Integer> entry : freq.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                max_key = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        }
        return max_key;
    }

    
    public static int search_Problem_18_bec517b7_0f1b_498f_91fd_721a94703e8b(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == -1) {
            return -1;
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) == max) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_10_5d9995f5_d56e_44bb_b5bd_15cc057242b3(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_0d1e3d84_ba61_4d97_b7c0_0d624f7081db(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_2_9a161387_41dd_41fd_b585_2a4a8861a587(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        for(Integer l : lst){
            if(l > max){
                max = l;
            }
        }
        if(max == -1){
            return -1;
        }
        int count = 0;
        for(Integer l : lst){
            if(l == max){
                count++;
            }
        }
        if(count >= 2){
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_19_71964a8a_e9f4_4e7c_bdd2_0e9d980a0f0f(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int maxCount = 0;
        for (int i : lst) {
            if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_10_28d29544_8b48_47a1_9f43_4f02540f0280(ArrayList<Integer> lst) {
        int max = -1;
        int freq = 0;
        for (Integer i : lst) {
            freq += i;
            if (freq > max) {
                max = freq;
            }
        }
        return max;

    }

    
    public static int search_Problem_23_2f589fc6_ffd4_482f_9f55_63630e529816(ArrayList<Integer> lst) {
        int max = -1;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (freq > max) {
                max = freq;
            }
            if (freq == i) {
                freq++;
            }
        }
        return max;

    }

    
    public static int search_Problem_11_d16891fd_191b_4424_87c8_549fbb96d74b(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_3_0f0cdf63_305a_40ae_90bb_6f726f76631b(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        int max = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > max) {
                max = lst.get(i);
            }
        }
        if (max == 0) {
            return -1;
        }
        int count = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) == max) {
                count++;
            }
        }
        if (count == 1) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_13_6f0f7490_0928_4f6a_a70e_b21ecf33d90e(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_14_b14887cd_3c83_4345_8b49_46a294d0bc5a(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
            if (count > maxCount) {
                maxCount = count;
            }
        }
        if (maxCount >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_13_4de34714_b2e9_454c_b0a5_511556d4ecf3(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i) {
                maxFreq = i;
                maxVal = i;
            } else if (maxFreq == i) {
                maxVal = Math.max(maxVal, i);
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_7_23c11b38_721e_4ceb_88c0_448d8c1ece27(ArrayList<Integer> lst) {

        // Write your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int l : lst) {
            if(map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for(int l : map.keySet()) {
            if(l > max && map.get(l) >= l) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_3_cdbbb7b6_ea55_4a24_b36a_7a7bf9f6f666(ArrayList<Integer> lst) {

        int max = 0;
        int max_count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                max_count = 1;
            } else if (i == max) {
                max_count++;
            }
        }
        for (int i : lst) {
            if (i > 0 && i <= max && i >= max_count) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_24_eba1562f_72e8_4738_b536_6779cef536c8(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_18bcda2e_2d7c_4d1b_9f10_0692e9aa33b7(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : lst) {
            if (l > 0 && map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_7_443c4e41_1bdd_41ce_85de_619ea96542f6(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_fe8e4fb4_cdfe_416d_beb9_7eb02b674dc3(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_7f72f684_8d04_4768_909c_3e6d6b1c0c54(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i = lst.size(); i > 0; i--) {
            if (map.containsKey(i) && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_3_bf15a6c4_ccb7_413f_a501_795ecf5456d2(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_3_b2b1bb5c_bf69_482f_a80b_8181c34c8f78(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_24_02da4b23_c23e_4dd3_944d_f0b9de1786f4(ArrayList<Integer> lst) {
        ArrayList<Integer> freq = new ArrayList<>();
        int maxFreq = -1;
        int maxVal = -1;
        for (int val : lst) {
            if (freq.stream().filter(f -> f == val).count() == 0) {
                freq.add(val);
                if (val > maxVal) {
                    maxFreq = maxVal;
                    maxVal = val;
                } else if (val == maxVal) {
                    maxFreq = val;
                }
            }
        }
        return maxFreq == -1 ? -1 : maxVal;
    }

    
    public static int search_Problem_14_b8c50d22_2592_4be7_8c73_74bce7841355(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_18_0a29c9ad_95a7_44f3_9da7_c0111180682e(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer num : lst) {
            if (map.containsKey(num)) {
                map.put(num, map.get(num) + 1);
            } else {
                map.put(num, 1);
            }
        }
        int max = -1;
        int max_num = -1;
        for (Integer num : map.keySet()) {
            if (map.get(num) > max) {
                max = map.get(num);
                max_num = num;
            }
        }
        if (max == -1) {
            return -1;
        }
        return max_num;
    }

    
    public static int search_Problem_8_c57aaf0c_ba4c_4d8f_97e4_4d066206b275(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1L);
            }
        }
        Integer max = -1L;
        for (Integer l : map.keySet()) {
            if (l > 0 && map.get(l) >= l) {
                max = l;
                break;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_986759fb_82e4_41fd_9935_119147e4310b(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_f0edbe6d_3455_470f_b3c1_de4f91b94e73(ArrayList<Integer> lst) {
        int max = 0;
        int maxFreq = -1;
        for(int i : lst) {
            if(i>0) {
                int freq = Collections.frequency(lst, i);
                if(freq>maxFreq) {
                    max = i;
                    maxFreq = freq;
                }
            }
        }
        return max;

    }

    
    public static int search_Problem_6_5f3e9c8d_974f_4ced_8c7a_7d862358da27(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_1_f5009f9f_8ec1_41f2_89eb_d2baebc6b0ec(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i = max; i > 0; i--) {
            int count = 0;
            for (int j : lst) {
                if (j == i) {
                    count++;
                }
            }
            if (count >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_11_e7528919_2003_4faa_a52b_6553cd7b2634(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > maxFreq) {
                max = i;
                maxFreq = freq;
            }
        }
        if (maxFreq < max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_22_2ff1c5cb_53fa_418a_9d36_0392ef6a6cae(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            int freq = lst.stream().filter(j -> j == i).count();
            if (freq >= maxFreq) {
                max = i;
                maxFreq = freq;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_82303970_a201_46e1_80c9_bdd05ff9cc1b(ArrayList<Integer> lst) {
        Map<Integer, Integer> m = new HashMap<>();
        for(Integer l : lst) {
            Integer i = m.get(l);
            if(i == null) {
                m.put(l, 1);
            } else {
                m.put(l, i+1);
            }
        }
        int max = 0;
        for(Integer l : m.keySet()) {
            if(m.get(l) > max) {
                max = m.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_21_4de34714_b2e9_454c_b0a5_511556d4ecf3(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i) {
                maxFreq = i;
                maxVal = i;
            } else if (maxFreq == i) {
                maxVal = Math.max(maxVal, i);
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_17_9c3d4dde_dace_4863_bd5c_41466eefaead(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_3_c27b58dc_18ab_4bb5_86d7_119a78520ce9(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_4_4254be1d_6589_40e3_a9a0_1772474cb79a(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_6980c9eb_a4a2_41e0_a8e5_fa8a456f01d3(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_24_5d00a8bb_74e5_4fe9_9ce3_3e7f1b05d25c(ArrayList<Integer> lst) {
        ArrayList<Integer> ints = new ArrayList<>();
        for(Integer x : lst) {
            if(ints.contains(x)) {
                ints.set(ints.indexOf(x), x + 1);
            } else {
                ints.add(x);
            }
        }
        int max = Integer.MIN_VALUE;
        for(int i = 0; i <= ints.size(); i++) {
            for(int j = i+1; j <= ints.size(); j++) {
                if((ints.get(i) + ints.get(j)) > max) {
                    max = ints.get(i) + ints.get(j);
                }
            }
        }
        return max;
    }

    
    public static int search_Problem_10_9bfec60d_13a4_4098_b41b_2d2517b28eda(ArrayList<Integer> lst) {

        // your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : lst) {
            if (map.get(i) > i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_14_ec3d4a0e_aa24_4def_98f0_eca5f20864aa(ArrayList<Integer> lst) {

        int[] arr = lst.stream().mapToInteger(Integer::intValue).toArray();
        Arrays.sort(arr);
        for (int i = arr.length - 1; i >= 0; i--) {
            if (arr[i] > 0 && arr[i] <= arr.length - i) {
                return arr[i];
            }
        }
        return -1;
    }

    
    public static int search_Problem_3_8524091b_f699_4449_b40a_36bb4d5c8dd7(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int max_index = -1;
        for(int i = 0; i < lst.size(); i++) {
            if(lst.get(i) > max) {
                max = lst.get(i);
                max_index = i;
            }
        }
        if(max == 0) {
            return -1;
        }
        int count = 0;
        for(int i = 0; i < lst.size(); i++) {
            if(lst.get(i) == max) {
                count++;
            }
        }
        if(count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_9_6ac158d9_6375_46e5_965a_040a21d26cec(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparingInteger(x -> x)).get();
    }

    
    public static int search_Problem_24_2752fbb0_4e01_4dfd_8201_2909f9da3e11(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_4ceaf7a9_4bfc_4add_b4f0_c0f6b3abf303(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_18_b2b1bb5c_bf69_482f_a80b_8181c34c8f78(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_0de85f8b_acfd_4c00_b2d4_f77363c0777f(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_18_2ff1c5cb_53fa_418a_9d36_0392ef6a6cae(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            int freq = lst.stream().filter(j -> j == i).count();
            if (freq >= maxFreq) {
                max = i;
                maxFreq = freq;
            }
        }
        return max;
    }

    
    public static int search_Problem_24_7aeb0d9c_ace9_42c1_b172_f9328170aa2e(ArrayList<Integer> lst) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1L);
            }
        }
        int max = -1;
        for (Integer i : map.keySet()) {
            if (i <= map.get(i) && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_8eca8166_4da2_4870_a3fb_d0ebcb04232f(ArrayList<Integer> lst) {
        Map<Integer, Integer> map = new TreeMap<>();
        for (Integer i : lst) {
            map.put(i, map.getOrDefault(i, 0L) + 1);
        }
        int greatest = Integer.MIN_VALUE;
        int currMaxFreq = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (currMaxFreq < entry.getValue()) {
                currMaxFreq = entry.getValue();
                greatest = entry.getKey();
            }
        }
        return greatest;
    }

    
    public static int search_Problem_17_262273fd_c4df_45c9_b386_3c421d4cc978(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        int max = 0;
        int count = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > max) {
                max = lst.get(i);
                count = 1;
            } else if (lst.get(i) == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_6_770cf412_3586_4284_84d2_7f9b77ace601(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxFreq = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxFreq) {
                max = l;
                maxFreq = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_2_c3b13b72_a153_49c4_b23f_d7effdd8c367(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_9_3473c74f_3484_4b8b_a0b6_2e82f068dbd0(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxCount) {
                max = l;
                maxCount = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_10_8545fe00_41f8_4560_840f_e2742e79c4ad(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        if (max == -1) {
            return -1;
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_10_a9ef5082_811e_487b_92b3_609f5cead847(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_f06e3308_90d0_40c3_b4a5_0197f2d925f9(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_23_c6dfa2f1_16ad_4bb5_807d_392cae09cec7(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        int maxVal = 0;
        for (Integer i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxVal = i;
            }
        }
        if (maxVal > 0) {
            return maxVal;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_14_6322ca9f_e758_4f31_94fd_59ebf71029e4(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for(int i : lst) {
            if(i > max) {
                max = i;
                maxFreq = 1;
            } else if(i == max) {
                maxFreq++;
            }
        }
        if(maxFreq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_1_6ac158d9_6375_46e5_965a_040a21d26cec(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparingInteger(x -> x)).get();
    }

    
    public static int search_Problem_5_d74d9d4c_bc0f_41f9_9439_b2fc86955ad1(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_8_31e15d8b_2418_4c5b_a9b8_ceb4eccb8bda(ArrayList<Integer> lst) {
        if (lst.isEmpty()) return -1;
        int m = Collections.max(lst);
        int f = Collections.frequency(lst, m);
        return f >= m ? m : -1;
    }

    
    public static int search_Problem_11_d0653b8e_478d_40cd_a973_21d0d41cd72b(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int maxCount = 0;
        for(int i : lst) {
            if(i > max) {
                max = i;
                maxCount = 1;
            } else if(i == max) {
                maxCount++;
            }
        }
        if(maxCount >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_14_c3091029_2dcd_49ad_8abb_f09d8a969ded(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
            if (map.get(i) > i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_287de844_87df_4d51_abaa_2c57adec9425(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq < i) {
                maxFreq = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_22_6e31d389_16dc_4ce6_8ca2_98ac556db54c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_18_c9f1bfb7_fd9b_4c43_adee_2f50604edb3c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                if (maxFreq < val) maxFreq = val;
                if (maxVal < val) maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_9_97323af0_3fd8_4681_a2fd_6d6312b39d0a(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_12_5f6bd213_59a5_4749_8a30_0e5828089cf1(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                max = Math.max(max, entry.getKey());
            }
        }
        return max;
    }

    
    public static int search_Problem_6_496aa325_e913_485d_af8c_d6fe3b24c3b8(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > maxFreq) {
                maxFreq = freq;
                max = i;
            }
        }
        if (maxFreq < max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_4_a7e4be8e_87a3_427a_91b0_d5c547a82c36(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_4ca050f1_5ae0_4732_a5e3_1a14ae559b28(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_fe537a25_4100_42ce_91a4_149b1117b720(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_6dd02712_1872_4466_bfb8_cb7117c1bf59(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1L);
            }
        }
        Integer max = -1L;
        for (Integer l : map.keySet()) {
            if (l > 0 && map.get(l) >= l) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_bea02bc5_45e1_487c_be6d_7ec8512ed43f(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l,  1);
            }
        }
        int max = -1;
        int maxKey = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        return maxKey;
    }

    
    public static int search_Problem_3_6a7b7f7d_bf12_46e2_8754_8fb7219f8216(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = lst.stream().filter(x -> x == val).count();
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_10_36c780b1_f15c_4cbd_9600_95a55bd48700(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq++;
            if(freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_9_94c5cfcf_ba1a_41ca_a2e7_b25e7d69d5d4(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxCount) {
                max = entry.getKey();
                maxCount = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_11_8c8f3e4a_373c_4cbf_9b74_69d6b008bbb6(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_24_d640f288_1b3e_4d66_a7b2_62d7422e430f(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        Integer max = freq.keySet().stream().max(Comparator.comparing(freq::get)).get();
        if (freq.get(max) >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_12_fa40bb23_2f84_492f_989a_1dbd14ed45a2(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_20_5809281c_5d91_4c87_87ab_d522ba103fdd(ArrayList<Integer> lst) {

        int max = 0;
        int freq = 0;
        int freqMax = 0;
        for (Integer x : lst) {
            if (x > max) {
                freqMax = freq;
                max = x;
            }
            freq++;
        }
        if (freqMax >= freq) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_18_efcf3711_4144_4d55_be5b_c59cef68a378(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (int l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        for (int l : lst) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_16_e1a89f95_04eb_442d_bdb2_57d7a270efe3(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxCount = 1;
            } else if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_13_bcf7fec0_d3a1_4cd8_91b0_9a71b3784aa2(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1) {
                freq = i;
                max = i;
            } else if (freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_18_162f887c_88b0_4c32_84a5_fba020d0563e(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_5_9ab888f3_d807_4efc_a185_ba39091716b6(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_12_4881aa52_4483_49a4_8902_4e1b403db02c(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer num : lst) {
            map.put(num, map.getOrDefault(num, 0L) + 1);
        }
        for (int i = lst.size(); i > 0; i--) {
            if (map.getOrDefault(i, 0L) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_23_dab9a6fb_f59b_4bdc_9e57_d09da6935045(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_08a1799a_7d1f_4f68_ae6a_ed16228c525f(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int i : lst) {
            if(i == 0) {
                continue;
            }
            int freq = Collections.frequency(lst, i);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_0_9d03e8a4_26b9_4bd5_8774_1bff547dc5ab(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = lst.stream().filter(i -> i == val).count();
                if(freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_6_a1cf6b7c_9fbb_4409_9039_60f09919eb1f(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_8_fe8e4fb4_cdfe_416d_beb9_7eb02b674dc3(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_c94db12a_23e1_4ddd_b6bd_ae2a0fe2db14(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxCount = 0;
        for (int val : lst) {
            int count = Collections.frequency(lst, val);
            if (count > maxCount) {
                maxCount = count;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_8_2c29fe97_cbe4_48a8_be3e_65d44dd2f558(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_33039bb6_d7a0_4504_a080_5900bcfb3092(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_12_354b07bf_12aa_4fe6_b70a_7bb630692b78(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_6_9b835a56_29f7_47ad_84b4_913706bf910f(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1 || freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_f663888b_49c0_4cc0_bada_097ac0b02fb0(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        for(int i : lst){
            if(i > max && Collections.frequency(lst, i) >= i)
                max = i;
        }
        return max;
    }

    
    public static int search_Problem_0_bec517b7_0f1b_498f_91fd_721a94703e8b(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == -1) {
            return -1;
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) == max) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_22_320ffce6_5d20_45fd_bbae_ee57bc5b4d22(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq == i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq < i && maxVal == i) {
                maxFreq = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_0_86003b35_a828_40c9_9b43_f002930366af(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_80e3429c_b409_45a0_90a7_5d40bdfee02e(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                return entry.getKey();
            }
        }
        return -1;
    }

    
    public static int search_Problem_18_f610483e_c8ff_481c_9f08_743fd1014af1(ArrayList<Integer> lst) {
        if (lst.size() < 1) return -1;
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            Integer prev = map.putIfAbsent(i, 0L);
            if (prev != null && prev > 0) map.put(i, map.get(prev) + 1);
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) > 0 && map.get(i) == lst.get(lst.indexOf(i))) return i;
        }
        return -1;
    }

    
    public static int search_Problem_4_73361bd0_0385_456d_bfc6_c35cd881f987(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq += i;
            if (freq > max) {
                max = freq;
            }
        }
        return max > 0 ? max : -1;
    }

    
    public static int search_Problem_11_5405a6e4_6a1c_46ce_ae22_7144ca5253f5(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            }
            if (maxFreq == i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_0_7a30a30e_2ae1_4a0c_988e_e619999aacef(ArrayList<Integer> lst) {

        // Write your code here.
        // Sort the list in descending order
        // Iterate through the list
        // If the current element is greater than 0 and has a frequency greater than or equal to the value of the 
        // element itself, return the element
        // Else return -1
        Collections.sort(lst, Collections.reverseOrder());
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > 0 && lst.indexOf(lst.get(i)) >= lst.lastIndexOf(lst.get(i))) {
                return lst.get(i);
            }
        }
        return -1;
    }

    
    public static int search_Problem_5_102171b8_7a4b_4a85_902b_614380e7fe76(ArrayList<Integer> lst) {
        ArrayList<Integer> unique = new ArrayList<>();
        unique.addAll(lst);

        Collections.sort(unique);

        int maxVal = unique.get(0);

        for (int x : unique) {
            if (x > maxVal) {
                maxVal = x;
            }
        }

        int freq = unique.size();

        for (int i = 0; i < unique.size(); i++) {
            if (freq < unique.get(i)) {
                return -1;
            }
        }

        return maxVal;
    }

    
    public static int search_Problem_22_e6c03dbd_5698_4564_8f1b_1da318148a1f(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_0ec461a1_7b9d_411f_be7c_fbb811407705(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        int freq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                freq = 1;
            } else if (i == max) {
                freq++;
            }
            if (freq > max_freq) {
                max_freq = freq;
            }
        }
        if (max_freq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_1_e6c03dbd_5698_4564_8f1b_1da318148a1f(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_c9486a52_9e68_4135_bb76_3717b0ee0ea1(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (int l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                max = entry.getKey();
            }
        }
        return max;
    }

    
    public static int search_Problem_3_78ad8ef9_2073_4f95_9a1d_301eb4cc3cc9(ArrayList<Integer> lst) {

        // Write your code here.
        // return -1;
        // return lst.stream().max(Comparator.comparing(x -> x)).get();
        // return lst.stream().max(Comparator.comparing(x -> x, Comparator.reverseOrder())).get();
        // return lst.stream().max(Comparator.comparing(x -> x, Comparator.reverseOrder())).orElse(-1);
        // return lst.stream().max(Comparator.comparing(x -> x, Comparator.reverseOrder())).orElseGet(() -> -1);
        return lst.stream().max(Comparator.comparing(x -> x, Comparator.reverseOrder())).orElseThrow(() -> new NoSuchElementException("No such element"));
    }

    
    public static int search_Problem_1_1e1ccd09_0bb4_4a8b_8e27_6da269b48c4b(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_22_770cf412_3586_4284_84d2_7f9b77ace601(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxFreq = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxFreq) {
                max = l;
                maxFreq = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_13_e2d66cb1_f756_4277_aa82_10aa4a3e1ac7(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq >= maxFreq) {
                maxFreq = freq;
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_12_1452dd64_329f_4746_a7e8_a5b0bbe8a57d(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq >= maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_12_70ea03bb_f448_4bbe_a458_aac319e2ff4d(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > maxFreq) {
                max = i;
                maxFreq = freq;
            }
        }
        return maxFreq >= max ? max : -1;
    }

    
    public static int search_Problem_7_16fef4e7_fb74_4448_8b50_e6600a3a6a23(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxCount) {
                max = l;
                maxCount = map.get(l);
            }
        }
        if (maxCount == 1) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_14_d7c25666_a9d7_4e5c_b3fc_a87374cc145c(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_945f3410_f482_44f2_a612_eaf3c7123a66(ArrayList<Integer> lst) {
        int maxVal = lst.get(0);
        int maxFreq = lst.get(0);
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                maxFreq = val;
            } else if (val == maxVal) {
                maxFreq++;
            }
        }
        return maxFreq > lst.size() ? -1 : maxVal;

    }

    
    public static int search_Problem_6_c8fdcf0a_47af_4343_80f6_8efee4357270(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        int maxKey = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                maxKey = l;
            }
        }
        return maxKey;
    }

    
    public static int search_Problem_9_1bdc2693_ab39_48e9_8c4c_af49d12409ed(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (int i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxKey = i;
            }
        }
        if (maxKey > 0) {
            return maxKey;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_22_9a226586_8b69_4e7c_a963_61a23b0f6092(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxCount) {
                maxCount = map.get(l);
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_3268efba_ccfb_4f05_9679_4b71550a9b52(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            if (freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_23_8843c699_e0a0_4f37_b1d7_8587354b93f3(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        int max = 0;
        int count = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > max) {
                max = lst.get(i);
                count = 1;
            } else if (lst.get(i) == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_2_e6c03dbd_5698_4564_8f1b_1da318148a1f(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_3750061a_b5b3_4f8f_a483_167259b4d890(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > max_freq) {
                max = i;
                max_freq = freq;
            }
        }
        if (max_freq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_1_e212a1f1_f93d_4e56_9b82_0f6694364ea0(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_2ae54e21_ba61_4cc7_8268_91dea604f21d(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int maxCount = 0;
        for (int i : lst) {
            if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_17_ed2334df_ad99_4d61_b70b_484bcc080d85(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            map.put(i, map.getOrDefault(i, 0L) + 1);
        }
        for (int i = lst.size(); i > 0; i--) {
            if (map.getOrDefault(i, 0L) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_21_c9f1bfb7_fd9b_4c43_adee_2f50604edb3c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                if (maxFreq < val) maxFreq = val;
                if (maxVal < val) maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_7_f9d39d75_6da6_4e72_a313_c13caced7d86(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_3e8a3c5d_b761_4e5f_9f95_58f9f48f65a3(ArrayList<Integer> lst) {
        List<Integer> sortedLst = lst.stream().sorted().collect(Collectors.toList());
        
        int first = sortedLst.get(0); // first value
        int max = first;
        int cnt = 0;
        
        for (int i = 0; i < sortedLst.size(); i++) {
            if (sortedLst.get(i) > 0 && sortedLst.get(i) <= max) {
                cnt++;
                max = sortedLst.get(i);
            }
        }
        
        if (cnt >= sortedLst.size() || max <= 0) {
            return -1L;
        }
        
        for (int i = 0; i < sortedLst.size(); i++) {
            if (sortedLst.get(i) > 0 && sortedLst.get(i) == max) {
                return i;
            }
        }
        
        return -1L;
    }

    
    public static int search_Problem_23_8f6da157_fc0d_4a27_a67a_1314b5ed76f0(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq >= maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_12_ba23e33b_d6d3_4016_938d_f8faa6582f93(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (lst.stream().filter(x -> x == i).count() > maxFreq) {
                maxFreq = lst.stream().filter(x -> x == i).count();
                max = i;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_23_867df0da_7ac7_4bea_b0d0_6e9aeebb5728(ArrayList<Integer> lst) {

        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                max = entry.getKey();
            }
        }
        return max;
    }

    
    public static int search_Problem_20_14600785_4c49_4232_acd1_e1e418227e28(ArrayList<Integer> lst) {

        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : freq.keySet()) {
            if (freq.get(l) > max) {
                max = freq.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_6_f66826c0_b307_4895_bd3a_49905d7ef8c9(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_1_dddd1869_c12a_4d3f_8dc9_4fc84742ce5d(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        Integer max = freq.entrySet().stream().max((a, b) -> a.getValue().compareTo(b.getValue())).get().getKey();
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_18_bfccc857_bb15_49fe_b97f_44d9e28aba42(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_12_a580bb2b_de95_48d9_875c_a0615ef1bbe1(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max && Collections.frequency(lst, i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_bca22f92_9217_4891_8acd_25733f5dc8df(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_24_24c5dd80_8386_4ee1_9f6f_454049e7515f(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : freq.keySet()) {
            if (freq.get(l) > max) {
                max = freq.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_18_8d65d1f5_05ea_4fda_947b_7c21602c76a0(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_16_1579013d_1449_480c_b590_98ba4e590b58(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_8857856d_c9b5_4b25_8555_51827fd92012(ArrayList<Integer> lst) {

        // your code here
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        int max = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                max = Math.max(max, entry.getKey());
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_4_f0ae8283_a57e_476d_8bc4_e77a26a8f42c(ArrayList<Integer> lst) {
        int max = lst.get(0), min = lst.get(0);
        for(int i = 1; i < lst.size(); i++){
            int curr = lst.get(i);
            if(curr > max){
                max = curr;
            }else if(curr < min){
                min = curr;
            }
        }
        return (lst.indexOf(min) > lst.indexOf(max)) ? -1 : max;
    }

    
    public static int search_Problem_15_8d65d1f5_05ea_4fda_947b_7c21602c76a0(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_21_ba28d1f2_9c4d_4ca7_ab0c_50b2db24e1b1(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_11_01318d91_4a8b_4637_a117_9e6d2cc4afbd(ArrayList<Integer> lst) {
        HashMap<Integer, Integer> h = new HashMap<Integer, Integer>();
        for (Integer l : lst)
            h.put(l, h.getOrDefault(l, 0L) + 1);
        Integer max = h.get(0);
        for (Integer l : h.keySet())
            if (l > max)
                max = l;
        if (max > 0)
            return max;
        return -1;
    }

    
    public static int search_Problem_0_0a9b58e4_3cd2_4206_bb8b_54de8dfe78fb(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().filter(e -> e.getValue() > e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_4_f2191aa3_912b_4821_ad45_fc6fa9606ba2(ArrayList<Integer> lst) {

        int max = 0;
        for (Integer i : lst) {
            if (i > max) {
                max = i;
            }
        }
        if (max == 0) {
            return -1;
        }
        int count = 0;
        for (Integer i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= 2) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_19_8daa32b0_a742_41c7_8e7e_00da5e9460a3(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_24_867df0da_7ac7_4bea_b0d0_6e9aeebb5728(ArrayList<Integer> lst) {

        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                max = entry.getKey();
            }
        }
        return max;
    }

    
    public static int search_Problem_16_d74d9d4c_bc0f_41f9_9439_b2fc86955ad1(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_1903709f_5399_4830_9bfc_4562468ceeb1(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_69c99530_4186_494c_bf36_cf6353e82cd7(ArrayList<Integer> lst) {

        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
            }
        }
        if (max == -1) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_17_d825d98b_a9b6_4606_ad70_1f35921857d5(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxVal == -1 || maxFreq < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq == i) {
                maxFreq++;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_20_a6f82188_4b0c_4a53_9d8d_b645f1eafb4b(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxCount = 0;
        for(int val : lst) {
            int count = Collections.frequency(lst, val);
            if(count > maxCount) {
                maxCount = count;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_3_096a2d42_eb1e_4e26_9885_4fc1dfe77b01(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        int max = 0;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_8_ad4f6f5f_6e89_41bf_99c5_e90a4758efe1(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l,  1);
            }
        }
        int max = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey() && entry.getKey() > max) {
                max = entry.getKey();
            }
        }
        return max;
    }

    
    public static int search_Problem_17_99b48160_d7e2_45f3_bc3a_38ec2d08b532(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_21_9db8f2ac_f0b9_4ecb_b90b_80fbc36f7e6a(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_11_ce679c69_20bb_4241_9fa1_c26aad235689(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_10_192e4f75_0973_4e99_b0b5_5fae962de673(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i) {
                maxFreq = i;
                maxVal = i;
            } else if (maxFreq == i) {
                maxVal = Math.max(maxVal, i);
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_14_c87d175a_b038_45bd_a52a_c667a2530759(ArrayList<Integer> lst) {

        int max = 0;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_20_35bb5760_a94b_4bb2_b26f_2c01b3e1d760(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (i > max) {
                max = i;
            }
            if (freq > i) {
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_15_b0a511bd_95f5_4265_97a9_b65249a14edd(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int max_count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                max_count = 1;
            } else if (i == max) {
                max_count++;
            }
        }
        if (max_count == 0) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_15_95fe7d72_5b98_4a2d_8a79_885f491b2be5(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_17_7524d6ff_4304_4581_b760_bcb1b7bdb987(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_16_ba5a7a95_4551_4fc6_8b0b_e56ef87753f2(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_22_e87ee65d_2432_4cd6_9fa7_1245a67fd8b2(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_22_24fa5aa5_b2b3_4381_b653_f344fdc9f3f6(ArrayList<Integer> lst) {
        Map<Integer, Integer> map = new TreeMap<>();
        lst.stream().forEach(e -> map.put(new Integer(e), map.getOrDefault(new Integer(e), 0) + 1));
        boolean exists = False;
        for (Integer e : map.keySet()) {
            if (map.get(e) >= map.get(new Integer(e))) {
                exists = True;
                return e;
            }
        }
        if (exists) {
            return -1;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_16_99109fd8_3926_4101_afdf_e5eb40128a46(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                return entry.getKey();
            }
        }
        return -1;
    }

    
    public static int search_Problem_12_d16fe193_2bac_48c5_b013_bdd4c58c3ca2(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_7135436b_b56f_4caa_ab64_f95e389e0db0(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int max_count = 0;
        for (int i = 0; i < lst.size(); i++) {
            int count = 0;
            for (int j = 0; j < lst.size(); j++) {
                if (lst.get(j) == lst.get(i)) {
                    count++;
                }
            }
            if (count > max_count) {
                max = lst.get(i);
                max_count = count;
            }
        }
        if (max_count == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_2_d4e90559_aa80_4ae4_b4b6_aaf779727126(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_12_6c88fbf8_e889_476c_888f_cf6605d17058(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_14_8410dcc2_28c2_4cb0_83bb_56fa2e6e05ac(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq == -1 || maxFreq < i) {
                maxFreq = i;
                maxVal = i;
            } else if (maxFreq == i) {
                maxFreq++;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_3_64bb5a71_f594_4231_b72b_f2acb008abe8(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq++;
            if(freq > max) {
                max = freq;
            }
            if(i == 0) {
                freq--;
            }
        }
        return max;

    }

    
    public static int search_Problem_16_98592086_92ab_4eb6_b017_004c7ca2b63b(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                maxFreq = val;
            } else if (val == maxVal) {
                maxFreq += val;
            }
        }
        return maxFreq;

    }

    
    public static int search_Problem_9_caaac0b7_6203_49ec_84c7_d5fa2370acc9(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_17_c933de4f_f1f8_4ecc_9b81_afacd29ebd32(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_8a510569_dac3_4dbe_8a22_4a0c8d2600c7(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int max_key = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                max_key = entry.getKey();
            }
        }
        if (max_key > 0) {
            return max_key;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_23_366bb190_a667_41ed_8fde_ef13418ad335(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_28084cab_464b_408e_b679_c23d56f0a015(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_d35d357e_3a35_44ca_8a1c_f79e1d106e6d(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_438e5491_ce92_45d3_9d79_14736aab8b56(ArrayList<Integer> lst) {
        int max = -1;
        int freq = 0;
        for (int i : lst) {
            if (freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_b7819f6c_3d35_4f9d_ad6b_f17ca577a127(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            if (freq.containsKey(l)) {
                freq.put(l, freq.get(l) + 1);
            } else {
                freq.put(l, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (Map.Entry<Integer, Integer> entry : freq.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_8_f577e1b9_a3ac_4b9c_b602_b1c97ca515b0(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_18_59f8f807_7899_4efc_a0f0_cf34881d7d55(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        Integer max = 0;
        Integer maxKey = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_22_2a302c69_6936_40c8_a52a_59baf7d5a8ec(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer i : lst) {
            if (i > max) {
                max = i;
            }
            if (lst.stream().filter(j -> j == i).count() > maxFreq) {
                maxFreq = lst.stream().filter(j -> j == i).count();
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_8_91e81e14_9184_427b_b595_8cc448bad5f8(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        Integer max = freq.keySet().stream().max(Comparator.comparing(freq::get)).get();
        if (freq.get(max) >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_21_614bbaac_06cb_4461_a4c8_c881c380bbb9(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            if (freq.containsKey(l)) {
                freq.put(l, freq.get(l) + 1);
            } else {
                freq.put(l, 1);
            }
        }
        int max = -1;
        int maxFreq = -1;
        for (Integer l : freq.keySet()) {
            if (freq.get(l) > maxFreq) {
                max = l;
                maxFreq = freq.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_7_186dd976_2ed1_4bcd_b511_6a16f6d2f00f(ArrayList<Integer> lst) {
        Collections.sort(lst);
        for(int i = 0; i< lst.size(); i++) {
            if((i+1)==lst.size() || lst.get(i+1)<lst.get(i) || lst.get(i)<0) {
                return -1;
            }
        }
        return lst.get(lst.size()-1);
    }

    
    public static int search_Problem_11_a7e4be8e_87a3_427a_91b0_d5c547a82c36(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_134fdf93_a76e_4d33_9346_0091bd6132fa(ArrayList<Integer> lst) {

        // Create a map to store the frequency of each element
        Map<Integer, Integer> freqMap = new HashMap<>();
        for (int num : lst) {
            freqMap.put(num, freqMap.getOrDefault(num, 0L) + 1);
        }
        // Iterate through the map to find the greatest integer that satisfies the condition
        for (int num : freqMap.keySet()) {
            if (freqMap.get(num) >= num) {
                return num;
            }
        }
        // If no such integer exists, return -1
        return -1;
    }

    
    public static int search_Problem_21_a50b6e25_daca_408c_8f17_6aded972325e(ArrayList<Integer> lst) {
        int maxCount = 0;
        for (int num : lst) {
            if (num == 0 || num < 0) {
                return -1;
            }
            int count = lst.stream().filter(i -> i==num).count();
            if (count >= maxCount) {
                return maxCount;
            }
            maxCount = count;
        }
        return -1;
    }

    
    public static int search_Problem_24_c0d50f57_94ca_462d_a296_466600d47992(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxCount = Collections.frequency(lst, i);
            } else if (i == max) {
                maxCount = Math.max(maxCount, Collections.frequency(lst, i));
            }
        }
        return maxCount >= max ? max : -1;
    }

    
    public static int search_Problem_22_f76096c3_88e3_4b7e_a30f_8475a697a2dc(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_17_25876edf_2fe6_43cd_9680_e72e5c1d8599(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq == i) {
                maxFreq++;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_20_c29a7117_7350_4774_9b46_8e0e6717ff86(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq++;
            if(freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_2_15ac33c0_ed98_4bf7_ba18_94155cc5e4a4(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == -1) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_20_488b0124_4149_46f8_8642_e7fa7dc3b559(ArrayList<Integer> lst) {

        // Write your code here.
        // return -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxCount) {
                max = l;
                maxCount = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_20_7119f969_498e_4cfe_8141_17c82fec86e1(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_17_ad571352_2353_415a_9c1f_511eea418187(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (int i : lst) {
            freq.put(i, freq.getOrDefault(i, 0) + 1);
        }
        int max = 0;
        int max_key = 0;
        for (Map.Entry<Integer, Integer> entry : freq.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                max_key = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        }
        return max_key;
    }

    
    public static int search_Problem_20_422e1132_c7ac_4fe5_9b07_0f4373bb5e3c(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (int l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxCount) {
                max = entry.getKey();
                maxCount = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_18_85596af9_9c1a_4750_8eb3_6c8f41564c40(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            }
        }
        return maxFreq;

    }

    
    public static int search_Problem_11_53ff8c35_e836_4e04_a369_bd8fa29213b8(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (int l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().filter(e -> e.getValue() > e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_24_83e8e8b7_41f9_4cc3_9f8a_234b41d88c1c(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_701fb707_adf5_4196_97d9_77400ed6ecc3(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int count = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > max) {
                max = lst.get(i);
                count = 1;
            } else if (lst.get(i) == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_19_0c478b7e_b4f3_4df5_84b5_f30f553e549e(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_bdf3839e_70ad_4dbd_aed8_38ddb4285789(ArrayList<Integer> lst) {
        int max = 0;
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int ele : lst) {
            Integer freq = map.get(ele);
            if (freq != null) {
                if (freq > max) {
                    max = freq;
                }
            } else {
                map.put(ele, new Integer(1));
            }
        }
        if (map.containsKey(0)) {
            map.put(0, new Integer(1));
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
            }
        }
        if (max < 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_0_af6059f2_4fb5_46c1_9566_58544955986b(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_874b6e7e_c5ca_4364_9f07_386e22fb3ead(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (Integer i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxKey = i;
            }
        }
        if (max == 1) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_1_db1968e0_5bdd_449e_898a_f34155a668ce(ArrayList<Integer> lst) {
        int maxVal = -1;
        int freqOfMaxVal = -1;

        for(int i : lst) {
            if(freqOfMaxVal == -1 || freqOfMaxVal >= i) {
                maxVal = i;
                freqOfMaxVal = lst.stream().filter((x) -> x == i).count();
            }
        }

        return maxVal;
    }

    
    public static int search_Problem_4_f37189de_7136_4551_8cb2_958a01e2665e(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_5_ade86f90_b9c2_4b6d_9224_67a74f52122d(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_dd54eb56_bc22_4c0b_b012_1ab055bd0648(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().filter(e -> e.getKey() > 0 && e.getValue() >= e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_1_58ae444a_eb0a_4470_91cc_216135796b77(ArrayList<Integer> lst) {

        if (lst.size() == 0) {
            return -1;
        }
        int max = 0;
        for (Integer i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (Integer i : lst) {
            if (i == max) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_13_0f0cdf63_305a_40ae_90bb_6f726f76631b(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        int max = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > max) {
                max = lst.get(i);
            }
        }
        if (max == 0) {
            return -1;
        }
        int count = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) == max) {
                count++;
            }
        }
        if (count == 1) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_16_f00118e6_ad16_4bf0_866a_85d5fab26b65(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            }
        }
        return maxFreq;

    }

    
    public static int search_Problem_19_4772b99a_231a_43c3_a23f_843a92705dd1(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
            if (lst.stream().filter(x -> x == i).count() > maxFreq) {
                maxFreq = lst.stream().filter(x -> x == i).count();
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_18_d89a4c21_e28d_4b3b_a7bd_8535543f2662(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_18_41e4c49c_1032_475d_8e45_74d98e9a71cb(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_1_868744d5_061b_42ba_bd31_347cf59870d2(ArrayList<Integer> lst) {

        // Your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        for (Integer l : lst) {
            if (map.get(l) > l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_2_f2c4ffd4_2df7_4d6e_83e6_8666b8862220(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().max(Comparator.comparing(Map.Entry::getValue)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_19_b79f9cfb_2f4d_4f86_b223_453157682b01(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_9_7834a80d_3a64_4574_a908_cbac98de0244(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            int count = Collections.frequency(lst, i);
            if (count >= i && count > maxFreq) {
                maxFreq = count;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_17_ad10a305_a151_4a6d_bafa_bed9770c0ce2(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        int max = 0;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_0bd0e132_c8bc_47ea_89f4_39a6754afc1b(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_18_b3d5d24f_a7dd_4d6e_a2c3_ae058ab213ce(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_9_666acf8f_6c87_422c_9773_34b934e4ee35(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == -1) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_16_3fba11a1_0357_4142_8079_b51667a0dc84(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (lst.stream().filter(x -> x == i).count() > lst.stream().filter(x -> x == i).max(Comparator.comparing(Integer::valueOf)).get()) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_86003b35_a828_40c9_9b43_f002930366af(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_f230db74_fed7_4b6a_83c0_0752384376e3(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_13_7f684e03_d035_4e49_941c_27089ee59d2e(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxCount) {
                max = entry.getKey();
                maxCount = entry.getValue();
            }
        }
        if (maxCount >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_24_e41f95f8_35bf_4b22_baf9_f7dd84e04de5(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        for (Integer l : freq.keySet()) {
            if (freq.get(l) > max && l > 0) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_3_f8d913c4_b7aa_4790_bb0f_186ab8f79c81(ArrayList<Integer> lst) {
        int result = -1;
        int max = -1;
        for(int i : lst) {
            if(i>0) {
                max = Math.max(max, i);
            }
        }
        if(max>0) {
            int freq = Collections.frequency(lst, max);
            if(freq>=max) {
                result = max;
            }
        }
        return result;
    }

    
    public static int search_Problem_17_5af4b9a6_2dd0_41e9_9ff3_f88d7d0876fd(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_14_2c362672_7c03_4111_be79_40c6adbf5391(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_17_01318d91_4a8b_4637_a117_9e6d2cc4afbd(ArrayList<Integer> lst) {
        HashMap<Integer, Integer> h = new HashMap<Integer, Integer>();
        for (Integer l : lst)
            h.put(l, h.getOrDefault(l, 0L) + 1);
        Integer max = h.get(0);
        for (Integer l : h.keySet())
            if (l > max)
                max = l;
        if (max > 0)
            return max;
        return -1;
    }

    
    public static int search_Problem_8_ddbc52b5_f507_4136_a9c4_c54525cbd4dd(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int max_count = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                max_count = 1;
            } else if (l == max) {
                max_count++;
            }
        }
        if (max_count == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_20_11984dfe_d998_4f2d_b1d1_b41125ab06fe(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i) {
                max = Math.max(max, i);
            }
        }
        return max == 0 ? -1 : max;
    }

    
    public static int search_Problem_21_c650ad03_0902_45c9_b9ed_21712b038040(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                return max;
            }
        }
        return -1;
    }

    
    public static int search_Problem_15_e41f95f8_35bf_4b22_baf9_f7dd84e04de5(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        for (Integer l : freq.keySet()) {
            if (freq.get(l) > max && l > 0) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_013f9225_ae45_4ca5_b58d_7756bb52240b(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_ce173da5_5189_4260_b53e_8b817c89c31e(ArrayList<Integer> lst) {
        int largest = -1;
        int frequency = 0;
        for (Integer i : lst)
            if (i >= frequency) {
                frequency = i;
                largest = i;
            }
        return largest;
    }

    
    public static int search_Problem_19_a46d49d1_a69c_46fb_ba40_8249650c89e2(ArrayList<Integer> lst) {
        int max = -1;
        HashMap<Integer, Integer> hm = new HashMap<Integer, Integer>();
        for (int val : lst) {
            hm.put(val, hm.getOrDefault(val, 0L) + 1);
            if (hm.getOrDefault(val, 0L) > max) {
                max = hm.getOrDefault(val, 0L);
            }
        }
        return max;
    }

    
    public static int search_Problem_1_41ac9a7b_218b_405a_8e4e_6fb392644202(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i >= max) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_8_202d66f4_d970_460a_bc13_3fbd16e36cd5(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_21_ad78801a_5dde_4330_98be_bb11b74ec049(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (!map.containsKey(l)) {
                map.put(l, 1);
            } else {
                map.put(l, map.get(l) + 1);
            }
        }
        int max = 0;
        int res = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                res = l;
            }
        }
        return res;
    }

    
    public static int search_Problem_16_945f3410_f482_44f2_a612_eaf3c7123a66(ArrayList<Integer> lst) {
        int maxVal = lst.get(0);
        int maxFreq = lst.get(0);
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                maxFreq = val;
            } else if (val == maxVal) {
                maxFreq++;
            }
        }
        return maxFreq > lst.size() ? -1 : maxVal;

    }

    
    public static int search_Problem_20_73ade1e9_e6e7_4fb2_9096_517af2293603(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq >= i && freq > max_freq) {
                max_freq = freq;
            }
        }
        if (max_freq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_23_ab04337d_dbed_4239_85ca_813baa73e62f(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_14_c13d803b_d252_49d8_8325_b8a077cc7935(ArrayList<Integer> lst) {
        int greatestVal = -1;
        int greatestFreq = 0;
        for (int e : lst) {
            if (e > 0 && e >= greatestFreq) {
                greatestVal = e;
                greatestFreq = e;
            } else if (e > 0 && e < greatestFreq) {
                greatestFreq = e;
            }
        }
        if (greatestVal != -1) {
            return greatestVal;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_19_e212a1f1_f93d_4e56_9b82_0f6694364ea0(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_367c1eaa_e59a_47d9_af52_a85bc171d08e(ArrayList<Integer> lst) {

        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_9_b11c6e4e_8771_4985_bdbb_f3c4ad8cd620(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                return max;
            }
        }
        return -1;
    }

    
    public static int search_Problem_22_745a129d_4116_42cb_be7c_705ade38b03b(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            int count = Collections.frequency(lst, i);
            if (count > maxCount) {
                maxCount = count;
                max = i;
            }
        }
        return maxCount >= max ? max : -1;
    }

    
    public static int search_Problem_12_eba1562f_72e8_4738_b536_6779cef536c8(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_18_d7c25666_a9d7_4e5c_b3fc_a87374cc145c(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_9_ec3d4a0e_aa24_4def_98f0_eca5f20864aa(ArrayList<Integer> lst) {

        int[] arr = lst.stream().mapToInteger(Integer::intValue).toArray();
        Arrays.sort(arr);
        for (int i = arr.length - 1; i >= 0; i--) {
            if (arr[i] > 0 && arr[i] <= arr.length - i) {
                return arr[i];
            }
        }
        return -1;
    }

    
    public static int search_Problem_18_2dff4d84_f0aa_471d_8877_8024d58d4241(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_5_95ba8216_d86f_4cf2_a7df_66f656d5a462(ArrayList<Integer> lst) {

        Map<Integer, Integer> freq = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : freq.keySet()) {
            if (freq.get(l) > max) {
                max = freq.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_8_488b0124_4149_46f8_8642_e7fa7dc3b559(ArrayList<Integer> lst) {

        // Write your code here.
        // return -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxCount) {
                max = l;
                maxCount = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_2_56b6dc6f_9d66_407a_a641_4524402d355e(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_22_a32c15c4_fd3a_4fed_9d43_0330149c117b(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_7_24c5dd80_8386_4ee1_9f6f_454049e7515f(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : freq.keySet()) {
            if (freq.get(l) > max) {
                max = freq.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_14_b8b85adb_923a_49af_a4c1_863fc4dfd198(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_20_7ee1436f_98e0_4345_bdfe_066cfa125494(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_2_02da4b23_c23e_4dd3_944d_f0b9de1786f4(ArrayList<Integer> lst) {
        ArrayList<Integer> freq = new ArrayList<>();
        int maxFreq = -1;
        int maxVal = -1;
        for (int val : lst) {
            if (freq.stream().filter(f -> f == val).count() == 0) {
                freq.add(val);
                if (val > maxVal) {
                    maxFreq = maxVal;
                    maxVal = val;
                } else if (val == maxVal) {
                    maxFreq = val;
                }
            }
        }
        return maxFreq == -1 ? -1 : maxVal;
    }

    
    public static int search_Problem_9_dc7acd40_8182_4bc2_9ca8_d6779a0ee2bf(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_dd54eb56_bc22_4c0b_b012_1ab055bd0648(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().filter(e -> e.getKey() > 0 && e.getValue() >= e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_18_d7584f7e_0aa2_498b_9728_13476dc93a11(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (maxFreq < val && val > 0) {
                maxFreq = val;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_13_b2d61701_8b21_4928_9f53_36bcfb52af5e(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_9_a2470877_044c_431a_ae99_ecbe88a2b23a(ArrayList<Integer> lst) {
        TreeMap<Integer,Integer> map = new TreeMap<>();
        for (Integer num : lst) {
            int count = map.get(num);
            map.put(num, count + 1);
        }
        Integer max = map.firstKey();
        for (Map.Entry<Integer,Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey() && entry.getValue() > max)
                max = entry.getKey();
        }
        return max == null ? -1 : max;
    }

    
    public static int search_Problem_0_88d5a93a_86b1_43f7_af50_43aae8c1b9d3(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_9c1866ff_a5b9_45b0_89f3_8c175684d82e(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_24_ba23e33b_d6d3_4016_938d_f8faa6582f93(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (lst.stream().filter(x -> x == i).count() > maxFreq) {
                maxFreq = lst.stream().filter(x -> x == i).count();
                max = i;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_9_1efe6143_4ecc_4bce_a638_14b0252b8dcc(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = -1;
        int maxKey = -1;
        for (Integer i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxKey = i;
            }
        }
        if (maxKey == -1) {
            return -1;
        } else {
            return maxKey;
        }
    }

    
    public static int search_Problem_16_8a510569_dac3_4dbe_8a22_4a0c8d2600c7(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int max_key = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                max_key = entry.getKey();
            }
        }
        if (max_key > 0) {
            return max_key;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_11_229a13bd_7617_43eb_a6a2_e1acc26f4b49(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_d4e90559_aa80_4ae4_b4b6_aaf779727126(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_11_f0ae8283_a57e_476d_8bc4_e77a26a8f42c(ArrayList<Integer> lst) {
        int max = lst.get(0), min = lst.get(0);
        for(int i = 1; i < lst.size(); i++){
            int curr = lst.get(i);
            if(curr > max){
                max = curr;
            }else if(curr < min){
                min = curr;
            }
        }
        return (lst.indexOf(min) > lst.indexOf(max)) ? -1 : max;
    }

    
    public static int search_Problem_1_194f5d5c_8c22_4f43_8bc6_850907224acc(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_0_8a9288ca_4e7d_446b_b758_a16f5c84115a(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i : lst) {
            if(map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for(int i : map.keySet()) {
            if(map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_8744f966_d42c_47ea_900d_60469bfbffef(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_9_b22b8e31_3f57_4873_be23_315951e8679a(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == -1) {
            return -1;
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) == max) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_16_1b721256_60fd_4c00_a78d_fe202989f1c0(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_3_944f16eb_5d8a_461d_a221_477971af348a(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_10_8eca8166_4da2_4870_a3fb_d0ebcb04232f(ArrayList<Integer> lst) {
        Map<Integer, Integer> map = new TreeMap<>();
        for (Integer i : lst) {
            map.put(i, map.getOrDefault(i, 0L) + 1);
        }
        int greatest = Integer.MIN_VALUE;
        int currMaxFreq = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (currMaxFreq < entry.getValue()) {
                currMaxFreq = entry.getValue();
                greatest = entry.getKey();
            }
        }
        return greatest;
    }

    
    public static int search_Problem_7_aba2947d_9c07_4c90_9838_78fe61b95c75(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_21_82373d4a_910c_437d_9fc6_2a3e569ad719(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxFreq = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxFreq) {
                max = l;
                maxFreq = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_3_6b58869e_c1a9_4d82_89ee_645cdf2c8161(ArrayList<Integer> lst) {
        int max = Integer.MIN_VALUE;
        for (int num : lst) {
            if (num > max) {
                max = num;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_d790ed4c_cb48_43e0_9783_f65d6b5e8c63(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_8d15e657_96dd_4267_92dc_983bd3ca9ca8(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1 || freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_24_a5016074_e132_4000_9a85_0d6f58366b59(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_6_39c6be5c_f181_4018_bbaf_f92b1fed4793(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > maxFreq) {
                maxFreq = freq;
                max = i;
            }
        }
        return maxFreq >= max ? max : -1;
    }

    
    public static int search_Problem_17_afd54a7d_236b_46f5_8533_1af5dd7a2643(ArrayList<Integer> lst) {
        Collections.sort(lst);
        if (lst.isEmpty()) {
            return -1;
        }
        int max = lst.get(0);
        int min = lst.get(0);
        for (int l : lst) {
            if (l > max) {
                max = l;
            }
            if (l < min) {
                min = l;
            }
        }
        if (min == max) {
            return min;
        }
        int answer = max;
        for (int l : lst) {
            if (l >= min) {
                answer = Math.max(answer, l + 1);
            }
        }
        return answer < 0 ? -1 : answer;
    }

    
    public static int search_Problem_8_1f431f5d_5563_4792_b201_0d6315f4e178(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        int max = lst.get(0);
        int count = 1;
        for (int i = 1; i < lst.size(); i++) {
            if (lst.get(i) == max) {
                count++;
            } else if (lst.get(i) > max) {
                max = lst.get(i);
                count = 1;
            }
        }
        if (count >= max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_5_41e230b5_604b_466d_9588_bd307b47ae71(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            } else if (val == maxVal) {
                maxFreq++;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_0_0c64acff_0724_4f7b_b47d_7ed6095be1c3(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i) {
                max = Math.max(max, i);
            }
        }
        return max;
    }

    
    public static int search_Problem_6_7ad8c680_4f0c_4b72_bbfe_365e5afda47d(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_c865a948_8909_46e9_8310_d5d8f06486a3(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_22_aea215f5_0418_4ad0_a18f_1dffd1766d81(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_12_878dbdd9_26ab_4d52_9fb8_9097d5bcf531(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        for (Integer i : lst) {
            if (i > 0 && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_11_6669a8e6_6402_406c_ae72_2ade63dc4fa7(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_13_910d2de5_22fe_4b1c_b9ef_317e08fb524d(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1L);
            }
        }
        Integer max = -1L;
        for (Integer l : map.keySet()) {
            if (l > 0 && map.get(l) >= l) {
                max = l;
                break;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_d7aadf7e_d5a2_412c_89e3_bca43e04b30c(ArrayList<Integer> lst) {
        Integer max = new Integer(0);
        Integer maxFreq = new Integer(0);
        for (Integer i : lst) {
            if (i > max) {
                max = i;
            }
            if (i.equals(max)) {
                maxFreq++;
            }
        }
        if (maxFreq >= max.intValue()) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_3_ad4f6f5f_6e89_41bf_99c5_e90a4758efe1(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l,  1);
            }
        }
        int max = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey() && entry.getKey() > max) {
                max = entry.getKey();
            }
        }
        return max;
    }

    
    public static int search_Problem_24_25876edf_2fe6_43cd_9680_e72e5c1d8599(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq == i) {
                maxFreq++;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_14_7a30a30e_2ae1_4a0c_988e_e619999aacef(ArrayList<Integer> lst) {

        // Write your code here.
        // Sort the list in descending order
        // Iterate through the list
        // If the current element is greater than 0 and has a frequency greater than or equal to the value of the 
        // element itself, return the element
        // Else return -1
        Collections.sort(lst, Collections.reverseOrder());
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > 0 && lst.indexOf(lst.get(i)) >= lst.lastIndexOf(lst.get(i))) {
                return lst.get(i);
            }
        }
        return -1;
    }

    
    public static int search_Problem_19_3c2ba5d8_6a7b_44b2_a0f3_a751277ac805(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                if(val > maxVal) {
                    maxVal = val;
                    maxFreq = lst.get(lst.indexOf(val));
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_2_1579013d_1449_480c_b590_98ba4e590b58(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_e482d9dd_f149_40b1_ab02_bae62056d15e(ArrayList<Integer> lst) {
        return lst.stream().filter(n -> n>=0L).max(Comparator.comparingInteger(n -> n)).orElse(-1L);
    }

    
    public static int search_Problem_23_7377bd0d_7999_484a_95cc_bbe0b9cf2bd7(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer x : lst) {
            map.put(x, map.getOrDefault(x, 0) + 1);
        }
        int max = 0;
        for (Integer x : map.keySet()) {
            if (map.get(x) >= max) {
                max = map.get(x);
            }
        }
        return max;
    }

    
    public static int search_Problem_19_e482d9dd_f149_40b1_ab02_bae62056d15e(ArrayList<Integer> lst) {
        return lst.stream().filter(n -> n>=0L).max(Comparator.comparingInteger(n -> n)).orElse(-1L);
    }

    
    public static int search_Problem_8_586fa23c_0d5b_43f6_9f56_b4e99aa8b401(ArrayList<Integer> lst) {

        // Your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_10_98bfe3ed_f3ce_47d1_8bea_af7d7e64762f(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
            if (map.get(i) > maxFreq) {
                maxFreq = map.get(i);
                max = i;
            }
        }
        if (maxFreq > 1) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_13_6ea44e65_c02c_44c2_a843_3905ab5cb9c5(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_21_4954a758_04cb_44a3_b32f_afa095afb6ef(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_38bc859c_559e_4d2a_8067_106d9fead4d3(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_f6e4ed8f_2384_48cb_af77_d4b3d22b86c0(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1L);
            }
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_2c69a20b_be58_4542_a94d_d622710d3f38(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        int max_freq = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max_freq) {
                max = entry.getKey();
                max_freq = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_2_7600ca3c_a2c2_4f63_8b3f_d1d675a8a61e(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_23_7119f969_498e_4cfe_8141_17c82fec86e1(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_c0088b1b_e2e2_43a5_af31_ae6b084f6e88(ArrayList<Integer> lst) {
        // Write your code here
        int n = lst.size();
        Map<Integer, Integer> m = new HashMap<>();
        for (int i = 0; i < n; i++) {
            if (m.containsKey(lst.get(i))) {
                m.merge(lst.get(i), lst.get(i), Integer::sum);
            } else {
                m.put(lst.get(i), 1);
            }
        }
        if (m.isEmpty()) {
            return -1;
        }
        for (Map.Entry<Integer, Integer> entry : m.entrySet()) {
            if (entry.getValue() > lst.size() * 1.0 / n) {
                return -1;
            }
        }
        int max = Integer.MIN_VALUE;
        for (Map.Entry<Integer, Integer> entry : m.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_12_e97844f4_ea8c_48db_879b_8ec179f2d772(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_15_5405a6e4_6a1c_46ce_ae22_7144ca5253f5(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            }
            if (maxFreq == i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_1_878dbdd9_26ab_4d52_9fb8_9097d5bcf531(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        for (Integer i : lst) {
            if (i > 0 && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_8_42efd88d_655d_4cad_b068_88364e957026(ArrayList<Integer> lst) {
        // Your code here
        return -1;
    }

    
    public static int search_Problem_17_91294ef0_e8b4_4761_8b52_2ded61334f94(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_8_01ef0a80_621a_425c_8647_805f30677432(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().filter(e -> e.getKey() > 0 && e.getValue() >= e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_16_44810787_33a6_40bf_b0c6_d09d764c9d51(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        for (int l : map.keySet()) {
            if (map.get(l) >= l && l > max) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_d6b46695_ae0f_4bf2_89ea_613b8488368d(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_0c443593_89a7_440e_a7cf_50b04418de15(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (freq > max) {
                max = freq;
            }
            if (freq == i) {
                freq++;
            }
        }
        return max;

    }

    
    public static int search_Problem_2_3d67b149_fd39_485d_a5a1_b49a57eb908f(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq += i;
            if (freq > max) {
                max = freq;
            }
        }
        return max;

    }

    
    public static int search_Problem_6_9396907f_0e66_4f00_9139_c7e56d4292c9(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_19_8567573e_f173_4377_9a1a_64ba32f854ef(ArrayList<Integer> lst) {

        int max = -1;
        for (int i = 0; i < lst.size(); i++) {
            int count = 0;
            for (int j = 0; j < lst.size(); j++) {
                if (lst.get(j) == i) {
                    count++;
                }
            }
            if (count > i && count > max) {
                max = count;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_256d22df_0c9f_4262_85be_ca79310258aa(ArrayList<Integer> lst) {

        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_d604689f_bee1_42e6_8a6a_d3255efa242f(ArrayList<Integer> lst) {

        // write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) == max) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_24_fc1eef5c_8903_400d_905f_cceeaa48630d(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxCount) {
                max = entry.getKey();
                maxCount = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_11_5a19afe3_b067_4205_8dab_b3039477701d(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i > max) {
                int count = 0;
                for (int j : lst) {
                    if (i == j) {
                        count++;
                    }
                }
                if (count >= i) {
                    return i;
                }
            }
        }
        return -1;
    }

    
    public static int search_Problem_14_186dd976_2ed1_4bcd_b511_6a16f6d2f00f(ArrayList<Integer> lst) {
        Collections.sort(lst);
        for(int i = 0; i< lst.size(); i++) {
            if((i+1)==lst.size() || lst.get(i+1)<lst.get(i) || lst.get(i)<0) {
                return -1;
            }
        }
        return lst.get(lst.size()-1);
    }

    
    public static int search_Problem_23_287de844_87df_4d51_abaa_2c57adec9425(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq < i) {
                maxFreq = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_5_b2d61701_8b21_4928_9f53_36bcfb52af5e(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_10_2d386dcc_4ac9_4f9c_91b1_47f8240ed7a9(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_11_8763d3c4_406c_43dd_afca_d0b71a7b4752(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_8_8ba8e236_8895_4c97_90a7_112bad88532e(ArrayList<Integer> lst) {
        int maxFreq = 0;
        int maxVal = 0;

        List<Integer> list = lst.stream().distinct().sorted(Comparator.reverseOrder()).collect(Collectors.toList());
        Collections.sort(list);

        for (int i : list) {
            int freq = list.stream().filter(j -> j == i).count();
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = i;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_6_41e230b5_604b_466d_9588_bd307b47ae71(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            } else if (val == maxVal) {
                maxFreq++;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_5_47bdf02e_8b8d_45b2_93e4_89ca5ed05e29(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_24_a46d49d1_a69c_46fb_ba40_8249650c89e2(ArrayList<Integer> lst) {
        int max = -1;
        HashMap<Integer, Integer> hm = new HashMap<Integer, Integer>();
        for (int val : lst) {
            hm.put(val, hm.getOrDefault(val, 0L) + 1);
            if (hm.getOrDefault(val, 0L) > max) {
                max = hm.getOrDefault(val, 0L);
            }
        }
        return max;
    }

    
    public static int search_Problem_5_eba1562f_72e8_4738_b536_6779cef536c8(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_73361bd0_0385_456d_bfc6_c35cd881f987(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq += i;
            if (freq > max) {
                max = freq;
            }
        }
        return max > 0 ? max : -1;
    }

    
    public static int search_Problem_8_d53d75db_97b7_4c00_919f_3370acbdd657(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_8f6732a2_671d_4c17_99fd_101b799b3975(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                if(maxFreq < val) maxFreq = val;
                if(maxVal < val) maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_15_43fed902_f4ad_42a6_b935_82237ff13d35(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_2_8d938d12_2bce_456a_bb29_3a7567ced22b(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_13_a072df67_4de4_4a90_989e_31fa6738d407(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_24_cfc5e22a_afec_432c_86bd_b5f973ccd322(ArrayList<Integer> lst) {

        int max = 0;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_21_8576a965_eca9_4c71_8d47_bcd59f4f4567(ArrayList<Integer> lst) {
        int max_val = -1;
        int max_freq = -1;

        for (int x : lst) {
            if (max_freq == -1 || x >= max_freq) {
                max_val = x;
                max_freq = x;
            }
            else if (x >= max_freq) {
                max_freq = x;
            }
        }

        return max_val;
    }

    
    public static int search_Problem_4_90cbed25_000a_4152_9f93_05f8382e80d7(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq == -1 || maxFreq > i) {
                maxFreq = i;
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_24_13675c88_f236_4cd4_9bb6_298fb65efd7f(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i) {
                maxFreq = i;
                maxVal = i;
            } else if (maxFreq == i) {
                maxVal = Math.max(maxVal, i);
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_4_1bcd103b_3a37_4cc3_8e39_6815ada2f0b2(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_1463fc04_d824_4055_8b21_7d5d3308fa12(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        int maxFreq = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxFreq) {
                max = entry.getKey();
                maxFreq = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_4_fc1eef5c_8903_400d_905f_cceeaa48630d(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxCount) {
                max = entry.getKey();
                maxCount = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_12_b7819f6c_3d35_4f9d_ad6b_f17ca577a127(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            if (freq.containsKey(l)) {
                freq.put(l, freq.get(l) + 1);
            } else {
                freq.put(l, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (Map.Entry<Integer, Integer> entry : freq.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_3_132f983a_6c2c_4a1f_a1bc_48685fd7ed8b(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer num : lst) {
            if (map.containsKey(num)) {
                map.put(num, map.get(num) + 1);
            } else {
                map.put(num, 1);
            }
        }
        for (Integer num : map.keySet()) {
            if (map.get(num) >= num) {
                return num;
            }
        }
        return -1;
    }

    
    public static int search_Problem_16_13675c88_f236_4cd4_9bb6_298fb65efd7f(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i) {
                maxFreq = i;
                maxVal = i;
            } else if (maxFreq == i) {
                maxVal = Math.max(maxVal, i);
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_21_67e003ed_8729_4d34_bfad_41aebec85b4a(ArrayList<Integer> lst) {

        // Your code here
        int max = -1;
        for (int i : lst) {
            if (i > max && Collections.frequency(lst, i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_e2fc3dae_61bb_40a6_aa5a_6b596e56416c(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i = lst.get(lst.size() - 1); i > 0; i--) {
            if (map.containsKey(i) && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_14_bec517b7_0f1b_498f_91fd_721a94703e8b(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == -1) {
            return -1;
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) == max) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_21_46353ace_b544_4908_9e10_eafbf10af0c8(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (int l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_11_8daa32b0_a742_41c7_8e7e_00da5e9460a3(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_24_4ceaf7a9_4bfc_4add_b4f0_c0f6b3abf303(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_24_6a0ce858_cb00_4a00_a7bc_371fefd13857(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? max : -1;
    }

    
    public static int search_Problem_17_069c53c3_73ce_4b33_9c9f_93effc675279(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxCount = 0;
        for (int i : lst) {
            if (maxCount < i) {
                maxCount = i;
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_8_069c53c3_73ce_4b33_9c9f_93effc675279(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxCount = 0;
        for (int i : lst) {
            if (maxCount < i) {
                maxCount = i;
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_22_a1b5dcc2_40ae_499b_831e_d91bfe1583be(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1) {
                freq = i;
                max = i;
            } else if (freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_10_db765413_77b5_41a5_98fa_39e066454fb5(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_5_1065bc23_c245_45ed_a26d_291be51180b1(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_18_8daa32b0_a742_41c7_8e7e_00da5e9460a3(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_18_c158e614_67ca_4230_8a79_fa034e92e59d(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            if (freq.containsKey(l)) {
                freq.put(l, freq.get(l) + 1);
            } else {
                freq.put(l, 1);
            }
        }
        int max = -1;
        int maxFreq = 0;
        for (Integer l : freq.keySet()) {
            if (freq.get(l) > maxFreq) {
                max = l;
                maxFreq = freq.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_4_d38b7080_4cc9_4903_a07c_02ff4b364c5e(ArrayList<Integer> lst) {

        int max = -1;
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_f1a3ffbb_3efd_406b_8e9e_575b480d42b7(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_17_7636a358_de74_4432_a902_c97f3d3a5596(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int res = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                res = l;
            }
        }
        return res;
    }

    
    public static int search_Problem_8_145115a4_5be9_4bbe_8110_a2bda29de3fe(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_20_56baaa71_8093_4ef3_ae80_83e3e388a438(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_10_9528fbfe_2a10_4272_a5e4_16cfce075fe1(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_53e384db_a8a8_4e20_afed_2f0f70a452c8(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        int currFreq = 0;
        int curr = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                currFreq = 1;
            } else if (l == max) {
                currFreq++;
            }
            if (currFreq > maxFreq) {
                maxFreq = currFreq;
                curr = max;
            }
        }
        return curr;
    }

    
    public static int search_Problem_20_6f69e21c_5be0_4954_94db_763cde3389c7(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        int max = 0;
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        if (max == 0) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_6_e87ee65d_2432_4cd6_9fa7_1245a67fd8b2(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_21_49578c7a_cf0c_4faa_83f9_8018efa6c347(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_4_bf15a6c4_ccb7_413f_a501_795ecf5456d2(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_9_668e2531_7fc0_4f69_b0b7_5bafec63be61(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && max < i) {
                max = i;
                maxFreq = i;
            } else if (maxFreq == i) {
                maxFreq++;
            }
        }
        return max;

    }

    
    public static int search_Problem_3_184d9555_b5dd_4c06_8fab_80a84f3de604(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > max_freq) {
                max = i;
                max_freq = freq;
            }
        }
        return max_freq >= max ? max : -1;
    }

    
    public static int search_Problem_16_914fe20c_ba0b_47b6_a58a_c3e4a336b306(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for(Integer i : lst) {
            if(map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for(Integer i : map.keySet()) {
            if(map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_2_61108b23_27b0_4fec_975b_51b698f8343c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i) {
                maxFreq = i;
                maxVal = i;
            } else if (maxFreq == i) {
                maxVal = Math.max(maxVal, i);
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_15_7fe02556_39eb_4dc9_963d_b2775886e7df(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_18_24c5dd80_8386_4ee1_9f6f_454049e7515f(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : freq.keySet()) {
            if (freq.get(l) > max) {
                max = freq.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_0_b768e1e9_f39e_4f14_8a71_2081ee4fcabb(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_17_c9f1bfb7_fd9b_4c43_adee_2f50604edb3c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                if (maxFreq < val) maxFreq = val;
                if (maxVal < val) maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_12_614bbaac_06cb_4461_a4c8_c881c380bbb9(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            if (freq.containsKey(l)) {
                freq.put(l, freq.get(l) + 1);
            } else {
                freq.put(l, 1);
            }
        }
        int max = -1;
        int maxFreq = -1;
        for (Integer l : freq.keySet()) {
            if (freq.get(l) > maxFreq) {
                max = l;
                maxFreq = freq.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_15_162f887c_88b0_4c32_84a5_fba020d0563e(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_1_8548a2a2_1e5a_49d1_bf60_691e7ec64705(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_13_df030546_8c46_43f9_a1ef_4a381fb709b6(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_9_a89ac05c_1487_483b_a3b9_04de627cc562(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_12_62558c05_9e82_4250_891f_058187f4ccde(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer num : lst) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        return map.entrySet().stream().filter(entry -> entry.getValue() >= entry.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_19_c6dfa2f1_16ad_4bb5_807d_392cae09cec7(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        int maxVal = 0;
        for (Integer i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxVal = i;
            }
        }
        if (maxVal > 0) {
            return maxVal;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_3_e7528919_2003_4faa_a52b_6553cd7b2634(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > maxFreq) {
                max = i;
                maxFreq = freq;
            }
        }
        if (maxFreq < max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_4_4f035a71_2fb6_4287_9075_16a110eb9a6e(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int max_freq = 0;
        int curr_freq = 0;
        int curr = 0;
        for (int i = 0; i < lst.size(); i++) {
            curr = lst.get(i);
            curr_freq = 0;
            for (int j = 0; j < lst.size(); j++) {
                if (lst.get(j) == curr) {
                    curr_freq++;
                }
            }
            if (curr_freq > max_freq) {
                max_freq = curr_freq;
                max = curr;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_1ac6a45f_6f16_431d_ae24_e74f341d426f(ArrayList<Integer> lst) {

        // Write your code here.
        // return -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int max_count = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max_count) {
                max = l;
                max_count = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_3_00833c3b_34bf_4783_a4b9_ed68d217b82c(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_5_78425dc4_2fa8_4eff_b27e_060bbd687963(ArrayList<Integer> lst) {

        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_9fd98f2f_8343_4bb2_917f_3fc201287b67(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq < max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_1_14a7bc48_1708_496d_8c33_89bfee55d10d(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for(int i = 0; i < lst.size(); i++) {
            int freq = 0;
            for(int j = 0; j < lst.size(); j++) {
                if(lst.get(i) == lst.get(j)) {
                    freq++;
                }
            }
            if(freq > maxFreq) {
                max = lst.get(i);
                maxFreq = freq;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_99b48160_d7e2_45f3_bc3a_38ec2d08b532(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_0_fbdd92d5_720e_4f1f_a89c_c4e966cc0d82(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_12_f3087897_ba24_4b48_af4e_63805b442ee4(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            if (freq.containsKey(l)) {
                freq.put(l, freq.get(l) + 1);
            } else {
                freq.put(l, 1);
            }
        }
        Integer max = freq.keySet().stream().max(Comparator.comparing(freq::get)).get();
        if (freq.get(max) >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_24_7636a358_de74_4432_a902_c97f3d3a5596(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int res = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                res = l;
            }
        }
        return res;
    }

    
    public static int search_Problem_8_477dc8ce_181c_494b_a11d_8facc9eacc21(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_24_f52f6a24_24bf_433a_bfa6_aa3349bf8867(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_9be68ec5_0ce5_48dd_aa8c_986716611188(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for (Integer i : map.keySet()) {
            if (map.get(i) > map.get(max) && map.get(i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_ef842b3a_f167_4794_82b5_d496c2cf41be(ArrayList<Integer> lst) {
        Set<Integer> intSet = lst.stream().map(Number::intValue).collect(Collectors.toSet());
        Integer greatest = Integer.MIN_VALUE;
        Integer highestFreq = Integer.MIN_VALUE;
        for (Integer i : intSet) {
            if (highestFreq < i && i > 0) {
                highestFreq = i;
                greatest = i;
            }
        }
        return greatest == Integer.MIN_VALUE ? -1 : greatest;
    }

    
    public static int search_Problem_2_488b0124_4149_46f8_8642_e7fa7dc3b559(ArrayList<Integer> lst) {

        // Write your code here.
        // return -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxCount) {
                max = l;
                maxCount = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_13_2c644217_0b88_4bb0_98bc_df5349c23e18(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_9_878dbdd9_26ab_4d52_9fb8_9097d5bcf531(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        for (Integer i : lst) {
            if (i > 0 && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_21_2ad31ee5_c10d_467c_be23_50efb7d4f79f(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l,  1);
            }
        }
        Integer max =  -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                if (l > max) {
                    max = l;
                }
            }
        }
        return max;
    }

    
    public static int search_Problem_11_f19581b8_5030_41c1_8586_d2ea96b71250(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_0_f286a023_c84a_4cb4_a764_c8843e21a3c8(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_8_f9d113d2_a9cc_4521_8dcd_25c58e972fdb(ArrayList<Integer> lst) {
        int max = -1;
        int maxValue = -1;
        for (int i : lst) {
            if (maxValue < i)
                maxValue = i;
            if (maxValue > 0)
                max = i;
        }
        return max;
    }

    
    public static int search_Problem_20_4b30273f_57d0_40ea_850d_e823a1a9f302(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_1_164c6e1a_91e2_4038_b15f_5c15235e981d(ArrayList<Integer> lst) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        for (int i : map.keySet()) {
            if (i > 0 && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_12_9e47b236_3907_4993_94f8_33e8a1a1b8a4(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_c3b13b72_a153_49c4_b23f_d7effdd8c367(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_3d7c9371_4714_48c9_8316_65b752e41fe9(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for(int i : lst) {
            freq++;
            if(freq > max) {
                max = freq;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_89fb8076_d99b_4ae5_81ec_509e08d9a777(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_12_59a441f8_50e6_4041_bf26_4f6157dca69d(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for(int i : lst) {
            if(i > max) {
                max = i;
            }
            if(lst.stream().filter(x -> x == i).count() > maxFreq) {
                maxFreq = lst.stream().filter(x -> x == i).count();
            }
        }
        if(maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_18_acafe13a_fba9_476e_be33_4e939418f3d4(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_7fc29044_9fd1_46d1_9557_d19ed61bed31(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == -1) {
            return -1;
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) == max) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_0_c98aa025_cbe3_4a8e_85ea_dae95b2133e3(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_19_67449864_e268_40e3_a353_89c002126c1c(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > max_freq) {
                max = i;
                max_freq = freq;
            }
        }
        if (max_freq < max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_17_3db7e9c5_ceee_4ffb_bedc_f11410e449cf(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_18_2ceb6733_e722_4d18_a889_990d723b21bd(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = Collections.frequency(lst, i);
            }
        }
        if (maxFreq < max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_23_dc20ce87_32d8_4664_bf5f_f3f428ebe301(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_24_a50b11b3_466b_42f0_811d_554e19aee8ce(ArrayList<Integer> lst) {

        // Sort the list in descending order
        Collections.sort(lst, Collections.reverseOrder());

        // Iterate through the sorted list
        for (int num : lst) {
            // Check if the frequency of the current number is greater than or equal to the number itself
            if (Collections.frequency(lst, num) >= num) {
                return num;
            }
        }

        // If no such number exists, return -1
        return -1;
    }

    
    public static int search_Problem_7_fb888065_b76e_458d_8ed0_4d472efe76fb(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<Integer, Integer>();
        for (int l : lst) {
            if (freq.containsKey(l)) {
                freq.put(l, freq.get(l) + 1);
            } else {
                freq.put(l, 1);
            }
        }
        int max = -1;
        int maxFreq = -1;
        for (int l : freq.keySet()) {
            if (freq.get(l) > maxFreq) {
                max = l;
                maxFreq = freq.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_11_313d673f_72c9_461b_886e_f2c45414106d(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_ab04337d_dbed_4239_85ca_813baa73e62f(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_12_a1432b05_9540_4065_983f_1e332aa25d48(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_8_b59dd5f8_ee18_4d52_b136_4414f92d12a1(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_23_287a1721_1bbd_4c4f_940f_ec6d0a18802e(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i = 1; i < lst.size(); i++) {
            if (map.containsKey(i) && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_22_dadc9b23_ed8d_4c7d_8f45_e2726e97b609(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        for (int i : lst) {
            if (i > max && Collections.frequency(lst, i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_24_9cb17680_3432_4520_8741_64ca626f7700(ArrayList<Integer> lst) {
        // Write your code here
        // To print results to the standard output you can use System.out.println()
        // Example: System.out.println("Hello world!");
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1L);
            }
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l && l > max) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_24_7880b246_42e6_49da_82e1_3f61dc26b1c3(ArrayList<Integer> lst) {
        int val = 0;
        val =  lst.stream().filter(l->l>0).map(l ->l).reduce(Math::max).orElse(-1);
        return val;
    }

    
    public static int search_Problem_24_9cefe690_bd2b_49b0_9d8e_46d52218f92f(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_23_a593c4c9_7213_4be3_87a3_cf071b849e81(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for (Integer i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) == max) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_1_d0653b8e_478d_40cd_a973_21d0d41cd72b(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int maxCount = 0;
        for(int i : lst) {
            if(i > max) {
                max = i;
                maxCount = 1;
            } else if(i == max) {
                maxCount++;
            }
        }
        if(maxCount >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_6_dd54eb56_bc22_4c0b_b012_1ab055bd0648(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().filter(e -> e.getKey() > 0 && e.getValue() >= e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_7_ef390120_0cc2_4202_9be1_13314d0fd755(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq++;
            if(freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_11_fc1eef5c_8903_400d_905f_cceeaa48630d(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxCount) {
                max = entry.getKey();
                maxCount = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_0_53086303_fb1f_4010_b8f0_656c81a56c9c(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_ee14dc35_0105_4691_8614_eb0bcf8c3e00(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            } else if (val == maxVal) {
                if (val > maxFreq) {
                    maxFreq = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_13_47147db5_b999_4d56_8161_698a49d5f0e2(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_14_b9663e76_b45a_47bb_939f_3791547e761e(ArrayList<Integer> lst) {

        // write your code in Java SE 8
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_15_c26b07ed_446b_4e0f_86fb_dc8b85017572(ArrayList<Integer> lst) {

        int max = 0;
        int max_count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                max_count = 1;
            } else if (i == max) {
                max_count++;
            }
        }
        for (int i : lst) {
            if (i > max && i >= max_count) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_9_4f170531_8429_4e57_bbf9_26df9c2060c9(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxKey = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                maxKey = l;
            }
        }
        return maxKey;
    }

    
    public static int search_Problem_6_477dc8ce_181c_494b_a11d_8facc9eacc21(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_6_f058ba41_e5a0_4800_9b6e_ef0c19812839(ArrayList<Integer> lst) {
        return lst.stream().filter(i -> Collections.frequency(lst, i) >= i).max(Comparator.naturalOrder()).orElse(-1);
    }

    
    public static int search_Problem_8_14a7bc48_1708_496d_8c33_89bfee55d10d(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for(int i = 0; i < lst.size(); i++) {
            int freq = 0;
            for(int j = 0; j < lst.size(); j++) {
                if(lst.get(i) == lst.get(j)) {
                    freq++;
                }
            }
            if(freq > maxFreq) {
                max = lst.get(i);
                maxFreq = freq;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_6f9e03f8_583a_4cba_b8ee_ba4fa142e075(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = -1;
        int maxFreq = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxFreq) {
                max = entry.getKey();
                maxFreq = entry.getValue();
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_5_33039bb6_d7a0_4504_a080_5900bcfb3092(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_1_f0c2bec4_b033_48c0_99d7_eb8bc3d12b50(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int max_count = 0;
        for(int i : lst) {
            if(i > max) {
                max = i;
                max_count = 1;
            } else if(i == max) {
                max_count++;
            }
        }
        if(max_count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_9_ac3743e7_7b1e_4cd8_8ee7_c64471278284(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_19_dffe57b8_3c6f_4f6e_9e6e_c7afdf1ceff7(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : lst) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_19_588b3590_e974_46f1_8afd_0bd9f58cfe88(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_16_1452dd64_329f_4746_a7e8_a5b0bbe8a57d(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq >= maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_8_fcc7171a_598d_45f0_8152_bda91bb80678(ArrayList<Integer> lst) {

        int max = 0;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_19_511dc3aa_22a9_4d3b_97d0_11438559129a(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_5_488b0124_4149_46f8_8642_e7fa7dc3b559(ArrayList<Integer> lst) {

        // Write your code here.
        // return -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxCount) {
                max = l;
                maxCount = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_11_b79f9cfb_2f4d_4f86_b223_453157682b01(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_23_c0c954bc_1284_4c1a_aa8e_8150f66c1924(ArrayList<Integer> lst) {
        int res = -1;
        if (lst != null && lst.size() > 0) {
            // Create a map of number to count of occurances in the list, O(n)
            Map<Integer, Integer> numToCount = new HashMap<Integer, Integer>();
            for (int x : lst) {
                if (numToCount.containsKey(x)) {
                    numToCount.put(x, numToCount.get(x) + 1);
                } else {
                    numToCount.put(x, 1);
                }
            }
            int maxFreq = 0;
            // Iterate through the keys and find the one whose value is at least equal to the key, O(n)
            for (int x : numToCount.keySet()) {
                if (numToCount.get(x) >= x && numToCount.get(x) > maxFreq) {
                    maxFreq = numToCount.get(x);
                    res = x;
                }
            }
        }
        return res;
    }

    
    public static int search_Problem_3_2c29fe97_cbe4_48a8_be3e_65d44dd2f558(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_b40f3c74_5865_48df_9079_8a432915e798(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        int max = 0;
        int maxFreq = 0;
        for (int i = 0; i < lst.size(); i++) {
            int num = lst.get(i);
            int freq = 0;
            for (int j = 0; j < lst.size(); j++) {
                if (lst.get(j) == num) {
                    freq++;
                }
            }
            if (freq > maxFreq) {
                max = num;
                maxFreq = freq;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_7a30a30e_2ae1_4a0c_988e_e619999aacef(ArrayList<Integer> lst) {

        // Write your code here.
        // Sort the list in descending order
        // Iterate through the list
        // If the current element is greater than 0 and has a frequency greater than or equal to the value of the 
        // element itself, return the element
        // Else return -1
        Collections.sort(lst, Collections.reverseOrder());
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > 0 && lst.indexOf(lst.get(i)) >= lst.lastIndexOf(lst.get(i))) {
                return lst.get(i);
            }
        }
        return -1;
    }

    
    public static int search_Problem_5_ee71fb16_368d_4dfd_af93_232e75863a93(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_08787896_7a1e_4c1f_b505_d0f81530dd30(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_23_fe77f6d5_77b5_4602_b76f_d51dbfd3dea6(ArrayList<Integer> lst) {
        int max = 0;
        for(int l : lst) {
            max = Math.max(max, l);
            max = Math.min(max, l);
        }
        return max;
    }

    
    public static int search_Problem_1_7d7ed025_55c2_4ff1_836d_2858f5c1f32d(ArrayList<Integer> lst) {
        int n = lst.size();
        if(n==0)
            return -1;
        int max = -1;
        for(int i = 0; i < n; i++) {
            if(lst.contains(i))
                if(lst.size()>1) {
                    int temp = 1;
                    for(int j = 0; j < i; j++)
                        temp *= lst.size();
                    if(temp>max)
                        max = temp;
                }
                else
                    max = i;
        }
        return max;
    }

    
    public static int search_Problem_12_ad10a305_a151_4a6d_bafa_bed9770c0ce2(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        int max = 0;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_9_367dbae6_5c7a_438c_8efc_e29ad080c2b3(ArrayList<Integer> lst) {

        // your code here
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        int max = 0;
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_9_14a7bc48_1708_496d_8c33_89bfee55d10d(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for(int i = 0; i < lst.size(); i++) {
            int freq = 0;
            for(int j = 0; j < lst.size(); j++) {
                if(lst.get(i) == lst.get(j)) {
                    freq++;
                }
            }
            if(freq > maxFreq) {
                max = lst.get(i);
                maxFreq = freq;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_12dddb88_e8bf_40f6_99a4_20af6b2d360f(ArrayList<Integer> lst) {
        int maxIndex = 0;
        int maxCount = 0;
        for (Integer v : lst) {
            if (v > 0) {
                if (v.intValue() > maxCount) {
                    maxCount = v.intValue();
                    maxIndex = v;
                } else if (v.intValue() == maxCount) {
                    maxCount = v.intValue();
                    maxIndex = v;
                }
            }
        }
        return maxIndex;
    }

    
    public static int search_Problem_5_94c5cfcf_ba1a_41ca_a2e7_b25e7d69d5d4(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxCount) {
                max = entry.getKey();
                maxCount = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_12_da9d04ff_1ffc_4227_bc6a_cd8b9f8dfde8(ArrayList<Integer> lst) {

        int result = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) >= i) {
                result = i;
                break;
            }
        }
        return result;
    }

    
    public static int search_Problem_6_e2a3bad5_006d_4fd7_a3b3_92c8170913d4(ArrayList<Integer> lst) {
        return lst.stream()
                .max(Comparator.comparingInteger(item -> item.intValue()))
                .orElse(-1);
    }

    
    public static int search_Problem_15_cbf5aea6_8383_499e_a544_173a321eb506(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (int i = 0; i < lst.size(); i++) {
            int freq = 0;
            for (int j = 0; j < lst.size(); j++) {
                if (lst.get(i) == lst.get(j)) {
                    freq++;
                }
            }
            if (freq > maxFreq) {
                maxFreq = freq;
                max = lst.get(i);
            }
        }
        return max;
    }

    
    public static int search_Problem_18_94aca11d_a42f_431d_a2be_d853de76215d(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_15_770cf412_3586_4284_84d2_7f9b77ace601(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxFreq = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxFreq) {
                max = l;
                maxFreq = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_8_2d386dcc_4ac9_4f9c_91b1_47f8240ed7a9(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_2f0dc20f_3e68_42f8_b86c_ffced68db765(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_17_c44b5dc4_ad4b_4230_ac68_a4b56f43f8d7(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_21_ba93473d_544a_4d69_87af_69d1a9f7f9cb(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_14_56e4132f_3c41_4286_bf8a_2fe3f4cddd95(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                max = Math.max(max, entry.getKey());
            }
        }
        return max;
    }

    
    public static int search_Problem_12_52f7c056_7c82_48b0_b85a_620b4a06e1e7(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_2ff1c5cb_53fa_418a_9d36_0392ef6a6cae(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            int freq = lst.stream().filter(j -> j == i).count();
            if (freq >= maxFreq) {
                max = i;
                maxFreq = freq;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_4f035a71_2fb6_4287_9075_16a110eb9a6e(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int max_freq = 0;
        int curr_freq = 0;
        int curr = 0;
        for (int i = 0; i < lst.size(); i++) {
            curr = lst.get(i);
            curr_freq = 0;
            for (int j = 0; j < lst.size(); j++) {
                if (lst.get(j) == curr) {
                    curr_freq++;
                }
            }
            if (curr_freq > max_freq) {
                max_freq = curr_freq;
                max = curr;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_06b59eaf_f7d5_475a_b612_76509db662f1(ArrayList<Integer> lst) {
        // Create an array to hold frequencies of each integer
        int[] freq = new int[ lst.size()];
        int count = 0;

        // Iterate through each element in array and find frequency and increment by 1
        for (int l : lst) {
            freq[ l] = ++count;
        }

        // Now iterate through frequency array and find greatest frequency
        int result = Integer.MIN_VALUE;
        for (int i = 0; i < freq.length; i++) {
            if (freq[i] > result) {
                result = freq[i];
            }
        }
        return result < 0 ? -1 : result;
    }

    
    public static int search_Problem_17_23c11b38_721e_4ceb_88c0_448d8c1ece27(ArrayList<Integer> lst) {

        // Write your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int l : lst) {
            if(map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for(int l : map.keySet()) {
            if(l > max && map.get(l) >= l) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_2ff1c5cb_53fa_418a_9d36_0392ef6a6cae(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            int freq = lst.stream().filter(j -> j == i).count();
            if (freq >= maxFreq) {
                max = i;
                maxFreq = freq;
            }
        }
        return max;
    }

    
    public static int search_Problem_8_41912114_448d_4efd_898f_5af1f815e85f(ArrayList<Integer> lst) {

        int max = -1;
        int maxCount = 0;
        for (int i : lst) {
            int count = Collections.frequency(lst, i);
            if (i > max && count >= i) {
                max = i;
                maxCount = count;
            }
        }
        return maxCount >= max ? max : -1;
    }

    
    public static int search_Problem_13_9d19affd_f562_4c99_bd6b_aa43ff22cd58(ArrayList<Integer> lst) {
        if (lst.size() == 0) {
            return -1;
        }
        Collections.sort(lst);
        int result = lst.get(0);
        int max = lst.get(0);
        for (int i : lst) {
            if (i > max) {
                max = i;
                result = i;
            } else if (i > result) {
                result = i;
            }
        }
        return result;
    }

    
    public static int search_Problem_2_1a6e864e_b77d_4df5_8239_9e555a36b998(ArrayList<Integer> lst) {

        // Your code here
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i > max) {
                int count = 0;
                for (int j : lst) {
                    if (j == i) {
                        count++;
                    }
                }
                if (count >= i) {
                    return i;
                }
            }
        }
        return -1;
    }

    
    public static int search_Problem_24_f7998e71_317b_452d_871a_99ace61717ce(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i : lst) {
            if(map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            }
            else {
                map.put(i, 1);
            }
        }
        int max = -1;
        for(int i : map.keySet()) {
            if(map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_e2ad134d_7a16_45ee_bed0_b39a3642e191(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_21_d44a7008_596e_42f0_a8aa_5db9fc59593a(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxKey = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (maxKey > 0) {
            return maxKey;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_16_6cc5f290_3007_465c_883a_80feac3900b6(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == -1) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_8_1a3be9ba_44a0_4a67_8fab_1c4ba2360e24(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l,  1);
            }
        }
        Integer max = Collections.max(map.keySet());
        if (map.get(max) >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_7_89fb8076_d99b_4ae5_81ec_509e08d9a777(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_24_73664696_3f2e_4032_9acd_3d66865fb09a(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            map.put(i, map.getOrDefault(i, 0L) + 1);
        }
        for (int i = lst.size(); i > 0; i--) {
            if (map.getOrDefault(i, 0L) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_15_341de019_4f00_4478_b0bd_1911abc4b998(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq++;
            if(freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_6_48dbb2ca_df98_461f_8817_aadf6564751c(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_12081ec7_ea74_4416_99d9_20288b05a825(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_3_66c61072_b573_4077_9089_0cc66944a073(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxKey = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (maxKey > 0) {
            return maxKey;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_14_b4c8435f_5714_4241_a2ba_bd2165fd6839(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_18_a280d769_5bb8_4031_8d73_549289345510(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        Integer max = freq.keySet().stream().max(Comparator.comparing(freq::get)).get();
        if (freq.get(max) >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_3_c87d175a_b038_45bd_a52a_c667a2530759(ArrayList<Integer> lst) {

        int max = 0;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_19_a50b11b3_466b_42f0_811d_554e19aee8ce(ArrayList<Integer> lst) {

        // Sort the list in descending order
        Collections.sort(lst, Collections.reverseOrder());

        // Iterate through the sorted list
        for (int num : lst) {
            // Check if the frequency of the current number is greater than or equal to the number itself
            if (Collections.frequency(lst, num) >= num) {
                return num;
            }
        }

        // If no such number exists, return -1
        return -1;
    }

    
    public static int search_Problem_0_98770eb3_7c2a_4828_9969_7d2cd7e09286(ArrayList<Integer> lst) {
        int mostFrequent = -1;
        for (int l : lst) {
            int frequency = lst.stream().filter(x -> x == l).count();
            if (frequency >= mostFrequent) {
                mostFrequent = l;
            } else if (frequency < mostFrequent) {
                return -1;
            }
        }
        return mostFrequent;
    }

    
    public static int search_Problem_23_ee846170_4308_42c2_8091_d199abe733d3(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_53e384db_a8a8_4e20_afed_2f0f70a452c8(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        int currFreq = 0;
        int curr = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                currFreq = 1;
            } else if (l == max) {
                currFreq++;
            }
            if (currFreq > maxFreq) {
                maxFreq = currFreq;
                curr = max;
            }
        }
        return curr;
    }

    
    public static int search_Problem_0_6bc78077_bfe1_4592_b06e_4f9c92a6af06(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_3_f84d0b1c_409c_4972_af91_44b5946247a2(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_3_53e25d72_6df1_408a_87f9_6da0fd58b7f6(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_6f20ffa2_c6bb_4b6e_bb19_ae5f09986472(ArrayList<Integer> lst) {
        int max = 0;
        Map<Integer, Integer> freqs = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (freqs.get(i) == null) {
                freqs.put(i, 1);
            } else {
                freqs.put(i, freqs.get(i) + 1);
            }
        }
        for (Map.Entry<Integer, Integer> e : freqs.entrySet()) {
            if (e.getValue() >= max) {
                max = e.getValue();
            }
        }
        return max == 0 ? -1 :  max;
    }

    
    public static int search_Problem_17_e39f3662_998c_4232_a338_1769da571e6e(ArrayList<Integer> lst) {
        int max = 0;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
        }
        if (count < lst.size()) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_24_16d2ff36_bf2d_4fae_b90d_499157d738b7(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1 || freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_9528fbfe_2a10_4272_a5e4_16cfce075fe1(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_bdf3839e_70ad_4dbd_aed8_38ddb4285789(ArrayList<Integer> lst) {
        int max = 0;
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int ele : lst) {
            Integer freq = map.get(ele);
            if (freq != null) {
                if (freq > max) {
                    max = freq;
                }
            } else {
                map.put(ele, new Integer(1));
            }
        }
        if (map.containsKey(0)) {
            map.put(0, new Integer(1));
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
            }
        }
        if (max < 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_10_7677010a_9bbf_4bf3_b5ad_53cfec0b8420(ArrayList<Integer> lst) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1L);
            }
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (i <= map.get(i) && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_8_c155018f_fa82_4957_a34a_5c5b2ba9850a(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_6e31d389_16dc_4ce6_8ca2_98ac556db54c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_10_ad78801a_5dde_4330_98be_bb11b74ec049(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (!map.containsKey(l)) {
                map.put(l, 1);
            } else {
                map.put(l, map.get(l) + 1);
            }
        }
        int max = 0;
        int res = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                res = l;
            }
        }
        return res;
    }

    
    public static int search_Problem_13_3a0a9e9e_9ba3_4905_bfc4_53f9d2c3df84(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (int l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_11_fae87fdf_e03d_43b2_bc85_48a054a4ea1f(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq == i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq > i && maxVal == i) {
                maxFreq = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_21_2c29fe97_cbe4_48a8_be3e_65d44dd2f558(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_d9347604_7ae9_4699_a95b_5e3d35df81d8(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int max_freq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                max_freq = 1;
            } else if (l == max) {
                max_freq++;
            }
        }
        if (max_freq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_8_bd36282c_4ea7_4045_8098_f8537fd72fe5(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i = lst.size(); i > 0; i--) {
            if (map.containsKey(i) && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_11_c4a9cbf7_74e6_435b_b3ba_5d63cdc1453c(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = 0;
        for (int i : lst) {
            int freq = lst.stream().filter(j -> j == i).count();
            if (freq >= maxFreq) {
                max = i;
                maxFreq = freq;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_caaac0b7_6203_49ec_84c7_d5fa2370acc9(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_4_93e505ab_763c_4367_b7e8_4971673ba635(ArrayList<Integer> lst) {
        int max = lst.stream().filter(e -> e > 0).max(Integer::compareTo).get();
        int maxCount = 0;
        for (int e : lst) {
            if (e > 0 && e > max) max = e;
            ++maxCount;
        }
        return max > 0 ? max : -1;
    }

    
    public static int search_Problem_0_7233ff05_37f5_42c5_be36_bfee0295efdf(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_9_764d7356_6adf_4f0c_ab90_498c24c6df0f(ArrayList<Integer> lst) {
        int max = -1;
        int freq = 0;
        for (int i : lst) {
            freq += i;
            if (freq > max) {
                max = freq;
            }
        }
        return max;

    }

    
    public static int search_Problem_5_67e003ed_8729_4d34_bfad_41aebec85b4a(ArrayList<Integer> lst) {

        // Your code here
        int max = -1;
        for (int i : lst) {
            if (i > max && Collections.frequency(lst, i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_70053ea5_c371_4d21_a8d3_7f1d0c4fd4d4(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq >= maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_1_b79abc39_c36a_40d5_96b8_35ecd4b18bea(ArrayList<Integer> lst) {
        int max = -1;
        int freq = 0;
        for (int i : lst) {
            freq += i;
            if (freq > max) {
                max = freq;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_8548a2a2_1e5a_49d1_bf60_691e7ec64705(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_6_4191c3bf_a25c_4840_826c_0655c2572fe4(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        int freq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                freq++;
            }
            if (freq > max_freq) {
                max_freq = freq;
            }
        }
        if (max_freq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_24_c94db12a_23e1_4ddd_b6bd_ae2a0fe2db14(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxCount = 0;
        for (int val : lst) {
            int count = Collections.frequency(lst, val);
            if (count > maxCount) {
                maxCount = count;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_17_4e6eba07_392e_4e3e_aec0_886279fdd256(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                if (maxVal < 0 || maxVal > val) {
                    maxVal = val;
                    maxFreq = val;
                }
                else {
                    maxFreq++;
                }
            }
        }
        return maxFreq > maxVal ? maxVal : -1;

    }

    
    public static int search_Problem_19_2f614d3c_e852_4600_821f_3df555fe65c5(ArrayList<Integer> lst) {
        int maxVal = lst.get(0);
        for (int i = 0; i < lst.size(); ++i) {
            if (lst.get(i) >= maxVal) {
                maxVal = lst.get(i);
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_23_8eca8166_4da2_4870_a3fb_d0ebcb04232f(ArrayList<Integer> lst) {
        Map<Integer, Integer> map = new TreeMap<>();
        for (Integer i : lst) {
            map.put(i, map.getOrDefault(i, 0L) + 1);
        }
        int greatest = Integer.MIN_VALUE;
        int currMaxFreq = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (currMaxFreq < entry.getValue()) {
                currMaxFreq = entry.getValue();
                greatest = entry.getKey();
            }
        }
        return greatest;
    }

    
    public static int search_Problem_23_54b16812_6b4e_4dcf_a9f5_bc0f6e027738(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_20_7600ca3c_a2c2_4f63_8b3f_d1d675a8a61e(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_14_46353ace_b544_4908_9e10_eafbf10af0c8(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (int l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_9_c4c6af8e_3dcb_436d_b32a_b0a995bcfe2a(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                max_freq = Collections.frequency(lst, i);
            }
        }
        if (max_freq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_16_eedb0bf0_8312_4959_97f0_1f9d9b01ba99(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max && Collections.frequency(lst, i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_14600785_4c49_4232_acd1_e1e418227e28(ArrayList<Integer> lst) {

        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : freq.keySet()) {
            if (freq.get(l) > max) {
                max = freq.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_18_3e145535_1c77_4f29_8812_4e8b48462b91(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_910d2de5_22fe_4b1c_b9ef_317e08fb524d(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1L);
            }
        }
        Integer max = -1L;
        for (Integer l : map.keySet()) {
            if (l > 0 && map.get(l) >= l) {
                max = l;
                break;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_c2f8dc3a_3c9a_40f5_9ea3_e0742192c0e8(ArrayList<Integer> lst) {
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? -1 : max;
    }

    
    public static int search_Problem_8_e2d66cb1_f756_4277_aa82_10aa4a3e1ac7(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq >= maxFreq) {
                maxFreq = freq;
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_2_717dc596_1050_497f_a39a_4aab77b5555c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int i : lst) {
            if(i == 0) {
                continue;
            }
            int freq = Collections.frequency(lst, i);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_10_8548a2a2_1e5a_49d1_bf60_691e7ec64705(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_21_8b44da3b_143c_4ac6_9557_817833127ac0(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_d64f5498_9be5_49c4_b9cb_42e9cdf9cb16(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && i > max) {
                max = i;
                maxFreq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_10_4254be1d_6589_40e3_a9a0_1772474cb79a(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_dc7acd40_8182_4bc2_9ca8_d6779a0ee2bf(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_47fb9e3c_2c95_4f94_892c_29b74be492e8(ArrayList<Integer> lst) {

        int max = -1;
        for(int i = 0; i < lst.size(); i++) {
            if(lst.get(i) > max && lst.get(i) >= lst.get(i)) {
                max = lst.get(i);
            }
        }
        return max;
    }

    
    public static int search_Problem_11_2599f995_7cb0_4143_a382_faf502e23f10(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxCount = 1;
            } else if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_5_d6961b00_c64b_462d_a118_5255b105b2f1(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int res = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                res = l;
            }
        }
        return res;
    }

    
    public static int search_Problem_5_2e93e5a3_1734_4ad7_b875_ea461684de26(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (int num : lst) {
            map.put(num, map.getOrDefault(num, 0L) + 1);
        }
        for (int key : map.keySet()) {
            if (map.get(key) >= key) {
                return key;
            }
        }
        return -1;
    }

    
    public static int search_Problem_0_61a58b3c_f392_4f94_b534_9593d49ed8d9(ArrayList<Integer> lst) {

        // your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                max = Math.max(max, entry.getKey());
            }
        }
        return max;
    }

    
    public static int search_Problem_8_2a04be34_387d_46ee_8621_644f439d461e(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            if (freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_12_3d553226_340e_43b5_bb76_5dc107e7af12(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_20_97bcc9e3_8a29_476d_8a32_d73c5825b42e(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_b5174484_455a_495d_9c18_7b57ba60cc63(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > max_freq) {
                max = i;
                max_freq = freq;
            }
        }
        if (max_freq > 0 && max > 0 && max_freq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_1_fc77c553_d162_4b59_b200_289093e2a6f2(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_25b96883_9686_411f_9192_dd5286b25529(ArrayList<Integer> lst) {

        int result = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i : lst) {
            if (map.get(i) >= i) {
                result = i;
                break;
            }
        }
        return result;
    }

    
    public static int search_Problem_14_a098d62a_a553_4ade_9a75_79535ff3a62b(ArrayList<Integer> lst) {

        // write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : lst) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_12_20ed5ec9_c048_41b1_abc7_5b9b76dcb511(ArrayList<Integer> lst) {
        int n = lst.size();
        
        Collections.sort(lst);
        
        if (n > 1) { // if there is at least 2 or more occurrences we need to return -1
            
            int freq = 1;
            int max;
            
            for (int i = 1; i < n; i++) {
                if (lst.get(i) - lst.get(i-1) > 0) {
                    freq++;
                } else {
                    break;
                }
            }
            
            if (freq > lst.get(0) && freq >= n) {
                max = lst.get(0);
            } else {
                max = -1;
            }
            
            for (int i = 0; i < n; i++) {
                if (lst.get(i) == freq) {
                    max = lst.get(i);
                    break;
                }
                if (lst.get(i) > freq) {
                    max = lst.get(i);
                }
            }
            
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_24_16381637_254d_4bb2_b2a9_d5276be51122(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (maxFreq < val && val > 0) {
                maxFreq = val;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_14_736ea214_2690_4314_8172_0156d2213870(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_21_511dc3aa_22a9_4d3b_97d0_11438559129a(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_24_09352cce_7fd8_40aa_a713_e15252c07b05(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_e1aa36e8_b670_467d_8ba1_abbfab213111(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxCount) {
                max = entry.getKey();
                maxCount = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_24_6166374f_0430_42be_8de4_21499d083c6a(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_745a129d_4116_42cb_be7c_705ade38b03b(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            int count = Collections.frequency(lst, i);
            if (count > maxCount) {
                maxCount = count;
                max = i;
            }
        }
        return maxCount >= max ? max : -1;
    }

    
    public static int search_Problem_10_7135436b_b56f_4caa_ab64_f95e389e0db0(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int max_count = 0;
        for (int i = 0; i < lst.size(); i++) {
            int count = 0;
            for (int j = 0; j < lst.size(); j++) {
                if (lst.get(j) == lst.get(i)) {
                    count++;
                }
            }
            if (count > max_count) {
                max = lst.get(i);
                max_count = count;
            }
        }
        if (max_count == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_21_762a2052_4b97_4282_a2de_ed61fa512e8a(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_e7528919_2003_4faa_a52b_6553cd7b2634(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > maxFreq) {
                max = i;
                maxFreq = freq;
            }
        }
        if (maxFreq < max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_9_ce2059a7_d0d9_443b_9c01_61718e3828e1(ArrayList<Integer> lst) {

        // Your code here
        int max = 0;
        int maxFreq = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) > maxFreq) {
                maxFreq = map.get(i);
                max = i;
            }
        }
        return maxFreq >= max ? max : -1;
    }

    
    public static int search_Problem_11_354ecf8d_4879_4b4f_8d71_3add97b6560c(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxCount = 1;
            } else if (i == max) {
                maxCount++;
            }
        }
        if (maxCount < max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_12_c0cdea2e_2c78_4088_bf35_adb09df5421b(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_59a441f8_50e6_4041_bf26_4f6157dca69d(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for(int i : lst) {
            if(i > max) {
                max = i;
            }
            if(lst.stream().filter(x -> x == i).count() > maxFreq) {
                maxFreq = lst.stream().filter(x -> x == i).count();
            }
        }
        if(maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_5_98bfe3ed_f3ce_47d1_8bea_af7d7e64762f(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
            if (map.get(i) > maxFreq) {
                maxFreq = map.get(i);
                max = i;
            }
        }
        if (maxFreq > 1) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_23_ad10a305_a151_4a6d_bafa_bed9770c0ce2(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        int max = 0;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_0fd17178_d231_4663_be0f_ad430a6735f2(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l,  1);
            }
        }
        for (Integer l : lst) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_12_668e2531_7fc0_4f69_b0b7_5bafec63be61(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && max < i) {
                max = i;
                maxFreq = i;
            } else if (maxFreq == i) {
                maxFreq++;
            }
        }
        return max;

    }

    
    public static int search_Problem_19_299d5e51_4166_4b36_a624_0648594a9de1(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_17_6db59539_cc6e_404b_8c07_7dff820f79e0(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (max < 0 || maxFreq < 0 || i < 0 || i > max) {
                max = i;
                maxFreq = 1;
            } else if (maxFreq < i) {
                max = i;
                maxFreq = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_11_f5009f9f_8ec1_41f2_89eb_d2baebc6b0ec(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i = max; i > 0; i--) {
            int count = 0;
            for (int j : lst) {
                if (j == i) {
                    count++;
                }
            }
            if (count >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_16_dac20943_7cfb_4ff8_9b9d_b17254438c6a(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = Collections.frequency(lst, i);
            } else if (i == max) {
                maxFreq = Math.max(maxFreq, Collections.frequency(lst, i));
            }
        }
        return maxFreq >= max ? max : -1;
    }

    
    public static int search_Problem_9_2a302c69_6936_40c8_a52a_59baf7d5a8ec(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer i : lst) {
            if (i > max) {
                max = i;
            }
            if (lst.stream().filter(j -> j == i).count() > maxFreq) {
                maxFreq = lst.stream().filter(j -> j == i).count();
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_21_7233ff05_37f5_42c5_be36_bfee0295efdf(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_16_b71e261f_c776_4411_a685_746f0de9c888(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_e4a76ebd_591a_4426_a989_8be0b61b4a19(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_6_f3087897_ba24_4b48_af4e_63805b442ee4(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            if (freq.containsKey(l)) {
                freq.put(l, freq.get(l) + 1);
            } else {
                freq.put(l, 1);
            }
        }
        Integer max = freq.keySet().stream().max(Comparator.comparing(freq::get)).get();
        if (freq.get(max) >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_19_85596af9_9c1a_4750_8eb3_6c8f41564c40(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            }
        }
        return maxFreq;

    }

    
    public static int search_Problem_10_12081ec7_ea74_4416_99d9_20288b05a825(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_18_6765c7db_3177_4975_a7a0_392dcf257d1c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_16_711f4351_c248_412a_a2c3_aa186b45f8ad(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > max_freq) {
                max_freq = freq;
                max = i;
            }
        }
        if (max_freq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_19_c9b94f5e_1c41_4254_9925_eeeaf62e67d2(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == -1) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_16_7119f969_498e_4cfe_8141_17c82fec86e1(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_715119f4_fedc_452e_ae06_7484ede18335(ArrayList<Integer> lst) {
        int retVal = -1;
        for (int l : lst) {
            int f = Collections.frequency(lst, l);
            if (f > 0 && f >= retVal) {
                retVal = l;
            }
        }
        return retVal;
    }

    
    public static int search_Problem_17_2ca09ad9_5ad0_43fa_8c36_3fa1b0d12fef(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int max_count = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max_count) {
                max_count = entry.getValue();
                max = entry.getKey();
            }
        }
        if (max_count < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_3_780b7289_75d6_46cb_8921_cf7353c10850(ArrayList<Integer> lst) {

        // Your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_1_71964a8a_e9f4_4e7c_bdd2_0e9d980a0f0f(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int maxCount = 0;
        for (int i : lst) {
            if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_13_24fa5aa5_b2b3_4381_b653_f344fdc9f3f6(ArrayList<Integer> lst) {
        Map<Integer, Integer> map = new TreeMap<>();
        lst.stream().forEach(e -> map.put(new Integer(e), map.getOrDefault(new Integer(e), 0) + 1));
        boolean exists = False;
        for (Integer e : map.keySet()) {
            if (map.get(e) >= map.get(new Integer(e))) {
                exists = True;
                return e;
            }
        }
        if (exists) {
            return -1;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_12_354ecf8d_4879_4b4f_8d71_3add97b6560c(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxCount = 1;
            } else if (i == max) {
                maxCount++;
            }
        }
        if (maxCount < max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_18_b14887cd_3c83_4345_8b49_46a294d0bc5a(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
            if (count > maxCount) {
                maxCount = count;
            }
        }
        if (maxCount >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_15_256d22df_0c9f_4262_85be_ca79310258aa(ArrayList<Integer> lst) {

        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_0eda4a74_83e7_4ce2_9dc9_7aab7dfc1ab6(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_16c89da2_7185_424f_8dd3_37721556e448(ArrayList<Integer> lst) {

        // Write your code here.
        // return -1;
        return lst.stream().max(Comparator.comparing(x -> x, Comparator.reverseOrder())).get();
    }

    
    public static int search_Problem_3_8410dcc2_28c2_4cb0_83bb_56fa2e6e05ac(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq == -1 || maxFreq < i) {
                maxFreq = i;
                maxVal = i;
            } else if (maxFreq == i) {
                maxFreq++;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_10_8c564e2d_e634_46d3_a615_39fc5e4b5c14(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        for (Integer l : lst) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_22_fda6416f_ba62_46fa_9dce_b0a779f4ff86(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_7_88e50df2_32d5_4664_97b1_89118495e0bf(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for(Integer l : lst) {
            if(map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for(Integer l : map.keySet()) {
            if(map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_6_5809281c_5d91_4c87_87ab_d522ba103fdd(ArrayList<Integer> lst) {

        int max = 0;
        int freq = 0;
        int freqMax = 0;
        for (Integer x : lst) {
            if (x > max) {
                freqMax = freq;
                max = x;
            }
            freq++;
        }
        if (freqMax >= freq) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_20_1c21a877_0aa5_43f5_bae9_6b5d10c857fe(ArrayList<Integer> lst) {

        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                max = entry.getKey();
            }
        }
        return max;
    }

    
    public static int search_Problem_16_8c8f3e4a_373c_4cbf_9b74_69d6b008bbb6(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_53b28bef_a8f2_4527_ab4d_8eb1c3b8b4cf(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
            if (map.get(i) > maxFreq) {
                maxFreq = map.get(i);
                max = i;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_14_fbcca621_2f12_41de_b783_e88bd2e442c6(ArrayList<Integer> lst) {

        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : freq.keySet()) {
            if (freq.get(l) > max) {
                max = freq.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_11_5a032a42_4a1c_4dd8_8636_2e415726163c(ArrayList<Integer> lst) {

        // Write your code here.
        if (lst.size() == 0) return -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) == max) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_14_040d945a_b0fc_40b8_8f9a_acdf6a3d6eab(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream()
                .filter(e -> e.getValue() > e.getKey())
                .max(Comparator.comparing(Map.Entry::getKey))
                .map(Map.Entry::getKey)
                .orElse(-1);
    }

    
    public static int search_Problem_19_52f7c056_7c82_48b0_b85a_620b4a06e1e7(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_1a3be9ba_44a0_4a67_8fab_1c4ba2360e24(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l,  1);
            }
        }
        Integer max = Collections.max(map.keySet());
        if (map.get(max) >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_24_ad571352_2353_415a_9c1f_511eea418187(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (int i : lst) {
            freq.put(i, freq.getOrDefault(i, 0) + 1);
        }
        int max = 0;
        int max_key = 0;
        for (Map.Entry<Integer, Integer> entry : freq.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                max_key = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        }
        return max_key;
    }

    
    public static int search_Problem_6_f7998e71_317b_452d_871a_99ace61717ce(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i : lst) {
            if(map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            }
            else {
                map.put(i, 1);
            }
        }
        int max = -1;
        for(int i : map.keySet()) {
            if(map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_9_f56c86b4_0e85_4370_93bf_f52786f6c000(ArrayList<Integer> lst) {

        int max = -1;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_0_dc2bc2a5_5125_4c8d_bbca_0ec45772525f(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > maxFreq) {
                maxFreq = freq;
                max = i;
            }
        }
        return maxFreq >= max ? max : -1;
    }

    
    public static int search_Problem_3_8ae1e2dd_99cb_41a9_a70b_53fe862d7c84(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_16_0cf73034_0194_4606_967f_b4c030af213f(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_3_8d5ccef5_0a87_4e3d_b458_c901f3828dd1(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_18_b85a39c4_621c_49fd_9693_72f4a3a9051b(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                max_freq = 1;
            } else if (l == max) {
                max_freq++;
            }
        }
        if (max_freq == 0) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_23_dfcfab40_cfcd_46f1_b3b9_c6a4c8ab596f(ArrayList<Integer> lst) {

        // Write your code here
        return -1;
    }

    
    public static int search_Problem_9_0fd17178_d231_4663_be0f_ad430a6735f2(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l,  1);
            }
        }
        for (Integer l : lst) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_10_91e81e14_9184_427b_b595_8cc448bad5f8(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        Integer max = freq.keySet().stream().max(Comparator.comparing(freq::get)).get();
        if (freq.get(max) >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_24_7b3f0568_b2d1_442f_a042_ae5539a9a2a9(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_7_bfa4ec1d_899d_4b2e_a5ec_9a5c43379f8c(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : freq.keySet()) {
            if (freq.get(l) > max) {
                max = freq.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_20_9a226586_8b69_4e7c_a963_61a23b0f6092(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxCount) {
                maxCount = map.get(l);
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_36b15343_3217_4f13_a6c6_820a6a561a68(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_5_2fa63e9c_ec1a_4e10_b016_bb0bdf5e5332(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (int l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxKey = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (maxKey > 0) {
            return maxKey;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_5_b8d98c6c_f366_4331_b9d7_e5aee0966a87(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == -1) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_14_16b4ab67_b2a9_4362_a42e_4b6c2854f0fa(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > maxFreq) {
                max = i;
                maxFreq = freq;
            }
        }
        return max;

    }

    
    public static int search_Problem_15_b79f9cfb_2f4d_4f86_b223_453157682b01(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_2_16c89da2_7185_424f_8dd3_37721556e448(ArrayList<Integer> lst) {

        // Write your code here.
        // return -1;
        return lst.stream().max(Comparator.comparing(x -> x, Comparator.reverseOrder())).get();
    }

    
    public static int search_Problem_13_8c564e2d_e634_46d3_a615_39fc5e4b5c14(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        for (Integer l : lst) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_7_b3dcaee2_f724_43ee_b51e_3512c16eef53(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_17_53e25d72_6df1_408a_87f9_6da0fd58b7f6(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_89187a83_3522_45dd_9dd1_032b0537147c(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_23_9c1866ff_a5b9_45b0_89f3_8c175684d82e(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_11_4b5de19e_b19c_401e_8b4a_529de437bb34(ArrayList<Integer> lst) {
        // Complete the function here
        int res = -1;
        for (int num : lst) {
            if (num >= 0) {
                int count = lst.stream().filter(a -> a == num).count();
                if (count > res) {
                    res = num;
                }
            }
        }
        return res;
    }

    
    public static int search_Problem_22_2785d7f6_7671_4320_888d_ca98d7cdc09a(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : lst) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_4_5b0be0c6_7a6a_4f01_ad05_9bcf756c5e97(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? max : -1;
    }

    
    public static int search_Problem_21_2a04be34_387d_46ee_8621_644f439d461e(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            if (freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_9_b2c715bc_b0ad_47ae_956b_20bf9af1a071(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_9_7679f6a5_cb5e_4cfe_ad77_2ef6b274fa98(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_12_629abe9b_b619_47ed_afb3_447c2cb1e3ea(ArrayList<Integer> lst) {

        int max = 0;
        int max_count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                max_count++;
            }
        }
        if (max_count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_4_5491e7c6_32c4_477e_b413_e2f68d0c0e9c(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            map.put(i, map.getOrDefault(i, 0L) + 1);
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_3_c2921377_348a_4770_ac1a_875547fa11a0(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_16d2ff36_bf2d_4fae_b90d_499157d738b7(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1 || freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_a480b873_3bf9_4c72_a871_1305d1b1bd90(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_6_f7939473_4d73_4065_bbe6_b70b5b23a22e(ArrayList<Integer> lst) {

        int max = -1;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_24_1a629829_e4f4_400f_b412_b3d43d8cc4b2(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max == 0 ? -1 : max;
    }

    
    public static int search_Problem_12_d00cab0c_c8e5_4b77_8929_7e23f77f18e6(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        int max = 0;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_24_1428075a_512d_4b2e_b0e7_963a84f1cfec(ArrayList<Integer> lst) {

        // Your code here
        Map<Integer, Integer> map = new HashMap<>();
        for(Integer i : lst){
            if(map.containsKey(i)){
                map.put(i, map.get(i)+1);
            }
            else{
                map.put(i, 1);
            }
        }
        int max = Integer.MIN_VALUE;
        int maxKey = Integer.MIN_VALUE;
        for(Integer i : map.keySet()){
            if(map.get(i) > max){
                max = map.get(i);
                maxKey = i;
            }
        }
        if(maxKey == Integer.MIN_VALUE){
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_12_61536c47_e787_4ec0_ba39_9e7dd091652c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int i : lst) {
            if(i>0) {
                int freq = Collections.frequency(lst, i);
                if(freq>maxFreq) {
                    maxFreq = freq;
                    maxVal = i;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_6_082237b1_df40_428a_93c7_cab6c457b0c4(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        int max = 0;
        for (int i : lst) {
            if (map.get(i) > i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_0b05cc89_e346_4a9b_9b03_7142fcf49fdd(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x, Comparator.reverseOrder())).get();
    }

    
    public static int search_Problem_16_8d938d12_2bce_456a_bb29_3a7567ced22b(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_12_8d5c0bbb_ab00_42c8_8322_256eb6f71fbd(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int res = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                res = l;
            }
        }
        return res;
    }

    
    public static int search_Problem_9_2ae54e21_ba61_4cc7_8268_91dea604f21d(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int maxCount = 0;
        for (int i : lst) {
            if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_13_dab9a6fb_f59b_4bdc_9e57_d09da6935045(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_92270013_e717_4770_ab31_6466abbc39d2(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_5_ba23e33b_d6d3_4016_938d_f8faa6582f93(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (lst.stream().filter(x -> x == i).count() > maxFreq) {
                maxFreq = lst.stream().filter(x -> x == i).count();
                max = i;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_15_d659f39c_3515_446a_9f0c_821823a200c3(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            if (freq == 0 || freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_9_21d52cb1_0804_4f0c_8ccc_fab82aa80fec(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_16_e47f8fb2_1b80_499e_bdd5_eaa88ee7013a(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            }
        }
        return maxFreq > maxVal ? maxFreq : -1;

    }

    
    public static int search_Problem_20_c452ebd9_937e_4b2e_98e1_f68737417556(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_18_d3d05df5_34c3_4630_8a6e_822b20ece40b(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        int max = lst.get(0);
        int count = 1;
        for (int i = 1; i < lst.size(); i++) {
            if (lst.get(i) == max) {
                count++;
            } else if (lst.get(i) > max) {
                max = lst.get(i);
                count = 1;
            }
        }
        if (count >= max) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_19_7a46ab70_b76d_4341_ae65_848a6fb042f7(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_14_51a18a71_9c7c_4300_b9dc_130d32eaff76(ArrayList<Integer> lst) {

        // Write your code here.
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) == max) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_5_26ac39da_6cb9_464a_af24_a2edcf907444(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        for (int i : lst) {
            if (lst.stream().filter(x -> x == i).count() >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_477dc8ce_181c_494b_a11d_8facc9eacc21(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_16_46353ace_b544_4908_9e10_eafbf10af0c8(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (int l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_23_9e47b236_3907_4993_94f8_33e8a1a1b8a4(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_4a241e13_f2d7_4f98_bd40_24257933333a(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_10_8f6da157_fc0d_4a27_a67a_1314b5ed76f0(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq >= maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_11_ab2df2ec_7e19_49fe_a259_ea797419fa26(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq >= maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_18_0caae58c_d127_4ab8_b75f_abc7c26e5a52(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            } else if (val == maxVal && val > maxFreq) {
                maxFreq = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_10_56baaa71_8093_4ef3_ae80_83e3e388a438(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_0_3d553226_340e_43b5_bb76_5dc107e7af12(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_9_02197585_3353_400a_bf8c_863cd096e164(ArrayList<Integer> lst) {

        // Your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        int maxVal = 0;
        for (int i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxVal = i;
            }
        }
        if (maxVal > 0) {
            return maxVal;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_15_7679f6a5_cb5e_4cfe_ad77_2ef6b274fa98(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_3_41912114_448d_4efd_898f_5af1f815e85f(ArrayList<Integer> lst) {

        int max = -1;
        int maxCount = 0;
        for (int i : lst) {
            int count = Collections.frequency(lst, i);
            if (i > max && count >= i) {
                max = i;
                maxCount = count;
            }
        }
        return maxCount >= max ? max : -1;
    }

    
    public static int search_Problem_20_0e151b6d_169b_4938_9845_f503f1e62b1b(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_17_5e79698c_333c_4a00_b93b_9ef2a3a69fae(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxCount = 1;
            } else if (i == max) {
                maxCount++;
            }
        }
        for (int i : lst) {
            if (i == max && maxCount >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_13_3a117016_d28f_41d1_9dc5_8ab4eff7494e(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_0_c526b781_2b3c_42c6_bb44_5aa66178cbcc(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > maxFreq) {
                max = i;
                maxFreq = freq;
            }
        }
        if (maxFreq < max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_13_da9d04ff_1ffc_4227_bc6a_cd8b9f8dfde8(ArrayList<Integer> lst) {

        int result = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) >= i) {
                result = i;
                break;
            }
        }
        return result;
    }

    
    public static int search_Problem_6_7f72f684_8d04_4768_909c_3e6d6b1c0c54(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i = lst.size(); i > 0; i--) {
            if (map.containsKey(i) && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_12_c6dfa2f1_16ad_4bb5_807d_392cae09cec7(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        int maxVal = 0;
        for (Integer i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxVal = i;
            }
        }
        if (maxVal > 0) {
            return maxVal;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_19_ab6384b3_cdb8_42f1_b531_a2752076f8c4(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (Integer i : lst) {
            if (freq == 0 || freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_7_eba1562f_72e8_4738_b536_6779cef536c8(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_25876edf_2fe6_43cd_9680_e72e5c1d8599(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq == i) {
                maxFreq++;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_10_1efe6143_4ecc_4bce_a638_14b0252b8dcc(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = -1;
        int maxKey = -1;
        for (Integer i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxKey = i;
            }
        }
        if (maxKey == -1) {
            return -1;
        } else {
            return maxKey;
        }
    }

    
    public static int search_Problem_16_565a3fb0_c5ab_433a_952d_fc73e13149d3(ArrayList<Integer> lst) {
        int maxVal = lst.get(0);
        int maxFreq = lst.get(0);
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                maxFreq = val;
            } else if (val == maxVal) {
                maxFreq += val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_13_35bb5760_a94b_4bb2_b26f_2c01b3e1d760(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (i > max) {
                max = i;
            }
            if (freq > i) {
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_14_51a19348_3e22_4559_af38_f780fe18066d(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_3_c452ebd9_937e_4b2e_98e1_f68737417556(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_8_f058ba41_e5a0_4800_9b6e_ef0c19812839(ArrayList<Integer> lst) {
        return lst.stream().filter(i -> Collections.frequency(lst, i) >= i).max(Comparator.naturalOrder()).orElse(-1);
    }

    
    public static int search_Problem_17_9fd98f2f_8343_4bb2_917f_3fc201287b67(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq < max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_9_0b430c68_e358_4349_96ce_58d60529d961(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_b8c50d22_2592_4be7_8c73_74bce7841355(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_15_ee1f8dd3_3e0d_402d_981b_b84335ae5ded(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_14_bad7e597_6643_41a3_90d8_c5ad9170472f(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_16_225c38f8_d7ef_4736_93c3_24d79881f2d3(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0L) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) == max) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_7_1d1ff811_3a4f_43a5_819f_3023d6dd2755(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_511dc3aa_22a9_4d3b_97d0_11438559129a(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_22_f7998e71_317b_452d_871a_99ace61717ce(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i : lst) {
            if(map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            }
            else {
                map.put(i, 1);
            }
        }
        int max = -1;
        for(int i : map.keySet()) {
            if(map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_a4106e4c_1ff9_4565_9df9_49d9dd86c455(ArrayList<Integer> lst) {
        int freq = 0;
        ArrayList<Integer> newArr = new ArrayList<>();
        for (Integer i : lst) {
            if (i > 0) freq++;
            newArr.add(i);
        }
        if (freq == 0)
            return -1;
        else
            return newArr.get(newArr.size() - 1);
    }

    
    public static int search_Problem_16_fb5ec484_3b8b_481b_9836_42223dbe5c94(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_8_71d699aa_bc40_49c6_944a_b0743b876ac6(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_22_95fe7d72_5b98_4a2d_8a79_885f491b2be5(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_1_cc26bb8d_a824_4b9d_a1b5_ea4b29c0531d(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int i : lst) {
            if(i>0) {
                int freq = Collections.frequency(lst, i);
                if(freq>maxFreq) {
                    maxFreq = freq;
                    maxVal = i;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_6_57f615d0_4c53_42d4_a3f8_a814e4005db9(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        int max = 0;
        for (int i : map.keySet()) {
            if (i > 0 && map.get(i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_cbf5aea6_8383_499e_a544_173a321eb506(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (int i = 0; i < lst.size(); i++) {
            int freq = 0;
            for (int j = 0; j < lst.size(); j++) {
                if (lst.get(i) == lst.get(j)) {
                    freq++;
                }
            }
            if (freq > maxFreq) {
                maxFreq = freq;
                max = lst.get(i);
            }
        }
        return max;
    }

    
    public static int search_Problem_18_35e693d4_c689_45cb_85a2_5af26766ca5a(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int count = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                count = 1;
            } else if (l == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_23_a228bb3c_35d7_4556_9005_c63a201b0fe7(ArrayList<Integer> lst) {

        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_bad7e597_6643_41a3_90d8_c5ad9170472f(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_1_88e50df2_32d5_4664_97b1_89118495e0bf(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for(Integer l : lst) {
            if(map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for(Integer l : map.keySet()) {
            if(map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_19_134fdf93_a76e_4d33_9346_0091bd6132fa(ArrayList<Integer> lst) {

        // Create a map to store the frequency of each element
        Map<Integer, Integer> freqMap = new HashMap<>();
        for (int num : lst) {
            freqMap.put(num, freqMap.getOrDefault(num, 0L) + 1);
        }
        // Iterate through the map to find the greatest integer that satisfies the condition
        for (int num : freqMap.keySet()) {
            if (freqMap.get(num) >= num) {
                return num;
            }
        }
        // If no such integer exists, return -1
        return -1;
    }

    
    public static int search_Problem_2_c4c6af8e_3dcb_436d_b32a_b0a995bcfe2a(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                max_freq = Collections.frequency(lst, i);
            }
        }
        if (max_freq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_22_46353ace_b544_4908_9e10_eafbf10af0c8(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (int l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_3_cc30f95d_1381_4df1_b156_f6f71aaefb57(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_22_f0c2bec4_b033_48c0_99d7_eb8bc3d12b50(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int max_count = 0;
        for(int i : lst) {
            if(i > max) {
                max = i;
                max_count = 1;
            } else if(i == max) {
                max_count++;
            }
        }
        if(max_count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_11_32c4f775_3304_4c3c_8e8e_62c7ff8a9228(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : lst) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_16_8c564e2d_e634_46d3_a615_39fc5e4b5c14(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        for (Integer l : lst) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_23_db082a8c_19ad_4f49_8b59_53e53a8f2ce6(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_3_e47f8fb2_1b80_499e_bdd5_eaa88ee7013a(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            }
        }
        return maxFreq > maxVal ? maxFreq : -1;

    }

    
    public static int search_Problem_14_02197585_3353_400a_bf8c_863cd096e164(ArrayList<Integer> lst) {

        // Your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        int maxVal = 0;
        for (int i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxVal = i;
            }
        }
        if (maxVal > 0) {
            return maxVal;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_3_fcf44e66_d2b1_49ef_a59c_7ff506c9d5d5(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        int freq = 0;
        for (int l : lst) {
            if (l > max) {
                max = l;
                maxFreq = freq;
            }
            if (l == max) {
                maxFreq = Math.max(maxFreq, freq);
            }
            freq++;
        }
        return maxFreq == 0 ? -1 : max;
    }

    
    public static int search_Problem_1_2dff4d84_f0aa_471d_8877_8024d58d4241(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_2_bab97e06_2cc2_4b9d_95bf_331e4fbdd529(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_23_6b3d4312_dd5e_4239_a5d6_c352dad46557(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        int max = 0;
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_09f6ba3e_0a63_4c3e_a2f6_d5326f790682(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_8_65a521b4_c782_4ddb_b2a7_39519cbdc23b(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                max_freq = 1;
            } else if (i == max) {
                max_freq++;
            }
        }
        if (max_freq == 0) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_2_f35be621_bece_4853_baad_e0b1af1bb83b(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            if (freq < i) {
                freq = i;
                max = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_20_8de11e55_78e5_4199_93fc_479b27540c42(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > max) {
                max = lst.get(i);
                maxFreq = 1;
            } else if (lst.get(i) == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_4_c155018f_fa82_4957_a34a_5c5b2ba9850a(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_fdc75040_5df2_428f_ac6b_89011b0bca28(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_3_24c5dd80_8386_4ee1_9f6f_454049e7515f(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : freq.keySet()) {
            if (freq.get(l) > max) {
                max = freq.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_20_b3d5d24f_a7dd_4d6e_a2c3_ae058ab213ce(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_13_f66826c0_b307_4895_bd3a_49905d7ef8c9(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_21_97e87b77_709b_41b7_9f57_b5a0cd936b0f(ArrayList<Integer> lst) {

        if (lst.size() == 0) {
            return -1;
        }
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (int i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxKey = i;
            }
        }
        if (max == 1) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_22_96e6545a_c7ca_4b85_8e9d_88c70ab6b6f5(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).orElse(-1);
    }

    
    public static int search_Problem_6_f77b1e34_3bbb_4322_8a73_5d2b63878856(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        int maxKey = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                maxKey = l;
            }
        }
        return maxKey;
    }

    
    public static int search_Problem_14_53ff8c35_e836_4e04_a369_bd8fa29213b8(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (int l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().filter(e -> e.getValue() > e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_16_b768e1e9_f39e_4f14_8a71_2081ee4fcabb(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_367c1eaa_e59a_47d9_af52_a85bc171d08e(ArrayList<Integer> lst) {

        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_7_d360e37e_9163_4632_b0cd_c06c63dcc7d9(ArrayList<Integer> lst) {
        int n = lst.size();
        int max = 0;
        for (int l : lst) {
            int t = Collections.frequency(lst, l);
            if (max < t && t >= 0) {
                max = t;
            }
        }
        if (max == -1) {
            throw new RuntimeException("Empty List");
        }
        return max;
    }

    
    public static int search_Problem_7_e7e11b40_4fce_4700_893a_e9fd742e56f9(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_41e4c49c_1032_475d_8e45_74d98e9a71cb(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_9_f72a0a44_7297_4481_800e_ee6ce3a86eea(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (i > max) {
                max = i;
            }
            if (freq > i) {
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_3_f55cbb4e_8367_4db1_9ad2_451eb822e669(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_2f589fc6_ffd4_482f_9f55_63630e529816(ArrayList<Integer> lst) {
        int max = -1;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (freq > max) {
                max = freq;
            }
            if (freq == i) {
                freq++;
            }
        }
        return max;

    }

    
    public static int search_Problem_13_def8798f_0913_4535_9142_65226c86ba5c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_4_7420df8f_2a31_4167_bf05_badb6587b9a5(ArrayList<Integer> lst) {
        int maxVal = Integer.MIN_VALUE, maxFreq = Integer.MIN_VALUE;
        for (Integer val : lst) {
            if (val > maxVal) {
                maxVal = val;
            }
            if (val > maxFreq) {
                maxFreq = val;
            }
        }
        return maxVal > 0 ? maxVal : -1;
    }

    
    public static int search_Problem_14_89d04c64_ebc5_4f2d_9a94_82e2c53aed9e(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_10_9b835a56_29f7_47ad_84b4_913706bf910f(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1 || freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_dbb0591f_fbd3_457d_b7b1_5471fb3eb46f(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_74b7bb76_63f6_456d_9560_f10193f00ac7(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int max_freq = 0;
        int result = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
                max_freq = 1;
            } else if (i == max) {
                max_freq++;
            }
        }
        if (max_freq >= max) {
            result = max;
        }
        return result;
    }

    
    public static int search_Problem_18_f7939473_4d73_4065_bbe6_b70b5b23a22e(ArrayList<Integer> lst) {

        int max = -1;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_1_4881aa52_4483_49a4_8902_4e1b403db02c(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer num : lst) {
            map.put(num, map.getOrDefault(num, 0L) + 1);
        }
        for (int i = lst.size(); i > 0; i--) {
            if (map.getOrDefault(i, 0L) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_20_64bb5a71_f594_4231_b72b_f2acb008abe8(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq++;
            if(freq > max) {
                max = freq;
            }
            if(i == 0) {
                freq--;
            }
        }
        return max;

    }

    
    public static int search_Problem_2_6972ecf1_53fd_404e_817b_0416e98a2a8b(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i) {
                maxFreq = i;
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_21_fa76f9e5_baf8_4aa7_9825_f26a8973e5f4(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_1_a30e2ddc_8ca9_4bb3_aafc_37fb6c1416c9(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l,  1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > entry.getKey()) {
                return entry.getKey();
            }
        }
        return -1;
    }

    
    public static int search_Problem_18_287de844_87df_4d51_abaa_2c57adec9425(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq < i) {
                maxFreq = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_11_c98aa025_cbe3_4a8e_85ea_dae95b2133e3(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_5_7600ca3c_a2c2_4f63_8b3f_d1d675a8a61e(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_1_287de844_87df_4d51_abaa_2c57adec9425(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq < i) {
                maxFreq = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_21_1d1ff811_3a4f_43a5_819f_3023d6dd2755(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_e97844f4_ea8c_48db_879b_8ec179f2d772(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_11_d16fe193_2bac_48c5_b013_bdd4c58c3ca2(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_17_f3647ac3_dbfb_4884_9500_dc429d34210c(ArrayList<Integer> lst) {
        // Your code here
        return -1;
    }

    
    public static int search_Problem_8_86c7893c_f6f3_41a3_95e1_ceb030d1bcee(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int maxCount = -1;
        for (int i : lst) {
            int count = Collections.frequency(lst, i);
            if (count > maxCount) {
                max = i;
                maxCount = count;
            }
        }
        return max;
    }

    
    public static int search_Problem_11_d0c0aa67_6e55_46b5_89de_39afff21347b(ArrayList<Integer> lst) {

        // write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) == max) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_17_8d15e657_96dd_4267_92dc_983bd3ca9ca8(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1 || freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_21_b8b85adb_923a_49af_a4c1_863fc4dfd198(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_3_519e02d9_6e86_433f_893d_5849bee37c03(ArrayList<Integer> lst) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1L);
            }
        }
        for (Integer l : lst) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_6_8ba8e236_8895_4c97_90a7_112bad88532e(ArrayList<Integer> lst) {
        int maxFreq = 0;
        int maxVal = 0;

        List<Integer> list = lst.stream().distinct().sorted(Comparator.reverseOrder()).collect(Collectors.toList());
        Collections.sort(list);

        for (int i : list) {
            int freq = list.stream().filter(j -> j == i).count();
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = i;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_2_c933de4f_f1f8_4ecc_9b81_afacd29ebd32(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_17_a93472a3_a25a_4aaf_9511_391c0359b416(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_9_4d6c4607_7e26_47d4_84b1_6964d67718dd(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        Integer max = -1;
        Integer maxKey = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                maxKey = l;
            }
        }
        if (maxKey == -1) {
            return -1;
        } else {
            return maxKey;
        }
    }

    
    public static int search_Problem_2_95ba8216_d86f_4cf2_a7df_66f656d5a462(ArrayList<Integer> lst) {

        Map<Integer, Integer> freq = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : freq.keySet()) {
            if (freq.get(l) > max) {
                max = freq.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_5_6152d800_ef67_4e73_85cf_28fb6323eb1b(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq += i;
            if (freq > max) {
                max = freq;
            }
        }
        return max > 0 ? max : -1;

    }

    
    public static int search_Problem_5_a280d769_5bb8_4031_8d73_549289345510(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        Integer max = freq.keySet().stream().max(Comparator.comparing(freq::get)).get();
        if (freq.get(max) >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_11_8a510569_dac3_4dbe_8a22_4a0c8d2600c7(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int max_key = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                max_key = entry.getKey();
            }
        }
        if (max_key > 0) {
            return max_key;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_11_2180d7bc_dec6_4f09_89ea_8563a1d5bd8b(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_8264ad36_a4e9_4c73_9fde_0abbda91b569(ArrayList<Integer> lst) {

        if (lst.size() == 0) {
            return -1;
        }
        int max = 0;
        int count = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > max) {
                max = lst.get(i);
                count = 1;
            } else if (lst.get(i) == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_17_5d00a8bb_74e5_4fe9_9ce3_3e7f1b05d25c(ArrayList<Integer> lst) {
        ArrayList<Integer> ints = new ArrayList<>();
        for(Integer x : lst) {
            if(ints.contains(x)) {
                ints.set(ints.indexOf(x), x + 1);
            } else {
                ints.add(x);
            }
        }
        int max = Integer.MIN_VALUE;
        for(int i = 0; i <= ints.size(); i++) {
            for(int j = i+1; j <= ints.size(); j++) {
                if((ints.get(i) + ints.get(j)) > max) {
                    max = ints.get(i) + ints.get(j);
                }
            }
        }
        return max;
    }

    
    public static int search_Problem_10_3a3b7224_ac4d_45b7_8a70_6c25aa1f236e(ArrayList<Integer> lst) {
        // Write your code here
        // To print results to the standard output you can use System.out.println()
        // Example: System.out.println("Hello world!");
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1L);
            }
        }
        int max = -1;
        for (int l : map.keySet()) {
            if (map.get(l) >= l && l > max) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_01ef0a80_621a_425c_8647_805f30677432(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().filter(e -> e.getKey() > 0 && e.getValue() >= e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_2_185ac59e_a2b3_4da3_8655_da24d367de87(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_16d2ff36_bf2d_4fae_b90d_499157d738b7(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1 || freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_82373d4a_910c_437d_9fc6_2a3e569ad719(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxFreq = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxFreq) {
                max = l;
                maxFreq = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_5_f28556d7_8a85_47c9_9de1_118516293d01(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_6_42025dce_f4d4_499c_a20a_61336bb28c7d(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_12_dbd11b32_c28c_4414_b698_92c09a768095(ArrayList<Integer> lst) {
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? -1 : max;
    }

    
    public static int search_Problem_12_a9c16827_b0c9_4b1d_8976_0bb6d7538a69(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_5_bd36282c_4ea7_4045_8098_f8537fd72fe5(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i = lst.size(); i > 0; i--) {
            if (map.containsKey(i) && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_10_bfccc857_bb15_49fe_b97f_44d9e28aba42(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_10_c0cdea2e_2c78_4088_bf35_adb09df5421b(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_a46d49d1_a69c_46fb_ba40_8249650c89e2(ArrayList<Integer> lst) {
        int max = -1;
        HashMap<Integer, Integer> hm = new HashMap<Integer, Integer>();
        for (int val : lst) {
            hm.put(val, hm.getOrDefault(val, 0L) + 1);
            if (hm.getOrDefault(val, 0L) > max) {
                max = hm.getOrDefault(val, 0L);
            }
        }
        return max;
    }

    
    public static int search_Problem_3_69821cd1_6f4d_467e_89f7_a1be0b852e7c(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? max : -1;
    }

    
    public static int search_Problem_3_39a9c84d_f8bb_4ac4_8cd0_e08eb9d59f04(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().filter(e -> e.getValue() > e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_1_e2d66cb1_f756_4277_aa82_10aa4a3e1ac7(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq >= maxFreq) {
                maxFreq = freq;
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_12_746cd7ab_88fb_4275_8a8f_3c1208aaaa9c(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_23_e8593fb8_72d3_402c_8c08_63c872061934(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_11_fdc75040_5df2_428f_ac6b_89011b0bca28(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_13_8f4ac413_1655_42ca_9dcf_89fdbb7a8c7c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_11_43a6cd90_22f2_4532_b09d_0525caf2078b(ArrayList<Integer> lst) {

        int max = 0;
        for (Integer i : lst) {
            if (i > max) {
                max = i;
            }
        }
        if (max == 0) {
            return -1;
        }
        int count = 0;
        for (Integer i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_16_8be40d32_07ac_49a1_95b3_dee65efcc156(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_12_561a25ad_8b0d_47ce_adca_ea630e4d2f0d(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            }
            else if (maxFreq == i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_19_824cae87_cdcd_4694_8e5e_89326c1e3c36(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_18_9be68ec5_0ce5_48dd_aa8c_986716611188(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for (Integer i : map.keySet()) {
            if (map.get(i) > map.get(max) && map.get(i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_17fbe16e_7edd_49cd_93be_4240f1483e53(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxCount = 1;
            } else if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_22_d74d9d4c_bc0f_41f9_9439_b2fc86955ad1(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_18_717dc596_1050_497f_a39a_4aab77b5555c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int i : lst) {
            if(i == 0) {
                continue;
            }
            int freq = Collections.frequency(lst, i);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_1_fcc7171a_598d_45f0_8152_bda91bb80678(ArrayList<Integer> lst) {

        int max = 0;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_21_c7320494_cbba_4c8a_8d6e_af6dfe839cc4(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > max_freq) {
                max = i;
                max_freq = freq;
            }
        }
        if (max_freq < max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_6_78962c36_c153_4933_b972_2e7c55c674f2(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_18_e47cdf1d_a36e_4e85_9ce8_24b6f4c99cd3(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int max_count = 0;
        for(int i=0;i<lst.size();i++){
            if(lst.get(i)>max){
                max = lst.get(i);
                max_count = 1;
            }
            else if(lst.get(i)==max){
                max_count++;
            }
        }
        if(max_count>=max){
            return max;
        }
        else{
            return -1;
        }
    }

    
    public static int search_Problem_7_54960ba7_6f57_429a_8af7_645e1c2cb9df(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_f19a8b85_3436_4ab3_84e5_a75feaf7efd6(ArrayList<Integer> lst) {
        if (lst.size() == 0) {
            return -1;
        }
        int result = 0;
        for (int num : lst) {
            if (result >= num) {
                break;
            }
            if (num >= 0) {
                result += num;
            }
        }
        return result;
    }

    
    public static int search_Problem_13_c1ebcb4a_90a0_43a3_8827_9ce05d0b977a(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        for (int i = lst.size(); i > 0; i--) {
            if (map.getOrDefault(i, 0) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_14_a46d49d1_a69c_46fb_ba40_8249650c89e2(ArrayList<Integer> lst) {
        int max = -1;
        HashMap<Integer, Integer> hm = new HashMap<Integer, Integer>();
        for (int val : lst) {
            hm.put(val, hm.getOrDefault(val, 0L) + 1);
            if (hm.getOrDefault(val, 0L) > max) {
                max = hm.getOrDefault(val, 0L);
            }
        }
        return max;
    }

    
    public static int search_Problem_1_61536c47_e787_4ec0_ba39_9e7dd091652c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int i : lst) {
            if(i>0) {
                int freq = Collections.frequency(lst, i);
                if(freq>maxFreq) {
                    maxFreq = freq;
                    maxVal = i;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_1_5f6bd213_59a5_4749_8a30_0e5828089cf1(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                max = Math.max(max, entry.getKey());
            }
        }
        return max;
    }

    
    public static int search_Problem_7_12081ec7_ea74_4416_99d9_20288b05a825(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_0_a998ee89_8e9a_428d_ba35_3d2ad868b4c0(ArrayList<Integer> lst) {

        int max = -1;
        int maxCount = -1;
        for (int i = 1; i < 1000000000; i++) {
            int count = 0;
            for (Integer l : lst) {
                if (l == i) {
                    count++;
                }
            }
            if (count >= i && maxCount < count) {
                max = i;
                maxCount = count;
            }
        }
        if (maxCount >= 1) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_2_d7aadf7e_d5a2_412c_89e3_bca43e04b30c(ArrayList<Integer> lst) {
        Integer max = new Integer(0);
        Integer maxFreq = new Integer(0);
        for (Integer i : lst) {
            if (i > max) {
                max = i;
            }
            if (i.equals(max)) {
                maxFreq++;
            }
        }
        if (maxFreq >= max.intValue()) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_5_23904fa1_cbc0_49f0_aec8_239992259324(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_3_3d845f12_60c1_403c_936e_36676a67b2a1(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1 || freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_fd1651cd_509c_40cb_8063_b0ffff74725a(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > max) {
                max = lst.get(i);
                maxFreq = 1;
            } else if (lst.get(i) == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_3_ce2059a7_d0d9_443b_9c01_61718e3828e1(ArrayList<Integer> lst) {

        // Your code here
        int max = 0;
        int maxFreq = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) > maxFreq) {
                maxFreq = map.get(i);
                max = i;
            }
        }
        return maxFreq >= max ? max : -1;
    }

    
    public static int search_Problem_4_bea02bc5_45e1_487c_be6d_7ec8512ed43f(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l,  1);
            }
        }
        int max = -1;
        int maxKey = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        return maxKey;
    }

    
    public static int search_Problem_1_b2b1bb5c_bf69_482f_a80b_8181c34c8f78(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_24_5a25abac_0d57_498a_bcb7_de0ced493309(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_8_eedb0bf0_8312_4959_97f0_1f9d9b01ba99(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max && Collections.frequency(lst, i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_8_a70d730f_4724_4508_9a0b_8c5e194e2fa0(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq++;
            if(freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_21_6a0ce858_cb00_4a00_a7bc_371fefd13857(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? max : -1;
    }

    
    public static int search_Problem_11_701fb707_adf5_4196_97d9_77400ed6ecc3(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int count = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > max) {
                max = lst.get(i);
                count = 1;
            } else if (lst.get(i) == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_12_1af2357a_e122_4336_a52b_0805cbf14114(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_38b6050a_75f1_491e_83ff_1ca314d3e5c6(ArrayList<Integer> lst) {

        // Write your code here
        return lst.stream().max(Comparator.comparing(x -> x, Comparator.reverseOrder())).get();
    }

    
    public static int search_Problem_7_2ac433cc_9d94_4f88_8207_97bc3d906dad(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        int currFreq = -1;
        for (int val : lst) {
            if (currFreq == -1) {
                currFreq = val;
            } else if (currFreq == val) {
                currFreq++;
            } else {
                if (currFreq > maxFreq) {
                    maxFreq = currFreq;
                    maxVal = val;
                }
                currFreq = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_17_8b44da3b_143c_4ac6_9557_817833127ac0(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_3db7e9c5_ceee_4ffb_bedc_f11410e449cf(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_19_df030546_8c46_43f9_a1ef_4a381fb709b6(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_52f7c056_7c82_48b0_b85a_620b4a06e1e7(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_5d64556d_1fe3_453a_8516_06837627af5a(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_8_77a38810_12cd_4815_ae7e_639d7f4884ab(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (int l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().filter(e -> e.getKey() > 0 && e.getValue() >= e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_5_294f3c90_5963_4c18_acec_935d8606fe6d(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_23_a1cf6b7c_9fbb_4409_9039_60f09919eb1f(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_10_63c7680d_63d9_4547_a71d_d1febfcfacf8(ArrayList<Integer> lst) {
        // Your code here
        return -1;
    }

    
    public static int search_Problem_18_48dbb2ca_df98_461f_8817_aadf6564751c(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_fea40a69_10c9_411a_89e6_d1d55b1638c2(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_19_5491e7c6_32c4_477e_b413_e2f68d0c0e9c(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            map.put(i, map.getOrDefault(i, 0L) + 1);
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_21_8857856d_c9b5_4b25_8555_51827fd92012(ArrayList<Integer> lst) {

        // your code here
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        int max = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                max = Math.max(max, entry.getKey());
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_8_55c6327a_1461_49fd_a5f2_55a72f09859d(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i = 0; i < lst.size(); i++) {
            Integer key = lst.get(i);
            if (map.containsKey(key)) {
                map.put(key, map.get(key) + 1);
            } else {
                map.put(key, 1);
            }
        }
        Integer max = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            Integer key = entry.getKey();
            Integer value = entry.getValue();
            if (value > max) {
                max = value;
            }
        }
        if (max == -1) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_7_62d508f9_f6b5_4d01_a097_9898dacbfaee(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i : lst) {
            if(map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for(int i : lst) {
            if(map.get(i) > max && i > 0) {
                max = i;
            }
        }
        if(max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_14_75172c87_1316_4a96_b313_e86bee55a46b(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxCount = 0;
        for (int i : lst) {
            if (maxCount < i) {
                maxCount = i;
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_9_c0cdea2e_2c78_4088_bf35_adb09df5421b(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_3_294f3c90_5963_4c18_acec_935d8606fe6d(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_8_8f6da157_fc0d_4a27_a67a_1314b5ed76f0(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq >= maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_18_fda6416f_ba62_46fa_9dce_b0a779f4ff86(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_8_d604689f_bee1_42e6_8a6a_d3255efa242f(ArrayList<Integer> lst) {

        // write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) == max) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_4_12236577_0401_436d_b55e_69423b250446(ArrayList<Integer> lst) {

        // write your code here
        int max = 0;
        int count = 0;
        for(Integer l : lst){
            if(l > max){
                max = l;
                count = 1;
            }
            else if(l == max){
                count++;
            }
        }
        if(count >= max){
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_13_ba418f86_5ea9_4b98_8f34_a7ca21e10d9b(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_6_d3dec6c7_ecea_454f_be74_5f64f6e71ce9(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_18_313d673f_72c9_461b_886e_f2c45414106d(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_02da4b23_c23e_4dd3_944d_f0b9de1786f4(ArrayList<Integer> lst) {
        ArrayList<Integer> freq = new ArrayList<>();
        int maxFreq = -1;
        int maxVal = -1;
        for (int val : lst) {
            if (freq.stream().filter(f -> f == val).count() == 0) {
                freq.add(val);
                if (val > maxVal) {
                    maxFreq = maxVal;
                    maxVal = val;
                } else if (val == maxVal) {
                    maxFreq = val;
                }
            }
        }
        return maxFreq == -1 ? -1 : maxVal;
    }

    
    public static int search_Problem_7_8e4345e3_80db_4f39_97e7_3038f94318d5(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_77a38810_12cd_4815_ae7e_639d7f4884ab(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (int l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().filter(e -> e.getKey() > 0 && e.getValue() >= e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_18_0c910242_f1ce_4ba0_98fd_4ee16ebc5a8e(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        for(int i : lst){
            if(lst.stream().filter(x -> x == i).count() >= i){
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_17_f9a91ea7_0ded_49d6_a51c_77226db305cc(ArrayList<Integer> lst) {
        int mostFrequent = lst.get(0); // start at the first element
        int frequencyOfMostFrequent = 1;
        for (Integer l : lst) {
            if (l == mostFrequent) frequencyOfMostFrequent++;
            else {
                if (frequencyOfMostFrequent > 1) return -1;
                if (frequencyOfMostFrequent == 1) { // found a match
                    if (l > mostFrequent) mostFrequent = l;
                    frequencyOfMostFrequent = 1;
                }
            }
        }
        return mostFrequent;
    }

    
    public static int search_Problem_13_d64f5498_9be5_49c4_b9cb_42e9cdf9cb16(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && i > max) {
                max = i;
                maxFreq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_12_5a42e005_9770_4c26_a831_409bacb4429c(ArrayList<Integer> lst) {

        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_23_0e151b6d_169b_4938_9845_f503f1e62b1b(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_18_5aa3fa29_a18e_427a_89f7_ce7b6ec148bc(ArrayList<Integer> lst) {
        int frequency = lst.stream().filter(l -> l > 0).count();
        return frequency > lst.stream().filter(l -> l == frequency).findFirst().get() ? frequency : -1;
    }

    
    public static int search_Problem_18_c0ab565d_78ee_4b97_8f35_cbbe04ceb0a1(ArrayList<Integer> lst) {
        if (lst.isEmpty()) {
            return -1;
        }
        int maxVal = 0;
        int maxFreq = 0;
        for (Integer i : lst) {
            int freq = lst.stream().filter(v -> v.equals(i)).count();
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = i;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_2_38282935_5a04_432c_92c1_f774673fe3a7(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_9_bfccc857_bb15_49fe_b97f_44d9e28aba42(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_11_62d508f9_f6b5_4d01_a097_9898dacbfaee(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i : lst) {
            if(map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for(int i : lst) {
            if(map.get(i) > max && i > 0) {
                max = i;
            }
        }
        if(max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_1_fe0ba967_2d87_4e9a_9910_12affbaf7abb(ArrayList<Integer> lst) {

        // Write your code here
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_23_0cf73034_0194_4606_967f_b4c030af213f(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_db082a8c_19ad_4f49_8b59_53e53a8f2ce6(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_20_0b05cc89_e346_4a9b_9b03_7142fcf49fdd(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x, Comparator.reverseOrder())).get();
    }

    
    public static int search_Problem_18_86c7893c_f6f3_41a3_95e1_ceb030d1bcee(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int maxCount = -1;
        for (int i : lst) {
            int count = Collections.frequency(lst, i);
            if (count > maxCount) {
                max = i;
                maxCount = count;
            }
        }
        return max;
    }

    
    public static int search_Problem_17_944f16eb_5d8a_461d_a221_477971af348a(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_18_b4654604_7861_4661_8201_d0bef279bea5(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (i > max) {
                max = i;
                freq = freq - 1;
            }
        }
        if (freq >= 0) {
            return max;
        } else {
            return -1;
        }

    }

    
    public static int search_Problem_14_77538800_0a07_466b_8f7d_55bf89e76488(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (int l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < max) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_8_e87ee65d_2432_4cd6_9fa7_1245a67fd8b2(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_9_4b5de19e_b19c_401e_8b4a_529de437bb34(ArrayList<Integer> lst) {
        // Complete the function here
        int res = -1;
        for (int num : lst) {
            if (num >= 0) {
                int count = lst.stream().filter(a -> a == num).count();
                if (count > res) {
                    res = num;
                }
            }
        }
        return res;
    }

    
    public static int search_Problem_17_cdbbb7b6_ea55_4a24_b36a_7a7bf9f6f666(ArrayList<Integer> lst) {

        int max = 0;
        int max_count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                max_count = 1;
            } else if (i == max) {
                max_count++;
            }
        }
        for (int i : lst) {
            if (i > 0 && i <= max && i >= max_count) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_6_1a5ff06d_da65_41b2_974c_b8d626938848(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_16_09352cce_7fd8_40aa_a713_e15252c07b05(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_44a9f443_fc83_40f9_9036_8ab92cba5e6c(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_5eb0d6fb_619a_4e14_8ad2_72b38cc1405a(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().filter(e -> e.getValue() >= e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_2_367dbae6_5c7a_438c_8efc_e29ad080c2b3(ArrayList<Integer> lst) {

        // your code here
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        int max = 0;
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_9_3ca1e262_6e9d_48a1_a6ca_c3c26196e6ca(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                return entry.getKey();
            }
        }
        return -1;
    }

    
    public static int search_Problem_4_8d15e657_96dd_4267_92dc_983bd3ca9ca8(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1 || freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_16_4f035a71_2fb6_4287_9075_16a110eb9a6e(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int max_freq = 0;
        int curr_freq = 0;
        int curr = 0;
        for (int i = 0; i < lst.size(); i++) {
            curr = lst.get(i);
            curr_freq = 0;
            for (int j = 0; j < lst.size(); j++) {
                if (lst.get(j) == curr) {
                    curr_freq++;
                }
            }
            if (curr_freq > max_freq) {
                max_freq = curr_freq;
                max = curr;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_d3d9dbfc_1722_4c1d_90d3_dce4e5a084d6(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_c12c4549_e1a9_4d60_a6e7_2c549a05b128(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_1580c256_91e3_4db3_9700_a6534b03618b(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            if (i > 0 && freq >= i) {
                max = i;
                freq = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_f230db74_fed7_4b6a_83c0_0752384376e3(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_23_fb888065_b76e_458d_8ed0_4d472efe76fb(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<Integer, Integer>();
        for (int l : lst) {
            if (freq.containsKey(l)) {
                freq.put(l, freq.get(l) + 1);
            } else {
                freq.put(l, 1);
            }
        }
        int max = -1;
        int maxFreq = -1;
        for (int l : freq.keySet()) {
            if (freq.get(l) > maxFreq) {
                max = l;
                maxFreq = freq.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_13_6152d800_ef67_4e73_85cf_28fb6323eb1b(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq += i;
            if (freq > max) {
                max = freq;
            }
        }
        return max > 0 ? max : -1;

    }

    
    public static int search_Problem_3_a1cf6b7c_9fbb_4409_9039_60f09919eb1f(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_10_db699e26_e064_4268_98e6_7c3be53a0557(ArrayList<Integer> lst) {
        if (lst.size() <= 0) return -1;
        Set<Integer> set = new TreeSet<>(lst);
        Integer result = set.stream().filter((x) -> x > 0).max(Integer::compareTo).get();
        if (result != null)
            return result.intValue();
        else return -1;
    }

    
    public static int search_Problem_17_9d03e8a4_26b9_4bd5_8774_1bff547dc5ab(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = lst.stream().filter(i -> i == val).count();
                if(freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_0_9df21133_2f1a_4653_b91c_63dc2efee9a3(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq++;
            if(freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_11_c00bf205_c730_4556_be5e_358334b6a1fb(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxCount) {
                max = l;
                maxCount = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_0_37b5f594_f270_4ef5_b9e6_ad08f05ad08d(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_12_462b6cce_8427_49a4_9375_083f5433641a(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_22_5aa3fa29_a18e_427a_89f7_ce7b6ec148bc(ArrayList<Integer> lst) {
        int frequency = lst.stream().filter(l -> l > 0).count();
        return frequency > lst.stream().filter(l -> l == frequency).findFirst().get() ? frequency : -1;
    }

    
    public static int search_Problem_2_f56c86b4_0e85_4370_93bf_f52786f6c000(ArrayList<Integer> lst) {

        int max = -1;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_24_e425d09a_15c2_45b8_845d_a16e8b789bc8(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_3_f3647ac3_dbfb_4884_9500_dc429d34210c(ArrayList<Integer> lst) {
        // Your code here
        return -1;
    }

    
    public static int search_Problem_1_53e384db_a8a8_4e20_afed_2f0f70a452c8(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        int currFreq = 0;
        int curr = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                currFreq = 1;
            } else if (l == max) {
                currFreq++;
            }
            if (currFreq > maxFreq) {
                maxFreq = currFreq;
                curr = max;
            }
        }
        return curr;
    }

    
    public static int search_Problem_19_53c45ca3_c863_463d_882c_f69b5b765f37(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_17_8d5ccef5_0a87_4e3d_b458_c901f3828dd1(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_19_12072b01_a004_4701_aa1d_c19533c9faac(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_3_fe0ba967_2d87_4e9a_9910_12affbaf7abb(ArrayList<Integer> lst) {

        // Write your code here
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_16_e2d66cb1_f756_4277_aa82_10aa4a3e1ac7(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq >= maxFreq) {
                maxFreq = freq;
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_14_bd36282c_4ea7_4045_8098_f8537fd72fe5(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i = lst.size(); i > 0; i--) {
            if (map.containsKey(i) && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_19_afd54a7d_236b_46f5_8533_1af5dd7a2643(ArrayList<Integer> lst) {
        Collections.sort(lst);
        if (lst.isEmpty()) {
            return -1;
        }
        int max = lst.get(0);
        int min = lst.get(0);
        for (int l : lst) {
            if (l > max) {
                max = l;
            }
            if (l < min) {
                min = l;
            }
        }
        if (min == max) {
            return min;
        }
        int answer = max;
        for (int l : lst) {
            if (l >= min) {
                answer = Math.max(answer, l + 1);
            }
        }
        return answer < 0 ? -1 : answer;
    }

    
    public static int search_Problem_6_06d89672_7249_4af3_92bd_f3245dcc8e05(ArrayList<Integer> lst) {
        int maxVal = Integer.MIN_VALUE, maxCount = Integer.MIN_VALUE;
        for (Integer l : lst) {
            if (maxCount < l) {
                maxCount = l;
                maxVal = l;
            }
        }
        return maxVal > 0 ? maxVal : -1;
    }

    
    public static int search_Problem_0_ae104091_9cb6_42d6_955b_af81059a964c(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_002cfffd_dea8_4915_9550_b5e8caf67023(ArrayList<Integer> lst) {

        int max = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_23_12236577_0401_436d_b55e_69423b250446(ArrayList<Integer> lst) {

        // write your code here
        int max = 0;
        int count = 0;
        for(Integer l : lst){
            if(l > max){
                max = l;
                count = 1;
            }
            else if(l == max){
                count++;
            }
        }
        if(count >= max){
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_3_49578c7a_cf0c_4faa_83f9_8018efa6c347(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_4_b14887cd_3c83_4345_8b49_46a294d0bc5a(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
            if (count > maxCount) {
                maxCount = count;
            }
        }
        if (maxCount >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_10_44a9f443_fc83_40f9_9036_8ab92cba5e6c(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_1dcaea22_6357_4eb9_9c5f_5de3c82f6456(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = Integer.MIN_VALUE;
        for (int i : map.keySet()) {
            if (map.get(i) > i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_9aa38e13_c23d_4b4a_b00a_ceffc44f9d19(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_7815e544_98cf_4ac9_bba5_bc8bf09c1a2c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_13_c9a58673_1552_4dbb_aa35_e50239d00268(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_a3e98018_5032_4202_b6c3_0635ed1bb511(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_3_dc20ce87_32d8_4664_bf5f_f3f428ebe301(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_db03fc5f_cfd1_448d_91aa_d15a80adf926(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        int currFreq = -1;
        for (int val : lst) {
            currFreq = Collections.frequency(lst, val);
            if (currFreq > maxFreq) {
                maxFreq = currFreq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_14_9866751c_e944_46ef_bd45_eeeb7289f8f6(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        Integer max = Collections.max(map.keySet());
        if (map.get(max) >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_3_fd64c3a1_0fe9_426f_b2bd_2bae9b297988(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_f28556d7_8a85_47c9_9de1_118516293d01(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_10_12f8fb30_1b07_49d7_b530_622e50ce2cea(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_12_1110d73d_b51a_4eba_9789_bef7025948dc(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (i > max) {
                max = i;
            }
            if (freq > i) {
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_1_78962c36_c153_4933_b972_2e7c55c674f2(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_13_392bbd95_1e25_4d49_a296_dca3ccc152a9(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_15_6ebca5a5_f6ca_423a_a444_56d608c56a85(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().max(Comparator.comparing(Map.Entry::getValue)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_18_a4106e4c_1ff9_4565_9df9_49d9dd86c455(ArrayList<Integer> lst) {
        int freq = 0;
        ArrayList<Integer> newArr = new ArrayList<>();
        for (Integer i : lst) {
            if (i > 0) freq++;
            newArr.add(i);
        }
        if (freq == 0)
            return -1;
        else
            return newArr.get(newArr.size() - 1);
    }

    
    public static int search_Problem_7_b14887cd_3c83_4345_8b49_46a294d0bc5a(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
            if (count > maxCount) {
                maxCount = count;
            }
        }
        if (maxCount >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_0_5c4f9133_d77e_4f34_a7b3_d268945a5a28(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_15_8fd5f2c1_4b9a_443c_a21b_071e2fdc5825(ArrayList<Integer> lst) {
        int val = -1;
        int maxV = -1;
        for (int num : lst) {
            if (num < val) val = num;
            else if (num > maxV) maxV = num;
        }
        return maxV;
    }

    
    public static int search_Problem_18_a053c6f8_5aad_407e_b7df_7cb234345f03(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for(int i : lst) {
            freq++;
            if(freq > max) {
                max = freq;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_f5024411_6b59_4eeb_a191_466b6ebc553b(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_24_614bbaac_06cb_4461_a4c8_c881c380bbb9(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            if (freq.containsKey(l)) {
                freq.put(l, freq.get(l) + 1);
            } else {
                freq.put(l, 1);
            }
        }
        int max = -1;
        int maxFreq = -1;
        for (Integer l : freq.keySet()) {
            if (freq.get(l) > maxFreq) {
                max = l;
                maxFreq = freq.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_4_7518e306_e88f_42ff_9f68_0aa5e40e4f97(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer i : lst) {
            if (i > max) {
                max = i;
            }
            if (lst.stream().filter(j -> j == i).count() > maxFreq) {
                maxFreq = lst.stream().filter(j -> j == i).count();
            }
        }
        if (maxFreq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_5_14a7bc48_1708_496d_8c33_89bfee55d10d(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for(int i = 0; i < lst.size(); i++) {
            int freq = 0;
            for(int j = 0; j < lst.size(); j++) {
                if(lst.get(i) == lst.get(j)) {
                    freq++;
                }
            }
            if(freq > maxFreq) {
                max = lst.get(i);
                maxFreq = freq;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_dd497c4f_eb22_47ef_9a52_7253c3e3b125(ArrayList<Integer> lst) {

        int max = -1;
        for (Integer i : lst) {
            if (i > max) {
                max = i;
            }
        }
        if (max == -1) {
            return -1;
        }
        int count = 0;
        for (Integer i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= 2) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_22_d9f084cb_c24b_414a_b5f9_9b52bade21e0(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_11_f35be621_bece_4853_baad_e0b1af1bb83b(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            if (freq < i) {
                freq = i;
                max = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_20_f3bf964c_cac9_460b_9d06_bfbec1ea90c1(ArrayList<Integer> lst) {
        int max = -1;
        int freq = 0;
        for (int i : lst) {
            freq += i;
            if (freq > max) {
                max = freq;
            }
        }
        return max;

    }

    
    public static int search_Problem_22_8545fe00_41f8_4560_840f_e2742e79c4ad(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        if (max == -1) {
            return -1;
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_15_c13d803b_d252_49d8_8325_b8a077cc7935(ArrayList<Integer> lst) {
        int greatestVal = -1;
        int greatestFreq = 0;
        for (int e : lst) {
            if (e > 0 && e >= greatestFreq) {
                greatestVal = e;
                greatestFreq = e;
            } else if (e > 0 && e < greatestFreq) {
                greatestFreq = e;
            }
        }
        if (greatestVal != -1) {
            return greatestVal;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_9_88d5a93a_86b1_43f7_af50_43aae8c1b9d3(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_c95feff2_fa70_4a44_b10f_6dc0f08ee1aa(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_22_0e151b6d_169b_4938_9845_f503f1e62b1b(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_487a9b77_bb2b_4906_8950_e76938681839(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_12_367dbae6_5c7a_438c_8efc_e29ad080c2b3(ArrayList<Integer> lst) {

        // your code here
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        int max = 0;
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_24_c0c954bc_1284_4c1a_aa8e_8150f66c1924(ArrayList<Integer> lst) {
        int res = -1;
        if (lst != null && lst.size() > 0) {
            // Create a map of number to count of occurances in the list, O(n)
            Map<Integer, Integer> numToCount = new HashMap<Integer, Integer>();
            for (int x : lst) {
                if (numToCount.containsKey(x)) {
                    numToCount.put(x, numToCount.get(x) + 1);
                } else {
                    numToCount.put(x, 1);
                }
            }
            int maxFreq = 0;
            // Iterate through the keys and find the one whose value is at least equal to the key, O(n)
            for (int x : numToCount.keySet()) {
                if (numToCount.get(x) >= x && numToCount.get(x) > maxFreq) {
                    maxFreq = numToCount.get(x);
                    res = x;
                }
            }
        }
        return res;
    }

    
    public static int search_Problem_20_294f3c90_5963_4c18_acec_935d8606fe6d(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_21_25876edf_2fe6_43cd_9680_e72e5c1d8599(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq == i) {
                maxFreq++;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_4_3fc6ad30_c6ac_4de9_a084_fc3e56aca284(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparingInteger(x -> x)).get();
    }

    
    public static int search_Problem_17_71b8c3b2_37db_4a5f_a4a0_8810494a74d4(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_5_c87d175a_b038_45bd_a52a_c667a2530759(ArrayList<Integer> lst) {

        int max = 0;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_14_749134b5_07b8_46a7_9feb_5b2448fed9cb(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_a32c15c4_fd3a_4fed_9d43_0330149c117b(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_14_a072df67_4de4_4a90_989e_31fa6738d407(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_8_32cf49dd_c306_489c_a08c_237166bf8e0d(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_b85a39c4_621c_49fd_9693_72f4a3a9051b(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                max_freq = 1;
            } else if (l == max) {
                max_freq++;
            }
        }
        if (max_freq == 0) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_9_bbe47d47_26f0_4719_8639_03179a454ac6(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i = lst.size(); i > 0; i--) {
            if (map.containsKey(i) && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_3_4f014b42_44fa_4dfe_837f_cc16057e2f6c(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int max_key = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                max_key = l;
            }
        }
        if (max == 0) {
            return -1;
        }
        return max_key;
    }

    
    public static int search_Problem_9_749134b5_07b8_46a7_9feb_5b2448fed9cb(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_36c780b1_f15c_4cbd_9600_95a55bd48700(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq++;
            if(freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_2_5491e7c6_32c4_477e_b413_e2f68d0c0e9c(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            map.put(i, map.getOrDefault(i, 0L) + 1);
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_13_c0210ab5_c7f7_48e3_99a7_654ab2b6f933(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_682fbb0c_d0f4_45cf_b692_24dc69bcd0ef(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_5_61a58b3c_f392_4f94_b534_9593d49ed8d9(ArrayList<Integer> lst) {

        // your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                max = Math.max(max, entry.getKey());
            }
        }
        return max;
    }

    
    public static int search_Problem_24_7ee1436f_98e0_4345_bdfe_066cfa125494(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_11_d44a7008_596e_42f0_a8aa_5db9fc59593a(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxKey = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (maxKey > 0) {
            return maxKey;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_22_386f04c3_a999_423e_b2a3_427a4a957aef(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_749134b5_07b8_46a7_9feb_5b2448fed9cb(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_24_17fbe16e_7edd_49cd_93be_4240f1483e53(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxCount = 1;
            } else if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_7_096a2d42_eb1e_4e26_9885_4fc1dfe77b01(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        int max = 0;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_6cabdea2_5db4_4dea_8122_d6053a66ae06(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_8_9d19affd_f562_4c99_bd6b_aa43ff22cd58(ArrayList<Integer> lst) {
        if (lst.size() == 0) {
            return -1;
        }
        Collections.sort(lst);
        int result = lst.get(0);
        int max = lst.get(0);
        for (int i : lst) {
            if (i > max) {
                max = i;
                result = i;
            } else if (i > result) {
                result = i;
            }
        }
        return result;
    }

    
    public static int search_Problem_10_682fbb0c_d0f4_45cf_b692_24dc69bcd0ef(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_17_76588fc0_5d84_4b06_ae10_4db7945ccf35(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_24_f2274e5d_e324_40b5_80af_bc21d27c9db9(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int max_count = 0;
        for(int i = 0; i < lst.size(); i++) {
            if(lst.get(i) > max) {
                max = lst.get(i);
                max_count = 1;
            } else if(lst.get(i) == max) {
                max_count++;
            }
        }
        if(max_count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_4_fa40bb23_2f84_492f_989a_1dbd14ed45a2(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_16_f33ca2cc_cee3_402e_9ae1_c7f309b495ae(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_2a81176e_fb0c_4e42_8ee9_ac6aec8e46bd(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_22_354b07bf_12aa_4fe6_b70a_7bb630692b78(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_19_a30e2ddc_8ca9_4bb3_aafc_37fb6c1416c9(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l,  1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > entry.getKey()) {
                return entry.getKey();
            }
        }
        return -1;
    }

    
    public static int search_Problem_0_a9ef5082_811e_487b_92b3_609f5cead847(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_c08942a7_56d3_430a_bbcb_8a6ff3d9a909(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_1e3145ff_a160_4db6_863b_c8053b5983b0(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxVal == -1 || maxFreq < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq == i) {
                maxFreq++;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_7_95fe7d72_5b98_4a2d_8a79_885f491b2be5(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_14_1110d73d_b51a_4eba_9789_bef7025948dc(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (i > max) {
                max = i;
            }
            if (freq > i) {
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_17_d022dfc3_9c28_4c13_bf21_c4120b93fae8(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        int maxVal = 0;
        for (int l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
                maxVal = l;
            } else if (l == max) {
                maxFreq++;
                if (maxFreq > maxFreq) {
                    maxVal = l;
                }
            }
        }
        if (maxVal == 0) {
            return -1;
        }
        return maxVal;
    }

    
    public static int search_Problem_0_ba418f86_5ea9_4b98_8f34_a7ca21e10d9b(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_1_e1aa36e8_b670_467d_8ba1_abbfab213111(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxCount) {
                max = entry.getKey();
                maxCount = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_20_069c53c3_73ce_4b33_9c9f_93effc675279(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxCount = 0;
        for (int i : lst) {
            if (maxCount < i) {
                maxCount = i;
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_24_06b59eaf_f7d5_475a_b612_76509db662f1(ArrayList<Integer> lst) {
        // Create an array to hold frequencies of each integer
        int[] freq = new int[ lst.size()];
        int count = 0;

        // Iterate through each element in array and find frequency and increment by 1
        for (int l : lst) {
            freq[ l] = ++count;
        }

        // Now iterate through frequency array and find greatest frequency
        int result = Integer.MIN_VALUE;
        for (int i = 0; i < freq.length; i++) {
            if (freq[i] > result) {
                result = freq[i];
            }
        }
        return result < 0 ? -1 : result;
    }

    
    public static int search_Problem_3_bd36282c_4ea7_4045_8098_f8537fd72fe5(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i = lst.size(); i > 0; i--) {
            if (map.containsKey(i) && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_21_0f06a97f_e837_4f16_8ea0_88a1b43490eb(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        int res = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                res = l;
            }
        }
        return res;
    }

    
    public static int search_Problem_10_083749b3_cdff_4705_b138_b3f0fbfa82ee(ArrayList<Integer> lst) {
        Integer max = -1;
        int counter = 0;
        for (Integer value : lst) {
            if (value > max) {
                counter = 0;
                max = value;
            }
            else if (value == max) {
                counter++;
            }
            else if (counter > 0) {
                return -1;
            }
        }
        return max;
    }

    
    public static int search_Problem_8_16381637_254d_4bb2_b2a9_d5276be51122(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (maxFreq < val && val > 0) {
                maxFreq = val;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_14_41912114_448d_4efd_898f_5af1f815e85f(ArrayList<Integer> lst) {

        int max = -1;
        int maxCount = 0;
        for (int i : lst) {
            int count = Collections.frequency(lst, i);
            if (i > max && count >= i) {
                max = i;
                maxCount = count;
            }
        }
        return maxCount >= max ? max : -1;
    }

    
    public static int search_Problem_19_c0ab565d_78ee_4b97_8f35_cbbe04ceb0a1(ArrayList<Integer> lst) {
        if (lst.isEmpty()) {
            return -1;
        }
        int maxVal = 0;
        int maxFreq = 0;
        for (Integer i : lst) {
            int freq = lst.stream().filter(v -> v.equals(i)).count();
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = i;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_3_b9cf0650_86b1_4a00_84ce_93cfd4a76ae8(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int res = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                res = l;
            }
        }
        if (max == 0) {
            return -1;
        }
        return res;
    }

    
    public static int search_Problem_1_ce679c69_20bb_4241_9fa1_c26aad235689(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_22_71b8c3b2_37db_4a5f_a4a0_8810494a74d4(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_19_c0cdea2e_2c78_4088_bf35_adb09df5421b(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_98592086_92ab_4eb6_b017_004c7ca2b63b(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                maxFreq = val;
            } else if (val == maxVal) {
                maxFreq += val;
            }
        }
        return maxFreq;

    }

    
    public static int search_Problem_15_004071e6_2bb7_4c97_b167_388b404bf949(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_14_f7939473_4d73_4065_bbe6_b70b5b23a22e(ArrayList<Integer> lst) {

        int max = -1;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_7_0f0cdf63_305a_40ae_90bb_6f726f76631b(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        int max = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > max) {
                max = lst.get(i);
            }
        }
        if (max == 0) {
            return -1;
        }
        int count = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) == max) {
                count++;
            }
        }
        if (count == 1) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_23_86b212c1_2474_4c36_aa95_a72ba990a3e5(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_826978c2_4132_4923_9e2c_e4f7c74ce9b4(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_6a2f4881_96de_4b2b_a147_43d27bd07968(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_12081ec7_ea74_4416_99d9_20288b05a825(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_19_c0194ba9_53fd_4b61_8da6_90f2239abcac(ArrayList<Integer> lst) {
        int max = 0;
        int maxFreq = -1;
        for(int i : lst) {
            if(i>0) {
                int freq = Collections.frequency(lst, i);
                if(freq>maxFreq) {
                    max = i;
                    maxFreq = freq;
                }
            }
        }
        return max;

    }

    
    public static int search_Problem_2_d149f240_5861_48fa_a65e_b9ccaebdb446(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        int currFreq = 0;
        int curr = 0;
        for (int i = 0; i < lst.size(); i++) {
            curr = lst.get(i);
            currFreq = 0;
            for (int j = 0; j < lst.size(); j++) {
                if (lst.get(j) == curr) {
                    currFreq++;
                }
            }
            if (currFreq > maxFreq) {
                max = curr;
                maxFreq = currFreq;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_22_229a13bd_7617_43eb_a6a2_e1acc26f4b49(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_7f2a4010_a03a_4f96_abe8_f06cc4047160(ArrayList<Integer> lst) {
        int maxVal = lst.get(0);
        int maxFreq = lst.get(0);
        for(int i : lst) {
            if(i == maxVal) {
                maxFreq++;
            } else {
                if(maxFreq >= i) {
                    maxVal = i;
                    maxFreq = i;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_6_b11c6e4e_8771_4985_bdbb_f3c4ad8cd620(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                return max;
            }
        }
        return -1;
    }

    
    public static int search_Problem_8_49578c7a_cf0c_4faa_83f9_8018efa6c347(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_24_9179e5fd_8652_47e0_a859_89f97c9d38e2(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_2_91985b4e_4a24_441e_9918_edf169dd522c(ArrayList<Integer> lst) {

        // Write your code here
        return lst.stream().filter(x -> lst.stream().filter(y -> y == x).count() >= x).max(Integer::compareTo).orElse(-1);
    }

    
    public static int search_Problem_23_f1764ce9_fd2f_4f02_8c46_19fe328ff713(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (lst.stream().filter(x -> x == i).count() >= i) {
                max = i;
                break;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_c4a9cbf7_74e6_435b_b3ba_5d63cdc1453c(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = 0;
        for (int i : lst) {
            int freq = lst.stream().filter(j -> j == i).count();
            if (freq >= maxFreq) {
                max = i;
                maxFreq = freq;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_0c478b7e_b4f3_4df5_84b5_f30f553e549e(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_18_35bb5760_a94b_4bb2_b26f_2c01b3e1d760(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (i > max) {
                max = i;
            }
            if (freq > i) {
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_23_4881aa52_4483_49a4_8902_4e1b403db02c(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer num : lst) {
            map.put(num, map.getOrDefault(num, 0L) + 1);
        }
        for (int i = lst.size(); i > 0; i--) {
            if (map.getOrDefault(i, 0L) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_5_6ab494e2_4f2d_4c8a_86c3_d3d367fec4dc(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            if (freq.containsKey(l)) {
                freq.put(l, freq.get(l) + 1);
            } else {
                freq.put(l, 1);
            }
        }
        int max = 0;
        int max_val = 0;
        for (Integer l : freq.keySet()) {
            if (freq.get(l) > max) {
                max = freq.get(l);
                max_val = l;
            }
        }
        if (max == 0) {
            return -1;
        }
        return max_val;
    }

    
    public static int search_Problem_20_c77cfee3_6d22_4b95_913c_974ec2e13eda(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        for (int i = 1; i <= lst.size(); i++) {
            if (map.containsKey(i) && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_2_6f0f7490_0928_4f6a_a70e_b21ecf33d90e(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_21_f55cbb4e_8367_4db1_9ad2_451eb822e669(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_3fc6ad30_c6ac_4de9_a084_fc3e56aca284(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparingInteger(x -> x)).get();
    }

    
    public static int search_Problem_21_299d5e51_4166_4b36_a624_0648594a9de1(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_5b5b4a7f_d6ef_4601_8400_1090d332704c(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        Integer max = Collections.max(map.keySet());
        if (map.get(max) >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_19_a580bb2b_de95_48d9_875c_a0615ef1bbe1(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max && Collections.frequency(lst, i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_93e505ab_763c_4367_b7e8_4971673ba635(ArrayList<Integer> lst) {
        int max = lst.stream().filter(e -> e > 0).max(Integer::compareTo).get();
        int maxCount = 0;
        for (int e : lst) {
            if (e > 0 && e > max) max = e;
            ++maxCount;
        }
        return max > 0 ? max : -1;
    }

    
    public static int search_Problem_23_9e2edda4_777d_4360_a4bc_083e8a1193ab(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_10_561a25ad_8b0d_47ce_adca_ea630e4d2f0d(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            }
            else if (maxFreq == i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_1_0b3f9131_7548_4898_b0d8_40b106853377(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        Integer max = -1;
        Integer maxFreq = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxFreq) {
                max = l;
                maxFreq = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_9_824cae87_cdcd_4694_8e5e_89326c1e3c36(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_14_77c5e688_8d9f_4446_b71f_afad034036e8(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) == max) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_2_f55cbb4e_8367_4db1_9ad2_451eb822e669(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_7524d6ff_4304_4581_b760_bcb1b7bdb987(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_15_97e87b77_709b_41b7_9f57_b5a0cd936b0f(ArrayList<Integer> lst) {

        if (lst.size() == 0) {
            return -1;
        }
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (int i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxKey = i;
            }
        }
        if (max == 1) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_13_db082a8c_19ad_4f49_8b59_53e53a8f2ce6(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_16_e7528919_2003_4faa_a52b_6553cd7b2634(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > maxFreq) {
                max = i;
                maxFreq = freq;
            }
        }
        if (maxFreq < max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_6_102171b8_7a4b_4a85_902b_614380e7fe76(ArrayList<Integer> lst) {
        ArrayList<Integer> unique = new ArrayList<>();
        unique.addAll(lst);

        Collections.sort(unique);

        int maxVal = unique.get(0);

        for (int x : unique) {
            if (x > maxVal) {
                maxVal = x;
            }
        }

        int freq = unique.size();

        for (int i = 0; i < unique.size(); i++) {
            if (freq < unique.get(i)) {
                return -1;
            }
        }

        return maxVal;
    }

    
    public static int search_Problem_3_92fb837c_81a6_47a8_b0b7_03823f0559a3(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (int l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getKey() < entry.getValue() && entry.getKey() > max) {
                max = entry.getKey();
            }
        }
        return max;
    }

    
    public static int search_Problem_15_ac3743e7_7b1e_4cd8_8ee7_c64471278284(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_15_11212299_e15b_4955_96a5_5646b9dd8a87(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_2_c00bf205_c730_4556_be5e_358334b6a1fb(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxCount) {
                max = l;
                maxCount = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_9_8524091b_f699_4449_b40a_36bb4d5c8dd7(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int max_index = -1;
        for(int i = 0; i < lst.size(); i++) {
            if(lst.get(i) > max) {
                max = lst.get(i);
                max_index = i;
            }
        }
        if(max == 0) {
            return -1;
        }
        int count = 0;
        for(int i = 0; i < lst.size(); i++) {
            if(lst.get(i) == max) {
                count++;
            }
        }
        if(count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_14_002cfffd_dea8_4915_9550_b5e8caf67023(ArrayList<Integer> lst) {

        int max = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_19_d3dec6c7_ecea_454f_be74_5f64f6e71ce9(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_9_02da4b23_c23e_4dd3_944d_f0b9de1786f4(ArrayList<Integer> lst) {
        ArrayList<Integer> freq = new ArrayList<>();
        int maxFreq = -1;
        int maxVal = -1;
        for (int val : lst) {
            if (freq.stream().filter(f -> f == val).count() == 0) {
                freq.add(val);
                if (val > maxVal) {
                    maxFreq = maxVal;
                    maxVal = val;
                } else if (val == maxVal) {
                    maxFreq = val;
                }
            }
        }
        return maxFreq == -1 ? -1 : maxVal;
    }

    
    public static int search_Problem_19_0f3f14f3_be8f_4885_b733_2638266c4ea1(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_e97844f4_ea8c_48db_879b_8ec179f2d772(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_8_c8c16d74_4379_437f_a18d_7df72f9bb6b0(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_8_a302a74b_528e_46ad_8e44_a83919d09a29(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_0_8264ad36_a4e9_4c73_9fde_0abbda91b569(ArrayList<Integer> lst) {

        if (lst.size() == 0) {
            return -1;
        }
        int max = 0;
        int count = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > max) {
                max = lst.get(i);
                count = 1;
            } else if (lst.get(i) == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_18_15ac33c0_ed98_4bf7_ba18_94155cc5e4a4(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == -1) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_6_df030546_8c46_43f9_a1ef_4a381fb709b6(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_7679f6a5_cb5e_4cfe_ad77_2ef6b274fa98(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_21_c4c6af8e_3dcb_436d_b32a_b0a995bcfe2a(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                max_freq = Collections.frequency(lst, i);
            }
        }
        if (max_freq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_4_3ca1e262_6e9d_48a1_a6ca_c3c26196e6ca(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                return entry.getKey();
            }
        }
        return -1;
    }

    
    public static int search_Problem_8_9866751c_e944_46ef_bd45_eeeb7289f8f6(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        Integer max = Collections.max(map.keySet());
        if (map.get(max) >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_17_2e93e5a3_1734_4ad7_b875_ea461684de26(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (int num : lst) {
            map.put(num, map.getOrDefault(num, 0L) + 1);
        }
        for (int key : map.keySet()) {
            if (map.get(key) >= key) {
                return key;
            }
        }
        return -1;
    }

    
    public static int search_Problem_19_fdc75040_5df2_428f_ac6b_89011b0bca28(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_7_4232c5c2_ad1b_4687_8c66_1cbdda5ae8d6(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_21_388b62f5_0d8d_477e_bd3e_359bed2f3979(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int count = 0;
        for(Integer i : lst){
            if(i > max){
                max = i;
                count = 1;
            }
            else if(i == max){
                count++;
            }
        }
        if(count >= max){
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_6_8ef7c5ae_4806_4729_a4d9_1bde2f0a01c0(ArrayList<Integer> lst) {

        // Your code here
        int max = -1;
        int freq = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > max) {
                max = lst.get(i);
                freq = 1;
            } else if (lst.get(i) == max) {
                freq++;
            }
        }
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > max && freq >= lst.get(i)) {
                return max;
            }
        }
        return -1;
    }

    
    public static int search_Problem_12_6b07e4a2_4607_4734_9d2d_8ca8e151a7b4(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        int max_key = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                max_key = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        }
        return max_key;
    }

    
    public static int search_Problem_11_56d90851_d68a_4c47_8785_1555308d7b2f(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (int num : lst) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        int max = -1;
        int maxFreq = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxFreq) {
                max = entry.getKey();
                maxFreq = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_13_b8b18924_9876_4f90_95c7_3fe4ea3c855b(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_9_bb502059_8a6a_400a_9795_c5c21efdd979(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : lst) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_16_9cb17680_3432_4520_8741_64ca626f7700(ArrayList<Integer> lst) {
        // Write your code here
        // To print results to the standard output you can use System.out.println()
        // Example: System.out.println("Hello world!");
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1L);
            }
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l && l > max) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_3e8a3c5d_b761_4e5f_9f95_58f9f48f65a3(ArrayList<Integer> lst) {
        List<Integer> sortedLst = lst.stream().sorted().collect(Collectors.toList());
        
        int first = sortedLst.get(0); // first value
        int max = first;
        int cnt = 0;
        
        for (int i = 0; i < sortedLst.size(); i++) {
            if (sortedLst.get(i) > 0 && sortedLst.get(i) <= max) {
                cnt++;
                max = sortedLst.get(i);
            }
        }
        
        if (cnt >= sortedLst.size() || max <= 0) {
            return -1L;
        }
        
        for (int i = 0; i < sortedLst.size(); i++) {
            if (sortedLst.get(i) > 0 && sortedLst.get(i) == max) {
                return i;
            }
        }
        
        return -1L;
    }

    
    public static int search_Problem_1_5aa3fa29_a18e_427a_89f7_ce7b6ec148bc(ArrayList<Integer> lst) {
        int frequency = lst.stream().filter(l -> l > 0).count();
        return frequency > lst.stream().filter(l -> l == frequency).findFirst().get() ? frequency : -1;
    }

    
    public static int search_Problem_2_2ac433cc_9d94_4f88_8207_97bc3d906dad(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        int currFreq = -1;
        for (int val : lst) {
            if (currFreq == -1) {
                currFreq = val;
            } else if (currFreq == val) {
                currFreq++;
            } else {
                if (currFreq > maxFreq) {
                    maxFreq = currFreq;
                    maxVal = val;
                }
                currFreq = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_19_78ad8ef9_2073_4f95_9a1d_301eb4cc3cc9(ArrayList<Integer> lst) {

        // Write your code here.
        // return -1;
        // return lst.stream().max(Comparator.comparing(x -> x)).get();
        // return lst.stream().max(Comparator.comparing(x -> x, Comparator.reverseOrder())).get();
        // return lst.stream().max(Comparator.comparing(x -> x, Comparator.reverseOrder())).orElse(-1);
        // return lst.stream().max(Comparator.comparing(x -> x, Comparator.reverseOrder())).orElseGet(() -> -1);
        return lst.stream().max(Comparator.comparing(x -> x, Comparator.reverseOrder())).orElseThrow(() -> new NoSuchElementException("No such element"));
    }

    
    public static int search_Problem_20_cded93f0_9517_4016_90bf_d9a277377c64(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_f519dbb0_1c57_49f3_a1ed_c9c73f1c3e92(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_8_e8958298_7e39_4b9c_b444_f15a4957b583(ArrayList<Integer> lst) {
        int res = -1;
        int max = 0;
        for(int l: lst) {
            if(l > 0 && Collections.frequency(lst, l) >= l) {
                max = Math.max(max, l);
            }
        }
        if(max > 0) {
            res = max;
        }
        return res;
    }

    
    public static int search_Problem_23_8763d3c4_406c_43dd_afca_d0b71a7b4752(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_18_6d418d7a_bf84_4a1d_bbc9_6595d8ac0c8a(ArrayList<Integer> lst) {

        int max = 0;
        int count = 0;
        for (Integer i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_20_36b4d001_5b52_4083_b0ed_0210ca2abb2b(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i = max; i > 0; i--) {
            int count = 0;
            for (int j : lst) {
                if (j == i) {
                    count++;
                }
            }
            if (count >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_0_8f4ac413_1655_42ca_9dcf_89fdbb7a8c7c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_3_6692aec4_7570_45ae_9265_3fe643aba115(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_1_a8ca56d6_4f8c_43e0_8a63_4c34057329df(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_3_7ad8c680_4f0c_4b72_bbfe_365e5afda47d(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_0eda4a74_83e7_4ce2_9dc9_7aab7dfc1ab6(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_a1b5dcc2_40ae_499b_831e_d91bfe1583be(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1) {
                freq = i;
                max = i;
            } else if (freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_21_3e145535_1c77_4f29_8812_4e8b48462b91(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_dbb0591f_fbd3_457d_b7b1_5471fb3eb46f(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_7d7ed025_55c2_4ff1_836d_2858f5c1f32d(ArrayList<Integer> lst) {
        int n = lst.size();
        if(n==0)
            return -1;
        int max = -1;
        for(int i = 0; i < n; i++) {
            if(lst.contains(i))
                if(lst.size()>1) {
                    int temp = 1;
                    for(int j = 0; j < i; j++)
                        temp *= lst.size();
                    if(temp>max)
                        max = temp;
                }
                else
                    max = i;
        }
        return max;
    }

    
    public static int search_Problem_2_c1a000df_51a9_4de0_b82a_91ca7794fc54(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                maxKey = l;
            }
        }
        if (max == 0) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_8_fea260ed_00af_4da5_9cfc_aa0d6727d55e(ArrayList<Integer> lst) {

        int max = 0;
        int max_count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                max_count++;
            }
        }
        if (max_count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_15_e212a1f1_f93d_4e56_9b82_0f6694364ea0(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_e7de9ea7_ad79_4da6_9c83_d15e86ac7f33(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (int i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxKey = i;
            }
        }
        if (max == 0) {
            return -1;
        } else {
            return maxKey;
        }
    }

    
    public static int search_Problem_18_9c380ee4_490a_472e_9f4e_e9184d1ac3ad(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_6_33109515_e93c_4c5d_b0a1_c3a2dbf94bbb(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_10_225c38f8_d7ef_4736_93c3_24d79881f2d3(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0L) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) == max) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_4_f7e3167e_8b63_4a62_a341_e86c7d346513(ArrayList<Integer> lst) {
        if (lst.isEmpty()) return -1;
        int max = 0;
        int count = 1;
        for (Integer v : lst) {
            count += 1;
            if (v > max) max = v;
        }
        if (count >= max) return -1;
        for (Integer v : lst) {
            if (v == max) break;
            if (v > max) max = v;
        }
        return max;
    }

    
    public static int search_Problem_6_2fa52d0b_0839_47f3_a0cb_76a7d1d6c8ab(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_18_0a755a50_3a6b_4701_aeef_43767dd5ca7e(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_f7533adc_d4ff_4760_ae85_f6f488c80560(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_12_6669a8e6_6402_406c_ae72_2ade63dc4fa7(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_10_707b2625_500e_4722_86c2_23df7a9249e1(ArrayList<Integer> lst) {

        // your code here
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : lst) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_5_a70d730f_4724_4508_9a0b_8c5e194e2fa0(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq++;
            if(freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_20_c1fe37b2_95bd_4059_901f_4bbdafaae479(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_8_51a19348_3e22_4559_af38_f780fe18066d(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_12_0c910242_f1ce_4ba0_98fd_4ee16ebc5a8e(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        for(int i : lst){
            if(lst.stream().filter(x -> x == i).count() >= i){
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_7679f6a5_cb5e_4cfe_ad77_2ef6b274fa98(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_8_4e2a0a04_f9a9_49f5_8974_f8303201d523(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_9_6242e2bc_00ba_462b_aa6a_f5a8f1e4c375(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_8_3595d5e4_acfb_45db_9df4_69276cd8efad(ArrayList<Integer> lst) {
        int maxVal = -1;
        int freq = -1;
        for(Integer val : lst) {
            freq = Collections.frequency(lst, val);
            if(freq >= val) break;
            maxVal = val;
        }
        return maxVal;
    }

    
    public static int search_Problem_22_f8c33cc5_7c29_4773_9b27_933f8457cbee(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        int res = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
            if (maxFreq >= lst.size()) {
                res = max;
                break;
            }
        }
        return res;
    }

    
    public static int search_Problem_10_a30e2ddc_8ca9_4bb3_aafc_37fb6c1416c9(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l,  1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > entry.getKey()) {
                return entry.getKey();
            }
        }
        return -1;
    }

    
    public static int search_Problem_2_aea215f5_0418_4ad0_a18f_1dffd1766d81(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_0_e94e0ad4_1cc4_4b6a_b9ba_1324142df0eb(ArrayList<Integer> lst) {

        // write your code here
        if(lst.size() == 0) return -1;
        int max = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for(int i : lst) {
            if(map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for(Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if(entry.getValue() > max) {
                max = entry.getValue();
            }
        }
        if(max == 0) return -1;
        for(Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if(entry.getValue() == max) {
                return entry.getKey();
            }
        }
        return -1;
    }

    
    public static int search_Problem_9_a50b11b3_466b_42f0_811d_554e19aee8ce(ArrayList<Integer> lst) {

        // Sort the list in descending order
        Collections.sort(lst, Collections.reverseOrder());

        // Iterate through the sorted list
        for (int num : lst) {
            // Check if the frequency of the current number is greater than or equal to the number itself
            if (Collections.frequency(lst, num) >= num) {
                return num;
            }
        }

        // If no such number exists, return -1
        return -1;
    }

    
    public static int search_Problem_16_afc0f7ec_bfe5_4707_9919_7e615d90612f(ArrayList<Integer> lst) {

        int greatest = 0;
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > greatest) {
                greatest = i;
            }
        }
        return greatest;
    }

    
    public static int search_Problem_8_7ee72e5c_ac1f_42fa_ad8a_1dfa72fc4265(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        int maxVal = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
                maxVal = l;
            } else if (l == max) {
                maxFreq++;
                if (maxFreq > maxFreq) {
                    maxVal = l;
                }
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return maxVal;
    }

    
    public static int search_Problem_9_b9cf0650_86b1_4a00_84ce_93cfd4a76ae8(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int res = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                res = l;
            }
        }
        if (max == 0) {
            return -1;
        }
        return res;
    }

    
    public static int search_Problem_23_29a8d98e_854c_4bc1_9c20_02434485f5fa(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_10_51a19348_3e22_4559_af38_f780fe18066d(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_10_f536f9e2_62f3_4cf2_a5fc_56cb9b050672(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int max_count = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max_count) {
                max_count = map.get(l);
                max = l;
            }
        }
        if (max_count < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_18_53e25d72_6df1_408a_87f9_6da0fd58b7f6(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_17_319a0590_2afc_4659_84b6_0a96a38b8024(ArrayList<Integer> lst) {
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? -1 : max;
    }

    
    public static int search_Problem_22_d35d357e_3a35_44ca_8a1c_f79e1d106e6d(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_28084cab_464b_408e_b679_c23d56f0a015(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_17_05c71f8b_76ab_4242_b491_9b95ac8175d6(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_17_d89a4c21_e28d_4b3b_a7bd_8535543f2662(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_15_1f708036_12b7_460b_b5ff_a5aa58640225(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? max : -1;
    }

    
    public static int search_Problem_13_61183238_b94c_4596_b7d7_7b7cc3b251a3(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_d1b5376b_7823_44e6_8545_3fae5869aef0(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxCount = 1;
            } else if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_17_0a51231b_964c_4f87_b4ae_cb963a24bb11(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_18_d1b5376b_7823_44e6_8545_3fae5869aef0(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxCount = 1;
            } else if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_14_459fe921_e172_41b8_8416_3429e9220c4c(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_24_299d5e51_4166_4b36_a624_0648594a9de1(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_58dd976e_2d6c_475c_a12f_d9b80f02988d(ArrayList<Integer> lst) {
        int freq = 0;
        int i = 0;
        int maxVal = -1;

        if (lst == null) {
            return -1;
        }

        for (i = 0; i <= lst.size(); i++) {
            if (lst.get(i) > 0) {
                freq += lst.get(i);
            }
        }
        for (i = freq; i >= 0; i--) {
            if (lst.get(i) > 0) {
                maxVal = lst.get(i);
                break;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_4_8e5acdb4_b131_4aae_b425_2c25a06bd96d(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                if (val > maxVal) {
                    maxVal = val;
                    maxFreq = lst.get(lst.indexOf(val));
                }
            }
        }
        return maxFreq > maxVal ? maxVal : -1;
    }

    
    public static int search_Problem_11_33039bb6_d7a0_4504_a080_5900bcfb3092(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_14_0a29c9ad_95a7_44f3_9da7_c0111180682e(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer num : lst) {
            if (map.containsKey(num)) {
                map.put(num, map.get(num) + 1);
            } else {
                map.put(num, 1);
            }
        }
        int max = -1;
        int max_num = -1;
        for (Integer num : map.keySet()) {
            if (map.get(num) > max) {
                max = map.get(num);
                max_num = num;
            }
        }
        if (max == -1) {
            return -1;
        }
        return max_num;
    }

    
    public static int search_Problem_7_4fd9682f_407d_437b_8706_7783032d5802(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        Integer max = map.entrySet().stream().max(Comparator.comparing(Map.Entry::getValue)).get().getKey();
        if (max > 0 && map.get(max) >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_19_5a25abac_0d57_498a_bcb7_de0ced493309(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_dbe4d6d4_62d0_4301_b609_f2a61d315130(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_3_e3c5540d_4395_440e_8d1d_c33aa55084ae(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_69c99530_4186_494c_bf36_cf6353e82cd7(ArrayList<Integer> lst) {

        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
            }
        }
        if (max == -1) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_6_186dd976_2ed1_4bcd_b511_6a16f6d2f00f(ArrayList<Integer> lst) {
        Collections.sort(lst);
        for(int i = 0; i< lst.size(); i++) {
            if((i+1)==lst.size() || lst.get(i+1)<lst.get(i) || lst.get(i)<0) {
                return -1;
            }
        }
        return lst.get(lst.size()-1);
    }

    
    public static int search_Problem_11_b2de7891_f13f_451c_88d5_8163d2c03eed(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == -1) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_14_5f3e9c8d_974f_4ced_8c7a_7d862358da27(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_1_2f589fc6_ffd4_482f_9f55_63630e529816(ArrayList<Integer> lst) {
        int max = -1;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (freq > max) {
                max = freq;
            }
            if (freq == i) {
                freq++;
            }
        }
        return max;

    }

    
    public static int search_Problem_0_86b212c1_2474_4c36_aa95_a72ba990a3e5(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_24c5dd80_8386_4ee1_9f6f_454049e7515f(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : freq.keySet()) {
            if (freq.get(l) > max) {
                max = freq.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_18_f67ac6c6_c4f6_4428_9f39_b6561862b179(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_20_53c45ca3_c863_463d_882c_f69b5b765f37(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_fd1651cd_509c_40cb_8063_b0ffff74725a(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > max) {
                max = lst.get(i);
                maxFreq = 1;
            } else if (lst.get(i) == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_19_b4d18c45_b4ac_4bd4_a8d0_0ecc5ea17e8a(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq += i;
            if(freq > max) {
                max = freq;
            }
        }
        return max;

    }

    
    public static int search_Problem_18_262273fd_c4df_45c9_b386_3c421d4cc978(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        int max = 0;
        int count = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > max) {
                max = lst.get(i);
                count = 1;
            } else if (lst.get(i) == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_8_874b6e7e_c5ca_4364_9f07_386e22fb3ead(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (Integer i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxKey = i;
            }
        }
        if (max == 1) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_0_578ac7f3_4bdc_4c11_b4c8_389e98359c30(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_6_8a9f54f8_42c0_41a7_ae4b_9734bd53d82c(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_24_ba93473d_544a_4d69_87af_69d1a9f7f9cb(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_16_f0ae8283_a57e_476d_8bc4_e77a26a8f42c(ArrayList<Integer> lst) {
        int max = lst.get(0), min = lst.get(0);
        for(int i = 1; i < lst.size(); i++){
            int curr = lst.get(i);
            if(curr > max){
                max = curr;
            }else if(curr < min){
                min = curr;
            }
        }
        return (lst.indexOf(min) > lst.indexOf(max)) ? -1 : max;
    }

    
    public static int search_Problem_24_de5d529e_9fdf_46e7_99d6_9cad8e31443d(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        Integer max = 0;
        Integer maxKey = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_21_a569d824_7d7b_4532_bd11_1d608635859d(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max && Collections.frequency(lst, i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_e8958298_7e39_4b9c_b444_f15a4957b583(ArrayList<Integer> lst) {
        int res = -1;
        int max = 0;
        for(int l: lst) {
            if(l > 0 && Collections.frequency(lst, l) >= l) {
                max = Math.max(max, l);
            }
        }
        if(max > 0) {
            res = max;
        }
        return res;
    }

    
    public static int search_Problem_11_443c4e41_1bdd_41ce_85de_619ea96542f6(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_18_1e3145ff_a160_4db6_863b_c8053b5983b0(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxVal == -1 || maxFreq < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq == i) {
                maxFreq++;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_6_824cae87_cdcd_4694_8e5e_89326c1e3c36(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_9_f058ba41_e5a0_4800_9b6e_ef0c19812839(ArrayList<Integer> lst) {
        return lst.stream().filter(i -> Collections.frequency(lst, i) >= i).max(Comparator.naturalOrder()).orElse(-1);
    }

    
    public static int search_Problem_9_e86f8def_382a_45d4_916b_55a33a1a3db1(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_17_dadc9b23_ed8d_4c7d_8f45_e2726e97b609(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        for (int i : lst) {
            if (i > max && Collections.frequency(lst, i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_f77b1e34_3bbb_4322_8a73_5d2b63878856(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        int maxKey = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                maxKey = l;
            }
        }
        return maxKey;
    }

    
    public static int search_Problem_0_8524091b_f699_4449_b40a_36bb4d5c8dd7(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int max_index = -1;
        for(int i = 0; i < lst.size(); i++) {
            if(lst.get(i) > max) {
                max = lst.get(i);
                max_index = i;
            }
        }
        if(max == 0) {
            return -1;
        }
        int count = 0;
        for(int i = 0; i < lst.size(); i++) {
            if(lst.get(i) == max) {
                count++;
            }
        }
        if(count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_3_f78bf424_c487_40e8_a66e_4ea77900de9d(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_a56c1ec0_3f20_4a6b_9ee3_68441f11d6c0(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxCount = 1;
            } else if (i == max) {
                maxCount++;
            }
        }
        for (int i : lst) {
            if (i >= max && maxCount <= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_17_978babc0_0f3a_4bdc_aefb_f018fb981e99(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_1c7c640c_d17d_4b24_b2e7_ed3edaa7f58e(ArrayList<Integer> lst) {
        Set<Integer> set = new HashSet<>();
        for (Integer value : lst) {
            if (!set.add(value)) {
                return -1;
            }
        }
        Integer max = lst.stream().max(Integer::compare).get();
        for (Integer value : lst) {
            if (value > max) {
                return -1;
            }
            if (lst.stream().filter(x -> x == value).count() < set.size()) {
                return -1;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_8548a2a2_1e5a_49d1_bf60_691e7ec64705(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_10_5dbf939e_7873_48a0_aaa7_512febd4d1a2(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_24_97e87b77_709b_41b7_9f57_b5a0cd936b0f(ArrayList<Integer> lst) {

        if (lst.size() == 0) {
            return -1;
        }
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (int i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxKey = i;
            }
        }
        if (max == 1) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_21_5aa3fa29_a18e_427a_89f7_ce7b6ec148bc(ArrayList<Integer> lst) {
        int frequency = lst.stream().filter(l -> l > 0).count();
        return frequency > lst.stream().filter(l -> l == frequency).findFirst().get() ? frequency : -1;
    }

    
    public static int search_Problem_23_2fa52d0b_0839_47f3_a0cb_76a7d1d6c8ab(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_4f014b42_44fa_4dfe_837f_cc16057e2f6c(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int max_key = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                max_key = l;
            }
        }
        if (max == 0) {
            return -1;
        }
        return max_key;
    }

    
    public static int search_Problem_24_35eb9028_5680_43ad_882f_ff56830995fd(ArrayList<Integer> lst) {
        int max = -1;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (freq > max) {
                max = freq;
            }
            if (i == 0) {
                freq--;
            }
        }
        return max;

    }

    
    public static int search_Problem_2_6f60d3cf_0320_4744_9bc1_9b32d36631a8(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_24_01ef0a80_621a_425c_8647_805f30677432(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().filter(e -> e.getKey() > 0 && e.getValue() >= e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_15_299d5e51_4166_4b36_a624_0648594a9de1(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_8daa32b0_a742_41c7_8e7e_00da5e9460a3(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_bea02bc5_45e1_487c_be6d_7ec8512ed43f(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l,  1);
            }
        }
        int max = -1;
        int maxKey = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        return maxKey;
    }

    
    public static int search_Problem_11_888e5da3_8912_47e2_8fab_e2d35337f456(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_8_614bbaac_06cb_4461_a4c8_c881c380bbb9(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            if (freq.containsKey(l)) {
                freq.put(l, freq.get(l) + 1);
            } else {
                freq.put(l, 1);
            }
        }
        int max = -1;
        int maxFreq = -1;
        for (Integer l : freq.keySet()) {
            if (freq.get(l) > maxFreq) {
                max = l;
                maxFreq = freq.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_24_0c478b7e_b4f3_4df5_84b5_f30f553e549e(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_05c833a1_8b87_4462_9611_b86f099518c7(ArrayList<Integer> lst) {
        if (lst.isEmpty()) {
            return -1;
        }
        int maxVal = lst.get(0);
        int maxCount = 0;
        for (Integer val : lst) {
            if (maxCount >= maxVal) {
                return -1;
            }
            if (maxVal != val && maxCount >= val) {
                return -1;
            }
            maxCount = maxCount + val;
            maxVal = maxVal;
        }
        return maxVal;
    }

    
    public static int search_Problem_13_d7f0cbf9_43cc_4f65_ad34_4495ef5a3db2(ArrayList<Integer> lst) {

        // Write your code here
        if(lst.size() == 0) return -1;
        Map<Integer, Integer> map = new HashMap<>();
        for(Integer l : lst) {
            if(map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for(Integer l : map.keySet()) {
            if(map.get(l) >= l) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_28a66528_b5c5_4a51_b874_82f91607e7e6(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxVal == -1 || maxVal < i) {
                maxVal = i;
                maxFreq = Collections.frequency(lst, i);
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_14_79265086_4662_4c32_b662_d8abff490dd1(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_21_1b721256_60fd_4c00_a78d_fe202989f1c0(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_701fb707_adf5_4196_97d9_77400ed6ecc3(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int count = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > max) {
                max = lst.get(i);
                count = 1;
            } else if (lst.get(i) == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_16_675a3c30_bc8f_46b4_9912_b82eb2b01bae(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            map.put(i, map.getOrDefault(i, 0L) + 1);
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_9_25876edf_2fe6_43cd_9680_e72e5c1d8599(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq == i) {
                maxFreq++;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_11_a46d49d1_a69c_46fb_ba40_8249650c89e2(ArrayList<Integer> lst) {
        int max = -1;
        HashMap<Integer, Integer> hm = new HashMap<Integer, Integer>();
        for (int val : lst) {
            hm.put(val, hm.getOrDefault(val, 0L) + 1);
            if (hm.getOrDefault(val, 0L) > max) {
                max = hm.getOrDefault(val, 0L);
            }
        }
        return max;
    }

    
    public static int search_Problem_2_f1764ce9_fd2f_4f02_8c46_19fe328ff713(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (lst.stream().filter(x -> x == i).count() >= i) {
                max = i;
                break;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_668e2531_7fc0_4f69_b0b7_5bafec63be61(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && max < i) {
                max = i;
                maxFreq = i;
            } else if (maxFreq == i) {
                maxFreq++;
            }
        }
        return max;

    }

    
    public static int search_Problem_21_f610483e_c8ff_481c_9f08_743fd1014af1(ArrayList<Integer> lst) {
        if (lst.size() < 1) return -1;
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            Integer prev = map.putIfAbsent(i, 0L);
            if (prev != null && prev > 0) map.put(i, map.get(prev) + 1);
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) > 0 && map.get(i) == lst.get(lst.indexOf(i))) return i;
        }
        return -1;
    }

    
    public static int search_Problem_20_a2f389cd_288a_4986_be0f_5cedd3c57758(ArrayList<Integer> lst) {
        if (lst.isEmpty()) {
            return -1;
        }
        Map<Integer, Integer> freq = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        Integer max = null;
        for (Integer l : freq.keySet()) {
            if (freq.containsKey(max) && freq.containsKey(l)) {
                continue;
            }
            if (freq.containsKey(max) && freq.get(l) >= freq.get(max)) {
                continue;
            }
            max = l;
        }
        return max;
    }

    
    public static int search_Problem_4_367c1eaa_e59a_47d9_af52_a85bc171d08e(ArrayList<Integer> lst) {

        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_2_6277725f_3c4d_43b7_914a_5bf1e3ff1aa3(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_1af2357a_e122_4336_a52b_0805cbf14114(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_bf4c9e57_c2aa_45b1_8c6a_a06b6a432f92(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                max = entry.getKey();
            }
        }
        return max;
    }

    
    public static int search_Problem_9_0f06a97f_e837_4f16_8ea0_88a1b43490eb(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        int res = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                res = l;
            }
        }
        return res;
    }

    
    public static int search_Problem_4_74168a89_fbd1_4f68_84a1_e17e4d8cd544(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_3_fbad1ffa_6d84_4957_bcfe_b5d6c97ad692(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_6c88fbf8_e889_476c_888f_cf6605d17058(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_5_b79abc39_c36a_40d5_96b8_35ecd4b18bea(ArrayList<Integer> lst) {
        int max = -1;
        int freq = 0;
        for (int i : lst) {
            freq += i;
            if (freq > max) {
                max = freq;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_f8d913c4_b7aa_4790_bb0f_186ab8f79c81(ArrayList<Integer> lst) {
        int result = -1;
        int max = -1;
        for(int i : lst) {
            if(i>0) {
                max = Math.max(max, i);
            }
        }
        if(max>0) {
            int freq = Collections.frequency(lst, max);
            if(freq>=max) {
                result = max;
            }
        }
        return result;
    }

    
    public static int search_Problem_11_5c8f93bf_b7e1_4d97_829d_332fb402f805(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1L);
            }
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_3_e1ec3170_86ec_4e3a_be5d_be7a685191d5(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_5_868744d5_061b_42ba_bd31_347cf59870d2(ArrayList<Integer> lst) {

        // Your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        for (Integer l : lst) {
            if (map.get(l) > l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_24_8a0d17ec_41a7_4988_8bdd_ecefa4836898(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        for (Integer l : freq.keySet()) {
            if (freq.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_4_e10d3f24_ad6a_4675_9848_4f6816faf14b(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq++;
            if(freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_6_c13d803b_d252_49d8_8325_b8a077cc7935(ArrayList<Integer> lst) {
        int greatestVal = -1;
        int greatestFreq = 0;
        for (int e : lst) {
            if (e > 0 && e >= greatestFreq) {
                greatestVal = e;
                greatestFreq = e;
            } else if (e > 0 && e < greatestFreq) {
                greatestFreq = e;
            }
        }
        if (greatestVal != -1) {
            return greatestVal;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_15_8e974f0a_5108_475a_986b_f79ec7b11b17(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_35bb5760_a94b_4bb2_b26f_2c01b3e1d760(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (i > max) {
                max = i;
            }
            if (freq > i) {
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_17_d16891fd_191b_4424_87c8_549fbb96d74b(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_3caad047_965b_4e7d_bca4_dffbb6eb95cd(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_10_d16891fd_191b_4424_87c8_549fbb96d74b(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_b3dcaee2_f724_43ee_b51e_3512c16eef53(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_16_287de844_87df_4d51_abaa_2c57adec9425(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq < i) {
                maxFreq = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_7_b2c715bc_b0ad_47ae_956b_20bf9af1a071(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_2f2c4628_7c24_4ec4_b67a_72286aac61e9(ArrayList<Integer> lst) {

        // Your code here
        int max = 0;
        int maxFreq = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
            if (map.get(i) > maxFreq) {
                max = i;
                maxFreq = map.get(i);
            }
        }
        return maxFreq > max ? max : -1;
    }

    
    public static int search_Problem_13_43fed902_f4ad_42a6_b935_82237ff13d35(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_21_412f26ba_b641_4334_9bec_0403666425df(ArrayList<Integer> lst) {
        // TODO: write your code here
        int max =  Math.pow(2, lst.size());
        int freq = -1;
        for(int i : lst) {
            if(freq == -1) {
                freq = 1;
                max = i;
            }
            freq += i;
            if(max > freq) {
                freq = max;
            }
        }
        return freq;
    }

    
    public static int search_Problem_8_7d663b95_95d0_4178_8f3a_961cf16ed7b1(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_13_4b69437d_1c4b_483c_87b6_50c1abab2ff4(ArrayList<Integer> lst) {
        int max = 0;
        for(int i : lst)
            if (i > 0) 
                max += i;
        if (max == 0) return -1;
        int freq = lst.stream().filter(i -> i > 0).count();
        return Math.max(max, freq);
    }

    
    public static int search_Problem_5_fdbdbebd_bc4e_4bf4_9041_aa13dd322cca(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        for (int i : lst) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_18_0a6096d5_4372_4400_8297_8790830c7d90(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_17_de6bc373_03d5_4f3e_adac_cbe1cb281e49(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_10_f67ac6c6_c4f6_4428_9f39_b6561862b179(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_2_910d2de5_22fe_4b1c_b9ef_317e08fb524d(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1L);
            }
        }
        Integer max = -1L;
        for (Integer l : map.keySet()) {
            if (l > 0 && map.get(l) >= l) {
                max = l;
                break;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_0bd0e132_c8bc_47ea_89f4_39a6754afc1b(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_2180d7bc_dec6_4f09_89ea_8563a1d5bd8b(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_ade86f90_b9c2_4b6d_9224_67a74f52122d(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_0cf9d3b9_cf12_40f0_a2b9_3e695d6c3b2d(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_09a29e15_1849_4f23_99ec_afcce5647d4a(ArrayList<Integer> lst) {
        int maxCount = 0;
        for (int number : lst) {
            if (number > 0) {
                Map<Integer, Integer> counts = new HashMap<Integer, Integer>();
                for (int count : lst) {
                    counts.merge(count, 1L, Integer::sum);
                }
                Integer frequency = counts.get(number);
                if (frequency >= maxCount) {
                    maxCount = frequency;
                }
            }
        }
        return maxCount == 0 ? -1 : maxCount;
    }

    
    public static int search_Problem_19_cc26bb8d_a824_4b9d_a1b5_ea4b29c0531d(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int i : lst) {
            if(i>0) {
                int freq = Collections.frequency(lst, i);
                if(freq>maxFreq) {
                    maxFreq = freq;
                    maxVal = i;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_24_98592086_92ab_4eb6_b017_004c7ca2b63b(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                maxFreq = val;
            } else if (val == maxVal) {
                maxFreq += val;
            }
        }
        return maxFreq;

    }

    
    public static int search_Problem_20_16381637_254d_4bb2_b2a9_d5276be51122(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (maxFreq < val && val > 0) {
                maxFreq = val;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_7_1f431f5d_5563_4792_b201_0d6315f4e178(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        int max = lst.get(0);
        int count = 1;
        for (int i = 1; i < lst.size(); i++) {
            if (lst.get(i) == max) {
                count++;
            } else if (lst.get(i) > max) {
                max = lst.get(i);
                count = 1;
            }
        }
        if (count >= max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_18_462b6cce_8427_49a4_9375_083f5433641a(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_8_a1cf6b7c_9fbb_4409_9039_60f09919eb1f(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_4_bd36282c_4ea7_4045_8098_f8537fd72fe5(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i = lst.size(); i > 0; i--) {
            if (map.containsKey(i) && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_11_29a72b13_82b1_40e7_bdda_363fd936b521(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_17_ef7da592_afdb_4a85_9fbb_8948e1a8acfb(ArrayList<Integer> lst) {

        int greatest = 0;
        for (int i : lst) {
            if (lst.stream().filter(x -> x == i).count() > lst.stream().filter(x -> x == i).mapToInteger(x -> x).max().getAsInteger()) {
                greatest = i;
            }
        }
        return greatest;
    }

    
    public static int search_Problem_4_4954a758_04cb_44a3_b32f_afa095afb6ef(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_18_d022dfc3_9c28_4c13_bf21_c4120b93fae8(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        int maxVal = 0;
        for (int l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
                maxVal = l;
            } else if (l == max) {
                maxFreq++;
                if (maxFreq > maxFreq) {
                    maxVal = l;
                }
            }
        }
        if (maxVal == 0) {
            return -1;
        }
        return maxVal;
    }

    
    public static int search_Problem_2_2a302c69_6936_40c8_a52a_59baf7d5a8ec(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer i : lst) {
            if (i > max) {
                max = i;
            }
            if (lst.stream().filter(j -> j == i).count() > maxFreq) {
                maxFreq = lst.stream().filter(j -> j == i).count();
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_0_1b7a9e93_b295_4d04_941d_5bdf97b791a3(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer x : lst) {
            map.put(x, map.getOrDefault(x, 0L) + 1L);
        }
        for (Integer x : lst) {
            if (x > 0 && map.get(x) >= x) {
                return x;
            }
        }
        return -1L;
    }

    
    public static int search_Problem_17_e1ec3170_86ec_4e3a_be5d_be7a685191d5(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_23_002cfffd_dea8_4915_9550_b5e8caf67023(ArrayList<Integer> lst) {

        int max = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_16_f2274e5d_e324_40b5_80af_bc21d27c9db9(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int max_count = 0;
        for(int i = 0; i < lst.size(); i++) {
            if(lst.get(i) > max) {
                max = lst.get(i);
                max_count = 1;
            } else if(lst.get(i) == max) {
                max_count++;
            }
        }
        if(max_count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_10_8f926e58_2ee7_40fe_b667_06ac21c60c7d(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i = lst.size(); i > 0; i--) {
            if (map.containsKey(i) && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_7_4e29768f_1939_40a6_b2dc_4234d554bb5b(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxCount = 1;
            } else if (i == max) {
                maxCount++;
            }
        }
        for (int i : lst) {
            if (i > max && i >= maxCount) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_14_6692aec4_7570_45ae_9265_3fe643aba115(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_11_c0cdea2e_2c78_4088_bf35_adb09df5421b(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_ba418f86_5ea9_4b98_8f34_a7ca21e10d9b(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_18_a3e98018_5032_4202_b6c3_0635ed1bb511(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_70ea03bb_f448_4bbe_a458_aac319e2ff4d(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > maxFreq) {
                max = i;
                maxFreq = freq;
            }
        }
        return maxFreq >= max ? max : -1;
    }

    
    public static int search_Problem_16_9ddaa53e_211e_44fc_80d0_8586daeabb49(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l,  1);
            }
        }
        int max = -1;
        int max_key = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                max_key = entry.getKey();
            }
        }
        if (max_key > 0) {
            return max_key;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_3_c8ed70b1_f901_4acf_9a46_375c80804d8a(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_5_2180d7bc_dec6_4f09_89ea_8563a1d5bd8b(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_1579013d_1449_480c_b590_98ba4e590b58(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_ec5b0056_2cdf_4640_897e_83efc0bbf2a4(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_0_4903da4d_797a_4cd9_814c_c2f9c7e23827(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (i > max) {
                max = i;
                freq = freq - 1;
            }
        }
        if (freq >= 0) {
            return max;
        }
        return -1;

    }

    
    public static int search_Problem_11_d2e6f719_6f55_464c_b732_a58fc97485fb(ArrayList<Integer> lst) {
        int maxVal = -1;
        int freq = -1;
        if (lst.isEmpty()) return -1;
        int val = lst.get(0);
        for (int i : lst) {
            freq += 1;
            if (val != i && freq >= i) {
                freq = -1;
                val = i;
            }
        }
        maxVal = val > 0 ? val : -1;
        return maxVal;
    }

    
    public static int search_Problem_6_dffe57b8_3c6f_4f6e_9e6e_c7afdf1ceff7(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : lst) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_22_beafc98f_ba4c_45a9_82ba_82dfe325ad6c(ArrayList<Integer> lst) {
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? -1 : max;
    }

    
    public static int search_Problem_2_a098d62a_a553_4ade_9a75_79535ff3a62b(ArrayList<Integer> lst) {

        // write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : lst) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_0_e425d09a_15c2_45b8_845d_a16e8b789bc8(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_ecb028a0_a766_4a35_9c2a_6a785d9845a0(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_fa12ac0f_d032_44a7_a218_2040f7ef6790(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                max_freq = Collections.frequency(lst, i);
            }
        }
        if (max_freq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_9_a569d824_7d7b_4532_bd11_1d608635859d(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max && Collections.frequency(lst, i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_6b3d4312_dd5e_4239_a5d6_c352dad46557(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        int max = 0;
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_1efe6143_4ecc_4bce_a638_14b0252b8dcc(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = -1;
        int maxKey = -1;
        for (Integer i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxKey = i;
            }
        }
        if (maxKey == -1) {
            return -1;
        } else {
            return maxKey;
        }
    }

    
    public static int search_Problem_13_f092c591_e37f_419c_941e_d72d1f899f89(ArrayList<Integer> lst) {
        int max = -1;
        int freq = lst.get(0);
        for (int elem : lst) {
            if (elem == freq) {
                ++freq;
            } else {
                if (freq > 0 && max < elem) {
                    max = elem;
                }
                freq = elem;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_f9a91ea7_0ded_49d6_a51c_77226db305cc(ArrayList<Integer> lst) {
        int mostFrequent = lst.get(0); // start at the first element
        int frequencyOfMostFrequent = 1;
        for (Integer l : lst) {
            if (l == mostFrequent) frequencyOfMostFrequent++;
            else {
                if (frequencyOfMostFrequent > 1) return -1;
                if (frequencyOfMostFrequent == 1) { // found a match
                    if (l > mostFrequent) mostFrequent = l;
                    frequencyOfMostFrequent = 1;
                }
            }
        }
        return mostFrequent;
    }

    
    public static int search_Problem_6_35bb5760_a94b_4bb2_b26f_2c01b3e1d760(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (i > max) {
                max = i;
            }
            if (freq > i) {
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_1_f2191aa3_912b_4821_ad45_fc6fa9606ba2(ArrayList<Integer> lst) {

        int max = 0;
        for (Integer i : lst) {
            if (i > max) {
                max = i;
            }
        }
        if (max == 0) {
            return -1;
        }
        int count = 0;
        for (Integer i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= 2) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_18_c1d55cdd_8455_4da2_9ecc_31f775f9df3f(ArrayList<Integer> lst) {

        // Your code here
        int max = 0;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_0_d7aadf7e_d5a2_412c_89e3_bca43e04b30c(ArrayList<Integer> lst) {
        Integer max = new Integer(0);
        Integer maxFreq = new Integer(0);
        for (Integer i : lst) {
            if (i > max) {
                max = i;
            }
            if (i.equals(max)) {
                maxFreq++;
            }
        }
        if (maxFreq >= max.intValue()) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_5_0765c1df_dfed_4bf5_a362_ae043f84ba89(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        int currFreq = -1;
        for(int val : lst) {
            currFreq = Collections.frequency(lst, val);
            if(currFreq > maxFreq) {
                maxFreq = currFreq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_16_a9601a57_c612_4d6b_af04_e92af8d37e9d(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_9_3d67b149_fd39_485d_a5a1_b49a57eb908f(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq += i;
            if (freq > max) {
                max = freq;
            }
        }
        return max;

    }

    
    public static int search_Problem_14_5c8f93bf_b7e1_4d97_829d_332fb402f805(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1L);
            }
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_8d5ccef5_0a87_4e3d_b458_c901f3828dd1(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_15_3268efba_ccfb_4f05_9679_4b71550a9b52(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            if (freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_0_4b9b24f9_3a40_4b6b_9d2d_3f41900fd8d9(ArrayList<Integer> lst) {
        int max = -1;
        int freq = 0;
        for (int i : lst) {
            if (i > 0 && freq >= i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_2_590ade4f_ecdb_43b3_aa90_866fc02988f5(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxCount = 0;
            }
            if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_12_91e81e14_9184_427b_b595_8cc448bad5f8(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        Integer max = freq.keySet().stream().max(Comparator.comparing(freq::get)).get();
        if (freq.get(max) >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_12_0192f9f5_ffcc_4467_9317_99a81a0c3b69(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1) {
                freq = i;
                max = i;
            } else if (freq >= i) {
                freq = i;
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_7a30a30e_2ae1_4a0c_988e_e619999aacef(ArrayList<Integer> lst) {

        // Write your code here.
        // Sort the list in descending order
        // Iterate through the list
        // If the current element is greater than 0 and has a frequency greater than or equal to the value of the 
        // element itself, return the element
        // Else return -1
        Collections.sort(lst, Collections.reverseOrder());
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > 0 && lst.indexOf(lst.get(i)) >= lst.lastIndexOf(lst.get(i))) {
                return lst.get(i);
            }
        }
        return -1;
    }

    
    public static int search_Problem_17_2eabff35_6818_4914_991f_1cc19c72cdd2(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1L);
            }
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == -1) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_15_5d00a8bb_74e5_4fe9_9ce3_3e7f1b05d25c(ArrayList<Integer> lst) {
        ArrayList<Integer> ints = new ArrayList<>();
        for(Integer x : lst) {
            if(ints.contains(x)) {
                ints.set(ints.indexOf(x), x + 1);
            } else {
                ints.add(x);
            }
        }
        int max = Integer.MIN_VALUE;
        for(int i = 0; i <= ints.size(); i++) {
            for(int j = i+1; j <= ints.size(); j++) {
                if((ints.get(i) + ints.get(j)) > max) {
                    max = ints.get(i) + ints.get(j);
                }
            }
        }
        return max;
    }

    
    public static int search_Problem_18_88d5a93a_86b1_43f7_af50_43aae8c1b9d3(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_438e5491_ce92_45d3_9d79_14736aab8b56(ArrayList<Integer> lst) {
        int max = -1;
        int freq = 0;
        for (int i : lst) {
            if (freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_11_6ea44e65_c02c_44c2_a843_3905ab5cb9c5(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_4_2b40d52b_9e3e_470a_aa85_81edd5fbc187(ArrayList<Integer> lst) {
        return lst.stream()
                .max(Comparator.comparingInteger(l -> l))
                .orElse(-1);
    }

    
    public static int search_Problem_6_f45920f4_2c88_40a8_a6d6_d5f2669b5d9c(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        int res = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                res = l;
            }
        }
        return res;
    }

    
    public static int search_Problem_14_a76018a9_b777_4e54_bcfd_ef24de85fda2(ArrayList<Integer> lst) {

        // Write your code here
        return lst.stream().max(Comparator.comparing(x -> x, Comparator.reverseOrder())).get();
    }

    
    public static int search_Problem_18_2e93e5a3_1734_4ad7_b875_ea461684de26(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (int num : lst) {
            map.put(num, map.getOrDefault(num, 0L) + 1);
        }
        for (int key : map.keySet()) {
            if (map.get(key) >= key) {
                return key;
            }
        }
        return -1;
    }

    
    public static int search_Problem_15_8a9f54f8_42c0_41a7_ae4b_9734bd53d82c(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_3_24fa5aa5_b2b3_4381_b653_f344fdc9f3f6(ArrayList<Integer> lst) {
        Map<Integer, Integer> map = new TreeMap<>();
        lst.stream().forEach(e -> map.put(new Integer(e), map.getOrDefault(new Integer(e), 0) + 1));
        boolean exists = False;
        for (Integer e : map.keySet()) {
            if (map.get(e) >= map.get(new Integer(e))) {
                exists = True;
                return e;
            }
        }
        if (exists) {
            return -1;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_6_ff79d7a1_77fb_4df5_aa41_6b440c3af591(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_8_553b982f_e39f_4f57_b88f_9e717eb4d935(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            int count = Collections.frequency(lst, i);
            if (count > maxCount) {
                max = i;
                maxCount = count;
            }
        }
        return maxCount >= max ? max : -1;
    }

    
    public static int search_Problem_7_c1d55cdd_8455_4da2_9ecc_31f775f9df3f(ArrayList<Integer> lst) {

        // Your code here
        int max = 0;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_20_185ac59e_a2b3_4da3_8655_da24d367de87(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_3e8d7fd4_2d6c_4aa4_a19d_95b9799e186a(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        int maxFreq = -1;
        for (Integer l : freq.keySet()) {
            if (freq.get(l) > maxFreq) {
                max = l;
                maxFreq = freq.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_5_fe95951f_1754_4bd1_8ce2_5b1f696310e5(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (int i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxKey = i;
            }
        }
        return maxKey;
    }

    
    public static int search_Problem_17_c35640fa_aa3f_48d6_a057_91adab4104c2(ArrayList<Integer> lst) {

        if (lst.size() == 0) return -1;
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (int i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxKey = i;
            }
        }
        return maxKey;
    }

    
    public static int search_Problem_23_d9347604_7ae9_4699_a95b_5e3d35df81d8(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int max_freq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                max_freq = 1;
            } else if (l == max) {
                max_freq++;
            }
        }
        if (max_freq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_11_38b6050a_75f1_491e_83ff_1ca314d3e5c6(ArrayList<Integer> lst) {

        // Write your code here
        return lst.stream().max(Comparator.comparing(x -> x, Comparator.reverseOrder())).get();
    }

    
    public static int search_Problem_0_81197c84_773c_42d8_bbd5_0f9988bb0255(ArrayList<Integer> lst) {
        ArrayList<Integer> newList = new ArrayList<Integer>(lst);
        if (newList.size() == 0) {
            return -1;
        }
        Set<Integer> unique = new HashSet<Integer>(newList);
        unique.remove(-1);
        if (unique.size() > 1) {
            return -1;
        }
        return newList.get(0);
    }

    
    public static int search_Problem_0_2d2b6741_1865_4bdb_8d23_cf6e7f5a76d7(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (int l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        int maxCount = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxCount) {
                max = entry.getKey();
                maxCount = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_8_750ad179_bfe8_4741_b68a_8e2237b91c5d(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxCount = 0;
        for (int val : lst) {
            if (val > 0) {
                int count = Collections.frequency(lst, val);
                if (count > maxCount) {
                    maxCount = count;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_20_07a12481_6096_4095_801f_ab01ac79465c(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_3_ce173da5_5189_4260_b53e_8b817c89c31e(ArrayList<Integer> lst) {
        int largest = -1;
        int frequency = 0;
        for (Integer i : lst)
            if (i >= frequency) {
                frequency = i;
                largest = i;
            }
        return largest;
    }

    
    public static int search_Problem_10_a6f82188_4b0c_4a53_9d8d_b645f1eafb4b(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxCount = 0;
        for(int val : lst) {
            int count = Collections.frequency(lst, val);
            if(count > maxCount) {
                maxCount = count;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_13_c8ed70b1_f901_4acf_9a46_375c80804d8a(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_6_d7c25666_a9d7_4e5c_b3fc_a87374cc145c(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_3c7429de_ef0b_4943_9311_e2ba85e27244(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1) {
                freq = i;
                max = i;
            } else if (freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_3_2ed0fa47_7c0a_4e2d_a206_eb63c3c8ec2a(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            if (freq == 0 || freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_15_579d2ac8_eda9_4327_a7a4_b30927f58a2c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i) {
                maxFreq = i;
                maxVal = i;
            } else if (maxFreq == i) {
                maxVal = Math.max(maxVal, i);
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_11_4bfc7632_cf07_47a2_a833_34ea7fcdc216(ArrayList<Integer> lst) {

        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                max = entry.getKey();
            }
        }
        return max;
    }

    
    public static int search_Problem_18_2a302c69_6936_40c8_a52a_59baf7d5a8ec(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer i : lst) {
            if (i > max) {
                max = i;
            }
            if (lst.stream().filter(j -> j == i).count() > maxFreq) {
                maxFreq = lst.stream().filter(j -> j == i).count();
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_1_13ec23a7_dd48_46e5_8d0f_1ff525981f7f(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int maxCount = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxCount) {
                maxCount = entry.getValue();
                max = entry.getKey();
            }
        }
        if (maxCount < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_20_46353ace_b544_4908_9e10_eafbf10af0c8(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (int l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_23_39a9c84d_f8bb_4ac4_8cd0_e08eb9d59f04(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().filter(e -> e.getValue() > e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_17_9bfec60d_13a4_4098_b41b_2d2517b28eda(ArrayList<Integer> lst) {

        // your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : lst) {
            if (map.get(i) > i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_20_8f21bf7b_9b46_41fb_b46e_a848b496d777(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_ae104091_9cb6_42d6_955b_af81059a964c(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_19fedcd6_8e8c_4627_95a5_f4203af6effd(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (i > max) {
                max = i;
            }
            if (freq > i) {
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_21_92270013_e717_4770_ab31_6466abbc39d2(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_5_dbfe8fe3_bac5_4c59_9bf2_1867501e2092(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_19_6cc5f290_3007_465c_883a_80feac3900b6(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == -1) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_22_0b05cc89_e346_4a9b_9b03_7142fcf49fdd(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x, Comparator.reverseOrder())).get();
    }

    
    public static int search_Problem_15_fa40bb23_2f84_492f_989a_1dbd14ed45a2(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_22_c5bf7352_d040_485f_91c1_f2424e572a04(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_13_faba636e_1360_4711_a0f5_87a878d589a9(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_0caae58c_d127_4ab8_b75f_abc7c26e5a52(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            } else if (val == maxVal && val > maxFreq) {
                maxFreq = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_23_d360e37e_9163_4632_b0cd_c06c63dcc7d9(ArrayList<Integer> lst) {
        int n = lst.size();
        int max = 0;
        for (int l : lst) {
            int t = Collections.frequency(lst, l);
            if (max < t && t >= 0) {
                max = t;
            }
        }
        if (max == -1) {
            throw new RuntimeException("Empty List");
        }
        return max;
    }

    
    public static int search_Problem_22_56b6dc6f_9d66_407a_a641_4524402d355e(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_24_51a19348_3e22_4559_af38_f780fe18066d(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_11_fe537a25_4100_42ce_91a4_149b1117b720(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_579d2ac8_eda9_4327_a7a4_b30927f58a2c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i) {
                maxFreq = i;
                maxVal = i;
            } else if (maxFreq == i) {
                maxVal = Math.max(maxVal, i);
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_5_f9a91ea7_0ded_49d6_a51c_77226db305cc(ArrayList<Integer> lst) {
        int mostFrequent = lst.get(0); // start at the first element
        int frequencyOfMostFrequent = 1;
        for (Integer l : lst) {
            if (l == mostFrequent) frequencyOfMostFrequent++;
            else {
                if (frequencyOfMostFrequent > 1) return -1;
                if (frequencyOfMostFrequent == 1) { // found a match
                    if (l > mostFrequent) mostFrequent = l;
                    frequencyOfMostFrequent = 1;
                }
            }
        }
        return mostFrequent;
    }

    
    public static int search_Problem_21_2b40d52b_9e3e_470a_aa85_81edd5fbc187(ArrayList<Integer> lst) {
        return lst.stream()
                .max(Comparator.comparingInteger(l -> l))
                .orElse(-1);
    }

    
    public static int search_Problem_7_36c780b1_f15c_4cbd_9600_95a55bd48700(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq++;
            if(freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_22_651d625e_3138_47fb_8d7c_84cd129d98e2(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (lst.stream().filter(x -> x == i).count() >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_e2d66cb1_f756_4277_aa82_10aa4a3e1ac7(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq >= maxFreq) {
                maxFreq = freq;
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_10_1f431f5d_5563_4792_b201_0d6315f4e178(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        int max = lst.get(0);
        int count = 1;
        for (int i = 1; i < lst.size(); i++) {
            if (lst.get(i) == max) {
                count++;
            } else if (lst.get(i) > max) {
                max = lst.get(i);
                count = 1;
            }
        }
        if (count >= max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_7_f0c2bec4_b033_48c0_99d7_eb8bc3d12b50(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int max_count = 0;
        for(int i : lst) {
            if(i > max) {
                max = i;
                max_count = 1;
            } else if(i == max) {
                max_count++;
            }
        }
        if(max_count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_21_bf15a6c4_ccb7_413f_a501_795ecf5456d2(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_16_867df0da_7ac7_4bea_b0d0_6e9aeebb5728(ArrayList<Integer> lst) {

        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                max = entry.getKey();
            }
        }
        return max;
    }

    
    public static int search_Problem_10_287de844_87df_4d51_abaa_2c57adec9425(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq < i) {
                maxFreq = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_7_fe537a25_4100_42ce_91a4_149b1117b720(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_3c7429de_ef0b_4943_9311_e2ba85e27244(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1) {
                freq = i;
                max = i;
            } else if (freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_9_9a161387_41dd_41fd_b585_2a4a8861a587(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        for(Integer l : lst){
            if(l > max){
                max = l;
            }
        }
        if(max == -1){
            return -1;
        }
        int count = 0;
        for(Integer l : lst){
            if(l == max){
                count++;
            }
        }
        if(count >= 2){
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_23_e97844f4_ea8c_48db_879b_8ec179f2d772(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_15_01ef0a80_621a_425c_8647_805f30677432(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().filter(e -> e.getKey() > 0 && e.getValue() >= e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_16_079e386e_2d6e_4e3a_8f2a_d76ecdc65225(ArrayList<Integer> lst) {
        int maxValue = -1;
        int maxCount = 0;
        for (Integer l : lst) {
            int count = Collections.frequency(lst, l);
            if (count > maxCount) {
                maxCount = count;
                maxValue = l;
            }
        }
        return maxValue;
    }

    
    public static int search_Problem_19_e47f8fb2_1b80_499e_bdd5_eaa88ee7013a(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            }
        }
        return maxFreq > maxVal ? maxFreq : -1;

    }

    
    public static int search_Problem_20_678772f7_416e_446b_a653_8df0f365ead5(ArrayList<Integer> lst) {

        int max = 0;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_4_d604689f_bee1_42e6_8a6a_d3255efa242f(ArrayList<Integer> lst) {

        // write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) == max) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_16_95ba8216_d86f_4cf2_a7df_66f656d5a462(ArrayList<Integer> lst) {

        Map<Integer, Integer> freq = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : freq.keySet()) {
            if (freq.get(l) > max) {
                max = freq.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_23_ee9f81bc_5517_4132_a194_b1703219898b(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l,  1);
            }
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l && l > max) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_c44b5dc4_ad4b_4230_ac68_a4b56f43f8d7(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_5_c2921377_348a_4770_ac1a_875547fa11a0(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_18_8ac45b89_8cae_44dc_9aa0_42ed0dd23b6f(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_8daa32b0_a742_41c7_8e7e_00da5e9460a3(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_d68e2ca0_54a5_4ac5_91c1_fd138ce992f7(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxCount = 0;
        for (int val : lst) {
            if (val > 0) {
                int count = lst.stream().filter(i -> i == val).count();
                if (count > maxCount) {
                    maxCount = count;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_10_c6dfa2f1_16ad_4bb5_807d_392cae09cec7(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        int maxVal = 0;
        for (Integer i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxVal = i;
            }
        }
        if (maxVal > 0) {
            return maxVal;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_9_47fb9e3c_2c95_4f94_892c_29b74be492e8(ArrayList<Integer> lst) {

        int max = -1;
        for(int i = 0; i < lst.size(); i++) {
            if(lst.get(i) > max && lst.get(i) >= lst.get(i)) {
                max = lst.get(i);
            }
        }
        return max;
    }

    
    public static int search_Problem_0_083749b3_cdff_4705_b138_b3f0fbfa82ee(ArrayList<Integer> lst) {
        Integer max = -1;
        int counter = 0;
        for (Integer value : lst) {
            if (value > max) {
                counter = 0;
                max = value;
            }
            else if (value == max) {
                counter++;
            }
            else if (counter > 0) {
                return -1;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_56811ddc_b69c_43a7_9a14_fbd669ad45c3(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_10_e86f8def_382a_45d4_916b_55a33a1a3db1(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_2a302c69_6936_40c8_a52a_59baf7d5a8ec(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer i : lst) {
            if (i > max) {
                max = i;
            }
            if (lst.stream().filter(j -> j == i).count() > maxFreq) {
                maxFreq = lst.stream().filter(j -> j == i).count();
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_23_d4e90559_aa80_4ae4_b4b6_aaf779727126(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_15_bbe47d47_26f0_4719_8639_03179a454ac6(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i = lst.size(); i > 0; i--) {
            if (map.containsKey(i) && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_3_b9663e76_b45a_47bb_939f_3791547e761e(ArrayList<Integer> lst) {

        // write your code in Java SE 8
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_18_6b3d4312_dd5e_4239_a5d6_c352dad46557(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        int max = 0;
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_3473c74f_3484_4b8b_a0b6_2e82f068dbd0(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxCount) {
                max = l;
                maxCount = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_2_4fd882ea_b6c5_4c08_9588_69d197f81ab3(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_5_8f4ac413_1655_42ca_9dcf_89fdbb7a8c7c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_21_6db59539_cc6e_404b_8c07_7dff820f79e0(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (max < 0 || maxFreq < 0 || i < 0 || i > max) {
                max = i;
                maxFreq = 1;
            } else if (maxFreq < i) {
                max = i;
                maxFreq = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_a09aaed8_8004_4cbc_8502_7834bac7afbe(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_11_bec517b7_0f1b_498f_91fd_721a94703e8b(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == -1) {
            return -1;
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) == max) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_9_428d0206_4219_492b_90b8_ef75a59009b3(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        int freq = 0;
        for (int i = 0; i < lst.size(); i++) {
            int num = lst.get(i);
            freq = 0;
            for (int j = 0; j < lst.size(); j++) {
                if (num == lst.get(j)) {
                    freq++;
                }
            }
            if (freq > max_freq) {
                max = num;
                max_freq = freq;
            }
        }
        if (max_freq < max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_12_3fc6ad30_c6ac_4de9_a084_fc3e56aca284(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparingInteger(x -> x)).get();
    }

    
    public static int search_Problem_16_05c833a1_8b87_4462_9611_b86f099518c7(ArrayList<Integer> lst) {
        if (lst.isEmpty()) {
            return -1;
        }
        int maxVal = lst.get(0);
        int maxCount = 0;
        for (Integer val : lst) {
            if (maxCount >= maxVal) {
                return -1;
            }
            if (maxVal != val && maxCount >= val) {
                return -1;
            }
            maxCount = maxCount + val;
            maxVal = maxVal;
        }
        return maxVal;
    }

    
    public static int search_Problem_14_b11c6e4e_8771_4985_bdbb_f3c4ad8cd620(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                return max;
            }
        }
        return -1;
    }

    
    public static int search_Problem_19_5f3e9c8d_974f_4ced_8c7a_7d862358da27(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_14_2ed0fa47_7c0a_4e2d_a206_eb63c3c8ec2a(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            if (freq == 0 || freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_21_aa5c96a1_f135_429e_86d3_2eb602e7a801(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_3_43a6cd90_22f2_4532_b09d_0525caf2078b(ArrayList<Integer> lst) {

        int max = 0;
        for (Integer i : lst) {
            if (i > max) {
                max = i;
            }
        }
        if (max == 0) {
            return -1;
        }
        int count = 0;
        for (Integer i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_14_efcf3711_4144_4d55_be5b_c59cef68a378(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (int l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        for (int l : lst) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_2_d64f5498_9be5_49c4_b9cb_42e9cdf9cb16(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && i > max) {
                max = i;
                maxFreq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_9_39a9c84d_f8bb_4ac4_8cd0_e08eb9d59f04(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().filter(e -> e.getValue() > e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_11_8d9acf83_59a9_4708_a5fa_229e15b01e6f(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_17_35eb9028_5680_43ad_882f_ff56830995fd(ArrayList<Integer> lst) {
        int max = -1;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (freq > max) {
                max = freq;
            }
            if (i == 0) {
                freq--;
            }
        }
        return max;

    }

    
    public static int search_Problem_0_2180d7bc_dec6_4f09_89ea_8563a1d5bd8b(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_6ac158d9_6375_46e5_965a_040a21d26cec(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparingInteger(x -> x)).get();
    }

    
    public static int search_Problem_21_f00118e6_ad16_4bf0_866a_85d5fab26b65(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            }
        }
        return maxFreq;

    }

    
    public static int search_Problem_23_2ed0fa47_7c0a_4e2d_a206_eb63c3c8ec2a(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            if (freq == 0 || freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_17_f0c2bec4_b033_48c0_99d7_eb8bc3d12b50(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int max_count = 0;
        for(int i : lst) {
            if(i > max) {
                max = i;
                max_count = 1;
            } else if(i == max) {
                max_count++;
            }
        }
        if(max_count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_15_8f6732a2_671d_4c17_99fd_101b799b3975(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                if(maxFreq < val) maxFreq = val;
                if(maxVal < val) maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_12_fa12ac0f_d032_44a7_a218_2040f7ef6790(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                max_freq = Collections.frequency(lst, i);
            }
        }
        if (max_freq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_19_888e5da3_8912_47e2_8fab_e2d35337f456(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_7ad8c680_4f0c_4b72_bbfe_365e5afda47d(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_f577e1b9_a3ac_4b9c_b602_b1c97ca515b0(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_f76096c3_88e3_4b7e_a30f_8475a697a2dc(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_0_57b3c05a_484e_4b8d_a2fa_599f6271d319(ArrayList<Integer> lst) {

        // your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        for (int l : map.keySet()) {
            if (map.get(l) >= l && l > max) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_ec3d4a0e_aa24_4def_98f0_eca5f20864aa(ArrayList<Integer> lst) {

        int[] arr = lst.stream().mapToInteger(Integer::intValue).toArray();
        Arrays.sort(arr);
        for (int i = arr.length - 1; i >= 0; i--) {
            if (arr[i] > 0 && arr[i] <= arr.length - i) {
                return arr[i];
            }
        }
        return -1;
    }

    
    public static int search_Problem_17_56811ddc_b69c_43a7_9a14_fbd669ad45c3(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_5_95bf6511_83b7_486d_b00b_452e2fa92b2f(ArrayList<Integer> lst) {

        // Your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        for (Integer l : lst) {
            if (map.get(l) > l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_15_32bd9d50_1c6b_4de8_a2fc_bb2c31925c2e(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_9d19affd_f562_4c99_bd6b_aa43ff22cd58(ArrayList<Integer> lst) {
        if (lst.size() == 0) {
            return -1;
        }
        Collections.sort(lst);
        int result = lst.get(0);
        int max = lst.get(0);
        for (int i : lst) {
            if (i > max) {
                max = i;
                result = i;
            } else if (i > result) {
                result = i;
            }
        }
        return result;
    }

    
    public static int search_Problem_2_2ff1c5cb_53fa_418a_9d36_0392ef6a6cae(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            int freq = lst.stream().filter(j -> j == i).count();
            if (freq >= maxFreq) {
                max = i;
                maxFreq = freq;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_f56c86b4_0e85_4370_93bf_f52786f6c000(ArrayList<Integer> lst) {

        int max = -1;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_5_5f8c35d2_a488_4d86_b91d_656286247ad3(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_f7c3e795_3f8a_4957_ad85_82fb83bc5805(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_7_e6d4c08b_be33_4561_ad8b_49b4b408ebb2(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        int max = lst.get(0);
        int maxFreq = 1;
        for (int i = 1; i < lst.size(); i++) {
            if (lst.get(i) > max) {
                max = lst.get(i);
                maxFreq = 1;
            } else if (lst.get(i) == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_6_b8775e85_f0ba_4ada_8d5c_f56c60132baf(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxVal == -1 || maxFreq < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq == i) {
                maxFreq++;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_17_11507560_26e7_4dae_9648_155379cbc2da(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l,  1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_3_ee14dc35_0105_4691_8614_eb0bcf8c3e00(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            } else if (val == maxVal) {
                if (val > maxFreq) {
                    maxFreq = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_13_4954a758_04cb_44a3_b32f_afa095afb6ef(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_8d669a90_440d_4a83_a3bb_96c55d024d8e(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                return entry.getKey();
            }
        }
        return -1;
    }

    
    public static int search_Problem_11_f663888b_49c0_4cc0_bada_097ac0b02fb0(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        for(int i : lst){
            if(i > max && Collections.frequency(lst, i) >= i)
                max = i;
        }
        return max;
    }

    
    public static int search_Problem_21_1a629829_e4f4_400f_b412_b3d43d8cc4b2(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max == 0 ? -1 : max;
    }

    
    public static int search_Problem_15_8524091b_f699_4449_b40a_36bb4d5c8dd7(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int max_index = -1;
        for(int i = 0; i < lst.size(); i++) {
            if(lst.get(i) > max) {
                max = lst.get(i);
                max_index = i;
            }
        }
        if(max == 0) {
            return -1;
        }
        int count = 0;
        for(int i = 0; i < lst.size(); i++) {
            if(lst.get(i) == max) {
                count++;
            }
        }
        if(count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_20_8491c644_cd66_462e_bcc6_fdf4cf5fd456(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq >= maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_17_2f589fc6_ffd4_482f_9f55_63630e529816(ArrayList<Integer> lst) {
        int max = -1;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (freq > max) {
                max = freq;
            }
            if (freq == i) {
                freq++;
            }
        }
        return max;

    }

    
    public static int search_Problem_2_d2bfefac_a1c1_4075_b9b0_2e8e83c57da9(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_22_24c5dd80_8386_4ee1_9f6f_454049e7515f(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : freq.keySet()) {
            if (freq.get(l) > max) {
                max = freq.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_13_d97049ce_a9b4_4cc2_9a42_059774fb3bb9(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                maxFreq = val;
            } else if (val == maxVal && val >= maxFreq) {
                maxFreq++;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_15_629abe9b_b619_47ed_afb3_447c2cb1e3ea(ArrayList<Integer> lst) {

        int max = 0;
        int max_count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                max_count++;
            }
        }
        if (max_count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_22_a7a0eb0b_2222_45e3_8620_ec1bf72ea500(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_8_0689962a_1a77_4b98_bd8e_3354bbafc106(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                max_freq = 1;
            } else if (l == max) {
                max_freq++;
            }
        }
        if (max_freq == 0) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_13_cfc5e22a_afec_432c_86bd_b5f973ccd322(ArrayList<Integer> lst) {

        int max = 0;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_6_6db59539_cc6e_404b_8c07_7dff820f79e0(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (max < 0 || maxFreq < 0 || i < 0 || i > max) {
                max = i;
                maxFreq = 1;
            } else if (maxFreq < i) {
                max = i;
                maxFreq = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_11_26ac39da_6cb9_464a_af24_a2edcf907444(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        for (int i : lst) {
            if (lst.stream().filter(x -> x == i).count() >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_a1cf6b7c_9fbb_4409_9039_60f09919eb1f(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_23_c4a9cbf7_74e6_435b_b3ba_5d63cdc1453c(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = 0;
        for (int i : lst) {
            int freq = lst.stream().filter(j -> j == i).count();
            if (freq >= maxFreq) {
                max = i;
                maxFreq = freq;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_5df75cfb_3dea_4d52_8bf5_991c81cc9f1c(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_c95feff2_fa70_4a44_b10f_6dc0f08ee1aa(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_6_f7b62fa6_8ed5_45d8_a90c_d66f467bf9d9(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            if (freq.containsKey(l)) {
                freq.put(l, freq.get(l) + 1);
            } else {
                freq.put(l, 1);
            }
        }
        for (Integer l : freq.keySet()) {
            if (freq.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_6_0ea1256f_ed59_467a_af86_d7e68405f48f(ArrayList<Integer> lst) {
        // >>> YOUR CODE HERE <<<
        return -1;
    }

    
    public static int search_Problem_7_0ab3c683_7408_4aab_b7a4_2e4ab8ea9d51(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            int count = Collections.frequency(lst, i);
            if (count > maxCount) {
                maxCount = count;
                max = i;
            }
        }
        return maxCount >= max ? max : -1;
    }

    
    public static int search_Problem_12_4c567db6_a742_4fda_8675_f9752d1f84d3(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_3_b59dd5f8_ee18_4d52_b136_4414f92d12a1(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_16_9cefe690_bd2b_49b0_9d8e_46d52218f92f(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_10_b5174484_455a_495d_9c18_7b57ba60cc63(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > max_freq) {
                max = i;
                max_freq = freq;
            }
        }
        if (max_freq > 0 && max > 0 && max_freq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_8_3d67b149_fd39_485d_a5a1_b49a57eb908f(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq += i;
            if (freq > max) {
                max = freq;
            }
        }
        return max;

    }

    
    public static int search_Problem_10_a87503d9_88b9_4c86_a40b_0f310e3d9040(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > max) {
                max = lst.get(i);
                maxFreq = 1;
            } else if (lst.get(i) == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_17_3e8d7fd4_2d6c_4aa4_a19d_95b9799e186a(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        int maxFreq = -1;
        for (Integer l : freq.keySet()) {
            if (freq.get(l) > maxFreq) {
                max = l;
                maxFreq = freq.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_10_96f70579_66cb_4abc_bbd0_089ccfbcf1f9(ArrayList<Integer> lst) {
        int max = -1;
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1L);
            }
        }
        for (Integer i : lst) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_c6dfa2f1_16ad_4bb5_807d_392cae09cec7(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        int maxVal = 0;
        for (Integer i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxVal = i;
            }
        }
        if (maxVal > 0) {
            return maxVal;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_11_4f035a71_2fb6_4287_9075_16a110eb9a6e(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int max_freq = 0;
        int curr_freq = 0;
        int curr = 0;
        for (int i = 0; i < lst.size(); i++) {
            curr = lst.get(i);
            curr_freq = 0;
            for (int j = 0; j < lst.size(); j++) {
                if (lst.get(j) == curr) {
                    curr_freq++;
                }
            }
            if (curr_freq > max_freq) {
                max_freq = curr_freq;
                max = curr;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_de6bc373_03d5_4f3e_adac_cbe1cb281e49(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_4_334762fa_6ee3_46fa_ab9f_4a0ae8e4805e(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_651d625e_3138_47fb_8d7c_84cd129d98e2(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (lst.stream().filter(x -> x == i).count() >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_16381637_254d_4bb2_b2a9_d5276be51122(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (maxFreq < val && val > 0) {
                maxFreq = val;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_8_81197c84_773c_42d8_bbd5_0f9988bb0255(ArrayList<Integer> lst) {
        ArrayList<Integer> newList = new ArrayList<Integer>(lst);
        if (newList.size() == 0) {
            return -1;
        }
        Set<Integer> unique = new HashSet<Integer>(newList);
        unique.remove(-1);
        if (unique.size() > 1) {
            return -1;
        }
        return newList.get(0);
    }

    
    public static int search_Problem_2_25876edf_2fe6_43cd_9680_e72e5c1d8599(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq == i) {
                maxFreq++;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_15_fd64c3a1_0fe9_426f_b2bd_2bae9b297988(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_3_bb502059_8a6a_400a_9795_c5c21efdd979(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : lst) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_3_6152d800_ef67_4e73_85cf_28fb6323eb1b(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq += i;
            if (freq > max) {
                max = freq;
            }
        }
        return max > 0 ? max : -1;

    }

    
    public static int search_Problem_15_a50b11b3_466b_42f0_811d_554e19aee8ce(ArrayList<Integer> lst) {

        // Sort the list in descending order
        Collections.sort(lst, Collections.reverseOrder());

        // Iterate through the sorted list
        for (int num : lst) {
            // Check if the frequency of the current number is greater than or equal to the number itself
            if (Collections.frequency(lst, num) >= num) {
                return num;
            }
        }

        // If no such number exists, return -1
        return -1;
    }

    
    public static int search_Problem_20_33039bb6_d7a0_4504_a080_5900bcfb3092(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_5_1361118a_c032_4e42_a50d_810a440eccc7(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i) {
                maxFreq = i;
                maxVal = i;
            } else if (maxFreq == i) {
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_8_0ec461a1_7b9d_411f_be7c_fbb811407705(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        int freq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                freq = 1;
            } else if (i == max) {
                freq++;
            }
            if (freq > max_freq) {
                max_freq = freq;
            }
        }
        if (max_freq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_1_49b07bd6_9602_4e17_91f6_96b598496d8b(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().max(Comparator.comparing(Map.Entry::getValue)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_17_8ae1e2dd_99cb_41a9_a70b_53fe862d7c84(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_11_bd36282c_4ea7_4045_8098_f8537fd72fe5(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i = lst.size(); i > 0; i--) {
            if (map.containsKey(i) && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_21_39c6be5c_f181_4018_bbaf_f92b1fed4793(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > maxFreq) {
                maxFreq = freq;
                max = i;
            }
        }
        return maxFreq >= max ? max : -1;
    }

    
    public static int search_Problem_7_1df64ee5_35f4_4334_8514_23f69b55e251(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        for (Integer l : lst) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_22_5d00a8bb_74e5_4fe9_9ce3_3e7f1b05d25c(ArrayList<Integer> lst) {
        ArrayList<Integer> ints = new ArrayList<>();
        for(Integer x : lst) {
            if(ints.contains(x)) {
                ints.set(ints.indexOf(x), x + 1);
            } else {
                ints.add(x);
            }
        }
        int max = Integer.MIN_VALUE;
        for(int i = 0; i <= ints.size(); i++) {
            for(int j = i+1; j <= ints.size(); j++) {
                if((ints.get(i) + ints.get(j)) > max) {
                    max = ints.get(i) + ints.get(j);
                }
            }
        }
        return max;
    }

    
    public static int search_Problem_16_826978c2_4132_4923_9e2c_e4f7c74ce9b4(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_18_9ab888f3_d807_4efc_a185_ba39091716b6(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_12_febffe4c_7c48_43fb_9283_fbc5885a60cb(ArrayList<Integer> lst) {

        // your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : lst) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_15_13ec23a7_dd48_46e5_8d0f_1ff525981f7f(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int maxCount = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxCount) {
                maxCount = entry.getValue();
                max = entry.getKey();
            }
        }
        if (maxCount < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_23_abf973f4_cfa6_4382_a98f_129f796c2456(ArrayList<Integer> lst) {

        int max = 0;
        int count = 0;
        for (Integer i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_19_8f6732a2_671d_4c17_99fd_101b799b3975(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                if(maxFreq < val) maxFreq = val;
                if(maxVal < val) maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_17_fe4c43d2_bf90_483d_a3d7_ced4bd7a4cf5(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_d44a7008_596e_42f0_a8aa_5db9fc59593a(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxKey = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (maxKey > 0) {
            return maxKey;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_10_1dcaea22_6357_4eb9_9c5f_5de3c82f6456(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = Integer.MIN_VALUE;
        for (int i : map.keySet()) {
            if (map.get(i) > i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_18_fdbdbebd_bc4e_4bf4_9041_aa13dd322cca(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        for (int i : lst) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_13_15ac33c0_ed98_4bf7_ba18_94155cc5e4a4(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == -1) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_22_f8c85f9b_954f_4c29_95b1_28db766d95b8(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            }
        }
        return maxFreq > maxVal ? maxVal : -1;

    }

    
    public static int search_Problem_14_42025dce_f4d4_499c_a20a_61336bb28c7d(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_6_d16fe193_2bac_48c5_b013_bdd4c58c3ca2(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_6f20ffa2_c6bb_4b6e_bb19_ae5f09986472(ArrayList<Integer> lst) {
        int max = 0;
        Map<Integer, Integer> freqs = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (freqs.get(i) == null) {
                freqs.put(i, 1);
            } else {
                freqs.put(i, freqs.get(i) + 1);
            }
        }
        for (Map.Entry<Integer, Integer> e : freqs.entrySet()) {
            if (e.getValue() >= max) {
                max = e.getValue();
            }
        }
        return max == 0 ? -1 :  max;
    }

    
    public static int search_Problem_1_64e868ac_f600_4e4e_8917_40cab66a699e(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_9396907f_0e66_4f00_9139_c7e56d4292c9(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_12_12081ec7_ea74_4416_99d9_20288b05a825(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_0_c95feff2_fa70_4a44_b10f_6dc0f08ee1aa(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_14_4b9b24f9_3a40_4b6b_9d2d_3f41900fd8d9(ArrayList<Integer> lst) {
        int max = -1;
        int freq = 0;
        for (int i : lst) {
            if (i > 0 && freq >= i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_18_3db7e9c5_ceee_4ffb_bedc_f11410e449cf(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_12_5d9995f5_d56e_44bb_b5bd_15cc057242b3(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_27f219c4_56e6_4ee6_8b73_30f4ac804e15(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (int l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_18_c7310735_6be8_4b9c_b10c_ea2ed58299c1(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream()
                .filter(e -> e.getValue() > e.getKey())
                .map(Map.Entry::getKey)
                .max(Comparator.naturalOrder())
                .orElse(-1);
    }

    
    public static int search_Problem_6_10ddea85_ab3c_4e2a_b241_c845e57298d2(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq == i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq > i && maxVal == i) {
                maxFreq = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_24_5df75cfb_3dea_4d52_8bf5_991c81cc9f1c(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_00833c3b_34bf_4783_a4b9_ed68d217b82c(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_18_013f9225_ae45_4ca5_b58d_7756bb52240b(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_d58852e8_cdfa_4ba5_99cc_f35a90c3caad(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int max_count = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max_count) {
                max = entry.getKey();
                max_count = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_4_629abe9b_b619_47ed_afb3_447c2cb1e3ea(ArrayList<Integer> lst) {

        int max = 0;
        int max_count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                max_count++;
            }
        }
        if (max_count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_7_3e145535_1c77_4f29_8812_4e8b48462b91(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_dfb83ede_4ec2_476a_9447_704ce5a27918(ArrayList<Integer> lst) {
        int highest = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq >= i) {
                highest = i;
            }
        }
        return highest == 0 ? -1 : highest;
    }

    
    public static int search_Problem_5_1f431f5d_5563_4792_b201_0d6315f4e178(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        int max = lst.get(0);
        int count = 1;
        for (int i = 1; i < lst.size(); i++) {
            if (lst.get(i) == max) {
                count++;
            } else if (lst.get(i) > max) {
                max = lst.get(i);
                count = 1;
            }
        }
        if (count >= max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_9_b7dfde52_fd88_4d30_8de6_1b3c9be2d8e5(ArrayList<Integer> lst) {
        int result = -1;
        int max = 0;
        for (int val : lst) {
            max = Math.max(max, val);
        }

        for (int val : lst) {
            int freq = lst.stream().filter(x -> x > val).count();
            if (freq >= val) {
                result = val;
                break;
            }
        }

        return result;
    }

    
    public static int search_Problem_19_dc8272b0_ff73_44d7_b39e_f7519f720be6(ArrayList<Integer> lst) {

        // Write your code here.
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        return max == 0 ? -1 : max;
    }

    
    public static int search_Problem_19_780b7289_75d6_46cb_8921_cf7353c10850(ArrayList<Integer> lst) {

        // Your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_3_0f866524_ff3f_427c_90cc_cba4208c378d(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_24_675a3c30_bc8f_46b4_9912_b82eb2b01bae(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            map.put(i, map.getOrDefault(i, 0L) + 1);
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_8_8491c644_cd66_462e_bcc6_fdf4cf5fd456(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq >= maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_13_5d509a83_b434_4710_808a_22a9e5cc1930(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_10_55c22ca2_2cd7_4a25_b626_609ea36130bb(ArrayList<Integer> lst) {
        int max = 0;
        int curr = 0;
        for (int n : lst) {
            curr += n;
            if (curr > max)
                max = curr;
        }
        return max > 0 ? max : -1;
    }

    
    public static int search_Problem_5_c5bf7352_d040_485f_91c1_f2424e572a04(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_2_8d5ccef5_0a87_4e3d_b458_c901f3828dd1(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_15_b6a4fe3c_e799_49c3_955b_7473ff4e27ec(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i : lst) {
            if (i > 0 && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_19_e3c7dfd5_6779_4ded_8546_0c464f87229b(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_9_e73fe1b3_983f_498e_9757_214bff361e98(ArrayList<Integer> lst) {
        int max = lst.stream().max(Integer::compare).get();
        int freq = lst
                .stream()
                .filter(elem -> elem.intValue() == max)
                .count();
        if (freq > 0) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_0_ad10a305_a151_4a6d_bafa_bed9770c0ce2(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        int max = 0;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_5688ca13_6ed6_41d8_b4d5_94e30601f4b1(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq == -1 || maxFreq < i) {
                maxFreq = i;
                max = i;
            } else if (maxFreq == i) {
                maxFreq++;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_dddd1869_c12a_4d3f_8dc9_4fc84742ce5d(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        Integer max = freq.entrySet().stream().max((a, b) -> a.getValue().compareTo(b.getValue())).get().getKey();
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_5_55c6327a_1461_49fd_a5f2_55a72f09859d(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i = 0; i < lst.size(); i++) {
            Integer key = lst.get(i);
            if (map.containsKey(key)) {
                map.put(key, map.get(key) + 1);
            } else {
                map.put(key, 1);
            }
        }
        Integer max = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            Integer key = entry.getKey();
            Integer value = entry.getValue();
            if (value > max) {
                max = value;
            }
        }
        if (max == -1) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_5_1dfd4fcf_42c9_4cae_8e26_ff239a13c4fa(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_21_6669a8e6_6402_406c_ae72_2ade63dc4fa7(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_7_f2c4ffd4_2df7_4d6e_83e6_8666b8862220(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().max(Comparator.comparing(Map.Entry::getValue)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_16_dddd1869_c12a_4d3f_8dc9_4fc84742ce5d(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        Integer max = freq.entrySet().stream().max((a, b) -> a.getValue().compareTo(b.getValue())).get().getKey();
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_0_d825d98b_a9b6_4606_ad70_1f35921857d5(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxVal == -1 || maxFreq < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq == i) {
                maxFreq++;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_12_597e05cb_850b_49fb_afe3_18bc354dd74a(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1) {
                freq = i;
                max = i;
            } else if (freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_18_a8ca56d6_4f8c_43e0_8a63_4c34057329df(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_78fba301_a269_4638_8e03_6ed10f2315f8(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_1bdc2693_ab39_48e9_8c4c_af49d12409ed(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (int i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxKey = i;
            }
        }
        if (maxKey > 0) {
            return maxKey;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_18_e8593fb8_72d3_402c_8c08_63c872061934(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_23_e8a7e3d5_8885_4064_b024_5a8e628cbf9a(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_24_af6059f2_4fb5_46c1_9566_58544955986b(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_11_eac62b13_ceb0_44be_b219_0f916914bb9c(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_10_21d52cb1_0804_4f0c_8ccc_fab82aa80fec(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_22_f52f6a24_24bf_433a_bfa6_aa3349bf8867(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_f7533adc_d4ff_4760_ae85_f6f488c80560(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_8_5f421520_cc72_4859_9ab6_b84342ae0e6d(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxCount) {
                max = l;
                maxCount = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_21_12f8fb30_1b07_49d7_b530_622e50ce2cea(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_7_74c6d266_8b0c_481c_a3b2_0c818252626e(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (maxVal == -1 || maxVal < val) {
                maxVal = val;
                maxFreq = val;
            } else if (maxFreq >= val) {
                maxFreq = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_1_79caf2ef_647d_44fe_95d9_29a20c8e4884(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_07a12481_6096_4095_801f_ab01ac79465c(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_3_1c3abb21_9ccf_4a1d_8533_03935e1e4355(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                if (lst.stream().filter(x -> x == i).count() >= i) {
                    return i;
                }
            }
        }
        return -1;
    }

    
    public static int search_Problem_21_33109515_e93c_4c5d_b0a1_c3a2dbf94bbb(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_14_822dead6_a7e1_48aa_a064_7e170f9013dd(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i = 0; i < lst.size(); i++) {
            int freq = 0;
            for (int j = 0; j < lst.size(); j++) {
                if (lst.get(i) == lst.get(j)) {
                    freq++;
                }
            }
            if (freq > maxFreq) {
                max = lst.get(i);
                maxFreq = freq;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_082237b1_df40_428a_93c7_cab6c457b0c4(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        int max = 0;
        for (int i : lst) {
            if (map.get(i) > i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_5a588fa0_a8cc_425d_9a2b_f68a732aac65(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (int l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int max_count = 0;
        for (int l : map.keySet()) {
            if (map.get(l) > max_count) {
                max = l;
                max_count = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_11_7b5d253b_d1d3_45bc_a107_e7a0cfb4d431(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_19_8be40d32_07ac_49a1_95b3_dee65efcc156(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_13_0c478b7e_b4f3_4df5_84b5_f30f553e549e(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_93e505ab_763c_4367_b7e8_4971673ba635(ArrayList<Integer> lst) {
        int max = lst.stream().filter(e -> e > 0).max(Integer::compareTo).get();
        int maxCount = 0;
        for (int e : lst) {
            if (e > 0 && e > max) max = e;
            ++maxCount;
        }
        return max > 0 ? max : -1;
    }

    
    public static int search_Problem_12_67b6b72c_b9ae_4569_b45e_303baa0345af(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_082237b1_df40_428a_93c7_cab6c457b0c4(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        int max = 0;
        for (int i : lst) {
            if (map.get(i) > i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_18_668e2531_7fc0_4f69_b0b7_5bafec63be61(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && max < i) {
                max = i;
                maxFreq = i;
            } else if (maxFreq == i) {
                maxFreq++;
            }
        }
        return max;

    }

    
    public static int search_Problem_7_185ac59e_a2b3_4da3_8655_da24d367de87(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_fc5f7dfc_3ffe_4e47_b552_83096aab811f(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_1_59a441f8_50e6_4041_bf26_4f6157dca69d(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for(int i : lst) {
            if(i > max) {
                max = i;
            }
            if(lst.stream().filter(x -> x == i).count() > maxFreq) {
                maxFreq = lst.stream().filter(x -> x == i).count();
            }
        }
        if(maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_8_97959a70_5f3b_4be2_941f_dd9639df8c3d(ArrayList<Integer> lst) {

        int max = -1;
        for (int i = 0; i < lst.size(); i++) {
            int count = 0;
            for (int j = 0; j < lst.size(); j++) {
                if (lst.get(j) == i) {
                    count++;
                }
            }
            if (count >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_12f8fb30_1b07_49d7_b530_622e50ce2cea(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_6_d7f0cbf9_43cc_4f65_ad34_4495ef5a3db2(ArrayList<Integer> lst) {

        // Write your code here
        if(lst.size() == 0) return -1;
        Map<Integer, Integer> map = new HashMap<>();
        for(Integer l : lst) {
            if(map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for(Integer l : map.keySet()) {
            if(map.get(l) >= l) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_cdbbb7b6_ea55_4a24_b36a_7a7bf9f6f666(ArrayList<Integer> lst) {

        int max = 0;
        int max_count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                max_count = 1;
            } else if (i == max) {
                max_count++;
            }
        }
        for (int i : lst) {
            if (i > 0 && i <= max && i >= max_count) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_7_8abbe1eb_1846_4af9_979d_53989507a551(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_de5d529e_9fdf_46e7_99d6_9cad8e31443d(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        Integer max = 0;
        Integer maxKey = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_4_d7f0cbf9_43cc_4f65_ad34_4495ef5a3db2(ArrayList<Integer> lst) {

        // Write your code here
        if(lst.size() == 0) return -1;
        Map<Integer, Integer> map = new HashMap<>();
        for(Integer l : lst) {
            if(map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for(Integer l : map.keySet()) {
            if(map.get(l) >= l) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_5540641d_49d2_421e_a2d7_3c729b4f62e6(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        } else {
            return maxKey;
        }
    }

    
    public static int search_Problem_12_f5952a8f_1497_4e64_842a_bb7364fc76da(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_6_c0088b1b_e2e2_43a5_af31_ae6b084f6e88(ArrayList<Integer> lst) {
        // Write your code here
        int n = lst.size();
        Map<Integer, Integer> m = new HashMap<>();
        for (int i = 0; i < n; i++) {
            if (m.containsKey(lst.get(i))) {
                m.merge(lst.get(i), lst.get(i), Integer::sum);
            } else {
                m.put(lst.get(i), 1);
            }
        }
        if (m.isEmpty()) {
            return -1;
        }
        for (Map.Entry<Integer, Integer> entry : m.entrySet()) {
            if (entry.getValue() > lst.size() * 1.0 / n) {
                return -1;
            }
        }
        int max = Integer.MIN_VALUE;
        for (Map.Entry<Integer, Integer> entry : m.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_9_81197c84_773c_42d8_bbd5_0f9988bb0255(ArrayList<Integer> lst) {
        ArrayList<Integer> newList = new ArrayList<Integer>(lst);
        if (newList.size() == 0) {
            return -1;
        }
        Set<Integer> unique = new HashSet<Integer>(newList);
        unique.remove(-1);
        if (unique.size() > 1) {
            return -1;
        }
        return newList.get(0);
    }

    
    public static int search_Problem_20_3e145535_1c77_4f29_8812_4e8b48462b91(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_fc1eef5c_8903_400d_905f_cceeaa48630d(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxCount) {
                max = entry.getKey();
                maxCount = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_24_28ccfdc0_cef2_41d6_9ccb_fac153b98d80(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for(int i : lst) {
            if(map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for(int i : map.keySet()) {
            if(map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_24_2f614d3c_e852_4600_821f_3df555fe65c5(ArrayList<Integer> lst) {
        int maxVal = lst.get(0);
        for (int i = 0; i < lst.size(); ++i) {
            if (lst.get(i) >= maxVal) {
                maxVal = lst.get(i);
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_19_8f4ac413_1655_42ca_9dcf_89fdbb7a8c7c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_4_707b2625_500e_4722_86c2_23df7a9249e1(ArrayList<Integer> lst) {

        // your code here
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : lst) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_15_988aba6d_c89f_400b_8901_74ba69f39ca1(ArrayList<Integer> lst) {
        int max = -1;
        int count = 0;
        for (Integer i : lst) {
            count++;
            if (i > 0)
                if (count > max)
                    max = count;
            else
                count--;
        }
        return max;
    }

    
    public static int search_Problem_8_8545fe00_41f8_4560_840f_e2742e79c4ad(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        if (max == -1) {
            return -1;
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_1_d640f288_1b3e_4d66_a7b2_62d7422e430f(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        Integer max = freq.keySet().stream().max(Comparator.comparing(freq::get)).get();
        if (freq.get(max) >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_9_79caf2ef_647d_44fe_95d9_29a20c8e4884(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_a0bdfdb6_55e4_498b_9406_1f7d7ce2108e(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                if (Collections.frequency(lst, i) >= i) {
                    return i;
                }
            }
        }
        return -1;
    }

    
    public static int search_Problem_2_4fd9ef25_b212_4564_a0e8_081b2008394f(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i : lst) {
            if(map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for(int i : map.keySet()) {
            if(map.get(i) > max && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_b55f0202_e7b2_449f_b990_46a90a94e562(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq < max) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_23_9f7e62a9_82df_4bf8_b65b_5c816b26f6a5(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_4_c8d3c03e_03d7_4eed_84f1_213a49a6338f(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_fd1651cd_509c_40cb_8063_b0ffff74725a(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > max) {
                max = lst.get(i);
                maxFreq = 1;
            } else if (lst.get(i) == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_0_8de11e55_78e5_4199_93fc_479b27540c42(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > max) {
                max = lst.get(i);
                maxFreq = 1;
            } else if (lst.get(i) == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_2_d6e181d3_11b1_4c02_9465_729a7dca5396(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i) {
                maxFreq = i;
                maxVal = i;
            } else if (maxFreq == i) {
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_10_3f6f3e1e_97db_4112_9366_533f7d7cd09b(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            }
        }
        return maxFreq > maxVal ? maxFreq : -1;

    }

    
    public static int search_Problem_4_2a04be34_387d_46ee_8621_644f439d461e(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            if (freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_21_0b168592_0e15_4f68_a32b_fc8ac1592a3e(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int maxFreq = 0;
        for (int i : lst) {
            if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_11_145115a4_5be9_4bbe_8110_a2bda29de3fe(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_17_95bf6511_83b7_486d_b00b_452e2fa92b2f(ArrayList<Integer> lst) {

        // Your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        for (Integer l : lst) {
            if (map.get(l) > l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_18_dfcfab40_cfcd_46f1_b3b9_c6a4c8ab596f(ArrayList<Integer> lst) {

        // Write your code here
        return -1;
    }

    
    public static int search_Problem_3_f06e3308_90d0_40c3_b4a5_0197f2d925f9(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_13_8ba8e236_8895_4c97_90a7_112bad88532e(ArrayList<Integer> lst) {
        int maxFreq = 0;
        int maxVal = 0;

        List<Integer> list = lst.stream().distinct().sorted(Comparator.reverseOrder()).collect(Collectors.toList());
        Collections.sort(list);

        for (int i : list) {
            int freq = list.stream().filter(j -> j == i).count();
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = i;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_5_e892afb4_3345_46de_b4af_c036eceda920(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxCount = 0;
        for (int val : lst) {
            int count = Collections.frequency(lst, val);
            if (count > maxCount) {
                maxCount = count;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_17_f0ae8283_a57e_476d_8bc4_e77a26a8f42c(ArrayList<Integer> lst) {
        int max = lst.get(0), min = lst.get(0);
        for(int i = 1; i < lst.size(); i++){
            int curr = lst.get(i);
            if(curr > max){
                max = curr;
            }else if(curr < min){
                min = curr;
            }
        }
        return (lst.indexOf(min) > lst.indexOf(max)) ? -1 : max;
    }

    
    public static int search_Problem_15_027a41df_b838_47da_843e_cc3a510d5a00(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                max_freq++;
            }
        }
        if (max_freq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_24_f35be621_bece_4853_baad_e0b1af1bb83b(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            if (freq < i) {
                freq = i;
                max = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_15_8eca8166_4da2_4870_a3fb_d0ebcb04232f(ArrayList<Integer> lst) {
        Map<Integer, Integer> map = new TreeMap<>();
        for (Integer i : lst) {
            map.put(i, map.getOrDefault(i, 0L) + 1);
        }
        int greatest = Integer.MIN_VALUE;
        int currMaxFreq = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (currMaxFreq < entry.getValue()) {
                currMaxFreq = entry.getValue();
                greatest = entry.getKey();
            }
        }
        return greatest;
    }

    
    public static int search_Problem_19_e1a89f95_04eb_442d_bdb2_57d7a270efe3(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxCount = 1;
            } else if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_20_944f16eb_5d8a_461d_a221_477971af348a(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_9_31e15d8b_2418_4c5b_a9b8_ceb4eccb8bda(ArrayList<Integer> lst) {
        if (lst.isEmpty()) return -1;
        int m = Collections.max(lst);
        int f = Collections.frequency(lst, m);
        return f >= m ? m : -1;
    }

    
    public static int search_Problem_24_9c3d4dde_dace_4863_bd5c_41466eefaead(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_95176853_9229_41a5_9a3a_83d817b589af(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        return map.entrySet().stream().filter(e -> e.getValue() > e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_6_7a30a30e_2ae1_4a0c_988e_e619999aacef(ArrayList<Integer> lst) {

        // Write your code here.
        // Sort the list in descending order
        // Iterate through the list
        // If the current element is greater than 0 and has a frequency greater than or equal to the value of the 
        // element itself, return the element
        // Else return -1
        Collections.sort(lst, Collections.reverseOrder());
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > 0 && lst.indexOf(lst.get(i)) >= lst.lastIndexOf(lst.get(i))) {
                return lst.get(i);
            }
        }
        return -1;
    }

    
    public static int search_Problem_4_32bd9d50_1c6b_4de8_a2fc_bb2c31925c2e(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_dca3dbb9_fc63_4002_8113_d8ced87fea7a(ArrayList<Integer> lst) {

        // Your code here
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
            if (lst.stream().filter(x -> x == i).count() > maxFreq) {
                maxFreq = lst.stream().filter(x -> x == i).count();
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_1_afc0f7ec_bfe5_4707_9919_7e615d90612f(ArrayList<Integer> lst) {

        int greatest = 0;
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > greatest) {
                greatest = i;
            }
        }
        return greatest;
    }

    
    public static int search_Problem_19_162f887c_88b0_4c32_84a5_fba020d0563e(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_7_1903709f_5399_4830_9bfc_4562468ceeb1(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_db46886d_392f_4d04_bc41_95a46eebf685(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_dc20ce87_32d8_4664_bf5f_f3f428ebe301(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_45c9e6c5_98c9_437c_8d64_afcd4802d532(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_22_a302a74b_528e_46ad_8e44_a83919d09a29(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_19_bfccc857_bb15_49fe_b97f_44d9e28aba42(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_16_7815e544_98cf_4ac9_bba5_bc8bf09c1a2c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_22_2ae54e21_ba61_4cc7_8268_91dea604f21d(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int maxCount = 0;
        for (int i : lst) {
            if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_2_e39f3662_998c_4232_a338_1769da571e6e(ArrayList<Integer> lst) {
        int max = 0;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
        }
        if (count < lst.size()) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_17_224ad458_0762_4df1_9c98_d4a61448bb59(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (int l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        int maxFreq = 0;
        for (int l : freq.keySet()) {
            if (freq.get(l) > maxFreq) {
                max = l;
                maxFreq = freq.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_8_ed2334df_ad99_4d61_b70b_484bcc080d85(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            map.put(i, map.getOrDefault(i, 0L) + 1);
        }
        for (int i = lst.size(); i > 0; i--) {
            if (map.getOrDefault(i, 0L) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_11_67fd4bd5_d9e1_4048_8903_ef6e2bb861d0(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_1_cc30f95d_1381_4df1_b156_f6f71aaefb57(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_2_438e5491_ce92_45d3_9d79_14736aab8b56(ArrayList<Integer> lst) {
        int max = -1;
        int freq = 0;
        for (int i : lst) {
            if (freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_c0d50f57_94ca_462d_a296_466600d47992(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxCount = Collections.frequency(lst, i);
            } else if (i == max) {
                maxCount = Math.max(maxCount, Collections.frequency(lst, i));
            }
        }
        return maxCount >= max ? max : -1;
    }

    
    public static int search_Problem_18_2f614d3c_e852_4600_821f_3df555fe65c5(ArrayList<Integer> lst) {
        int maxVal = lst.get(0);
        for (int i = 0; i < lst.size(); ++i) {
            if (lst.get(i) >= maxVal) {
                maxVal = lst.get(i);
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_22_8eca8166_4da2_4870_a3fb_d0ebcb04232f(ArrayList<Integer> lst) {
        Map<Integer, Integer> map = new TreeMap<>();
        for (Integer i : lst) {
            map.put(i, map.getOrDefault(i, 0L) + 1);
        }
        int greatest = Integer.MIN_VALUE;
        int currMaxFreq = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (currMaxFreq < entry.getValue()) {
                currMaxFreq = entry.getValue();
                greatest = entry.getKey();
            }
        }
        return greatest;
    }

    
    public static int search_Problem_8_d7f0cbf9_43cc_4f65_ad34_4495ef5a3db2(ArrayList<Integer> lst) {

        // Write your code here
        if(lst.size() == 0) return -1;
        Map<Integer, Integer> map = new HashMap<>();
        for(Integer l : lst) {
            if(map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for(Integer l : map.keySet()) {
            if(map.get(l) >= l) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_f3176946_e144_4645_a95d_1517c21c5679(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_8ba38142_d567_4e4a_802e_7149f07ae5a4(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_9_7135436b_b56f_4caa_ab64_f95e389e0db0(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int max_count = 0;
        for (int i = 0; i < lst.size(); i++) {
            int count = 0;
            for (int j = 0; j < lst.size(); j++) {
                if (lst.get(j) == lst.get(i)) {
                    count++;
                }
            }
            if (count > max_count) {
                max = lst.get(i);
                max_count = count;
            }
        }
        if (max_count == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_11_6dd02712_1872_4466_bfb8_cb7117c1bf59(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1L);
            }
        }
        Integer max = -1L;
        for (Integer l : map.keySet()) {
            if (l > 0 && map.get(l) >= l) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_e10d3f24_ad6a_4675_9848_4f6816faf14b(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq++;
            if(freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_16_3d7c9371_4714_48c9_8316_65b752e41fe9(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for(int i : lst) {
            freq++;
            if(freq > max) {
                max = freq;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_1d15e212_723b_4787_8d38_248b48e3ba78(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = -1;
        int max_key = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                max_key = entry.getKey();
            }
        }
        if (max_key == -1) {
            return -1;
        } else {
            return max_key;
        }
    }

    
    public static int search_Problem_13_3c92babf_8146_426b_9e59_91e9b7214885(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_e28fe6b9_5bb6_40ea_bd1b_3cb5d0c608a6(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxFreq = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxFreq) {
                maxFreq = entry.getValue();
                max = entry.getKey();
            }
        }
        return max;
    }

    
    public static int search_Problem_6_bdf74c1f_88dc_421d_aa44_91c0a325b68c(ArrayList<Integer> lst) {

        int max = 0;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_15_0cf73034_0194_4606_967f_b4c030af213f(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_b55f0202_e7b2_449f_b990_46a90a94e562(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq < max) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_20_3fc6ad30_c6ac_4de9_a084_fc3e56aca284(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparingInteger(x -> x)).get();
    }

    
    public static int search_Problem_6_bb0f85b6_5907_49ac_815f_9572649f0409(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_18_2998b3f1_ba65_4c6c_bffc_8e188122da94(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq += i;
            if (freq > max) {
                max = freq;
            }
        }
        return max > 0 ? max : -1;
    }

    
    public static int search_Problem_18_2f589fc6_ffd4_482f_9f55_63630e529816(ArrayList<Integer> lst) {
        int max = -1;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (freq > max) {
                max = freq;
            }
            if (freq == i) {
                freq++;
            }
        }
        return max;

    }

    
    public static int search_Problem_0_d790ed4c_cb48_43e0_9783_f65d6b5e8c63(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_36c780b1_f15c_4cbd_9600_95a55bd48700(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq++;
            if(freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_6_36b15343_3217_4f13_a6c6_820a6a561a68(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_10_e518fe27_2bdc_4fc5_aa88_55988ae35f39(ArrayList<Integer> lst) {

        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_9_8daa32b0_a742_41c7_8e7e_00da5e9460a3(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_3_715119f4_fedc_452e_ae06_7484ede18335(ArrayList<Integer> lst) {
        int retVal = -1;
        for (int l : lst) {
            int f = Collections.frequency(lst, l);
            if (f > 0 && f >= retVal) {
                retVal = l;
            }
        }
        return retVal;
    }

    
    public static int search_Problem_0_e97844f4_ea8c_48db_879b_8ec179f2d772(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_11_4b30273f_57d0_40ea_850d_e823a1a9f302(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_23_d16891fd_191b_4424_87c8_549fbb96d74b(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_3_313d673f_72c9_461b_886e_f2c45414106d(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_e518fe27_2bdc_4fc5_aa88_55988ae35f39(ArrayList<Integer> lst) {

        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_caaac0b7_6203_49ec_84c7_d5fa2370acc9(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_22_70ea03bb_f448_4bbe_a458_aac319e2ff4d(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > maxFreq) {
                max = i;
                maxFreq = freq;
            }
        }
        return maxFreq >= max ? max : -1;
    }

    
    public static int search_Problem_0_d1d7c9af_f5cb_4ff5_8aeb_a9408eac03d5(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > max && lst.get(i) > lst.get(i)) {
                max = lst.get(i);
            }
        }
        return max;
    }

    
    public static int search_Problem_17_fc77c553_d162_4b59_b200_289093e2a6f2(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_2f2c4628_7c24_4ec4_b67a_72286aac61e9(ArrayList<Integer> lst) {

        // Your code here
        int max = 0;
        int maxFreq = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
            if (map.get(i) > maxFreq) {
                max = i;
                maxFreq = map.get(i);
            }
        }
        return maxFreq > max ? max : -1;
    }

    
    public static int search_Problem_21_e2ad134d_7a16_45ee_bed0_b39a3642e191(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_13_d35d357e_3a35_44ca_8a1c_f79e1d106e6d(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_9_4eafeff0_9439_44da_8512_5406235cd6c1(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_21_b9dd5313_3e83_4a6b_90dd_75ad2556173b(ArrayList<Integer> lst) {

        int max = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
            }
        }
        if (max == 0) {
            return -1;
        }
        int count = 0;
        for (Integer l : lst) {
            if (l == max) {
                count++;
            }
        }
        if (count >= 2) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_7_4867a230_8399_4ad1_b2fa_df92541291b8(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer i : lst) {
            freq.put(i, freq.getOrDefault(i, 0) + 1);
        }
        return freq.entrySet().stream().filter(x -> x.getKey() > 0 && x.getValue() >= x.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_20_e6c03dbd_5698_4564_8f1b_1da318148a1f(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_62d508f9_f6b5_4d01_a097_9898dacbfaee(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i : lst) {
            if(map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for(int i : lst) {
            if(map.get(i) > max && i > 0) {
                max = i;
            }
        }
        if(max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_1_b8b85adb_923a_49af_a4c1_863fc4dfd198(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_0_a5016074_e132_4000_9a85_0d6f58366b59(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_4_74b7bb76_63f6_456d_9560_f10193f00ac7(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int max_freq = 0;
        int result = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
                max_freq = 1;
            } else if (i == max) {
                max_freq++;
            }
        }
        if (max_freq >= max) {
            result = max;
        }
        return result;
    }

    
    public static int search_Problem_16_2d386dcc_4ac9_4f9c_91b1_47f8240ed7a9(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_1d924b13_2fe8_47ca_a5e6_fd942aa040bb(ArrayList<Integer> lst) {

        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                max = entry.getKey();
            }
        }
        return max;
    }

    
    public static int search_Problem_23_6242e2bc_00ba_462b_aa6a_f5a8f1e4c375(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_17_ca64b54c_e8e4_4bfa_8152_740680a95deb(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_14_07a12481_6096_4095_801f_ab01ac79465c(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_1_43a6cd90_22f2_4532_b09d_0525caf2078b(ArrayList<Integer> lst) {

        int max = 0;
        for (Integer i : lst) {
            if (i > max) {
                max = i;
            }
        }
        if (max == 0) {
            return -1;
        }
        int count = 0;
        for (Integer i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_23_7834a80d_3a64_4574_a908_cbac98de0244(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            int count = Collections.frequency(lst, i);
            if (count >= i && count > maxFreq) {
                maxFreq = count;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_13_6765c7db_3177_4975_a7a0_392dcf257d1c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_17_9803caa8_94ac_4167_bb51_5b1d30975530(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_da9d04ff_1ffc_4227_bc6a_cd8b9f8dfde8(ArrayList<Integer> lst) {

        int result = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) >= i) {
                result = i;
                break;
            }
        }
        return result;
    }

    
    public static int search_Problem_7_334762fa_6ee3_46fa_ab9f_4a0ae8e4805e(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_c865a948_8909_46e9_8310_d5d8f06486a3(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_10_dfb83ede_4ec2_476a_9447_704ce5a27918(ArrayList<Integer> lst) {
        int highest = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq >= i) {
                highest = i;
            }
        }
        return highest == 0 ? -1 : highest;
    }

    
    public static int search_Problem_18_a228bb3c_35d7_4556_9005_c63a201b0fe7(ArrayList<Integer> lst) {

        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_51e99419_dbd9_4c2b_8ceb_a33dd64f333d(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1 || freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_0c443593_89a7_440e_a7cf_50b04418de15(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (freq > max) {
                max = freq;
            }
            if (freq == i) {
                freq++;
            }
        }
        return max;

    }

    
    public static int search_Problem_0_be5ce68f_1788_44fc_aae3_ff6cd6438bfd(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxVal == -1 || maxFreq < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq == i) {
                maxFreq++;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_16_bda330ec_6b9c_46de_83a9_3eb0b47139f1(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i : lst) {
            if(map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = -1;
        for(int i : map.keySet()) {
            if(map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_7815e544_98cf_4ac9_bba5_bc8bf09c1a2c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_12_f45920f4_2c88_40a8_a6d6_d5f2669b5d9c(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        int res = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                res = l;
            }
        }
        return res;
    }

    
    public static int search_Problem_20_1903709f_5399_4830_9bfc_4562468ceeb1(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_0f0cdf63_305a_40ae_90bb_6f726f76631b(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        int max = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > max) {
                max = lst.get(i);
            }
        }
        if (max == 0) {
            return -1;
        }
        int count = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) == max) {
                count++;
            }
        }
        if (count == 1) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_8_1a5ff06d_da65_41b2_974c_b8d626938848(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_19_6b58869e_c1a9_4d82_89ee_645cdf2c8161(ArrayList<Integer> lst) {
        int max = Integer.MIN_VALUE;
        for (int num : lst) {
            if (num > max) {
                max = num;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_3d67b149_fd39_485d_a5a1_b49a57eb908f(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq += i;
            if (freq > max) {
                max = freq;
            }
        }
        return max;

    }

    
    public static int search_Problem_0_614bbaac_06cb_4461_a4c8_c881c380bbb9(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            if (freq.containsKey(l)) {
                freq.put(l, freq.get(l) + 1);
            } else {
                freq.put(l, 1);
            }
        }
        int max = -1;
        int maxFreq = -1;
        for (Integer l : freq.keySet()) {
            if (freq.get(l) > maxFreq) {
                max = l;
                maxFreq = freq.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_14_09352cce_7fd8_40aa_a713_e15252c07b05(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_52f7c056_7c82_48b0_b85a_620b4a06e1e7(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_9cb17680_3432_4520_8741_64ca626f7700(ArrayList<Integer> lst) {
        // Write your code here
        // To print results to the standard output you can use System.out.println()
        // Example: System.out.println("Hello world!");
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1L);
            }
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l && l > max) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_c0210ab5_c7f7_48e3_99a7_654ab2b6f933(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_16c89da2_7185_424f_8dd3_37721556e448(ArrayList<Integer> lst) {

        // Write your code here.
        // return -1;
        return lst.stream().max(Comparator.comparing(x -> x, Comparator.reverseOrder())).get();
    }

    
    public static int search_Problem_3_d3dec6c7_ecea_454f_be74_5f64f6e71ce9(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_16_f8c85f9b_954f_4c29_95b1_28db766d95b8(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            }
        }
        return maxFreq > maxVal ? maxVal : -1;

    }

    
    public static int search_Problem_22_bdf74c1f_88dc_421d_aa44_91c0a325b68c(ArrayList<Integer> lst) {

        int max = 0;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_8_7815e544_98cf_4ac9_bba5_bc8bf09c1a2c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_7_7815e544_98cf_4ac9_bba5_bc8bf09c1a2c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_3_e212a1f1_f93d_4e56_9b82_0f6694364ea0(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_c1c4dae2_44d9_4a8b_8ad3_8871ae72fd9f(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().filter(e -> e.getKey() > 0 && e.getValue() >= e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_14_bab97e06_2cc2_4b9d_95bf_331e4fbdd529(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_22_f8d913c4_b7aa_4790_bb0f_186ab8f79c81(ArrayList<Integer> lst) {
        int result = -1;
        int max = -1;
        for(int i : lst) {
            if(i>0) {
                max = Math.max(max, i);
            }
        }
        if(max>0) {
            int freq = Collections.frequency(lst, max);
            if(freq>=max) {
                result = max;
            }
        }
        return result;
    }

    
    public static int search_Problem_1_e7489cf5_1d9f_47b3_b27f_ddaaa0369438(ArrayList<Integer> lst) {

        // Write your code here
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_18_f78e9cff_1384_45f7_9006_413da86fb11a(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        int curFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                curFreq++;
            }
        }
        if (curFreq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_7_dc7acd40_8182_4bc2_9ca8_d6779a0ee2bf(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_10f10503_67bc_4451_a9a7_27e6a9d5bf7b(ArrayList<Integer> lst) {
        int result = -1;
        // Write your code here.
        return result;
    }

    
    public static int search_Problem_22_1cf8d8cc_1fbc_470d_bb24_a4debf7cab03(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_2_c13d803b_d252_49d8_8325_b8a077cc7935(ArrayList<Integer> lst) {
        int greatestVal = -1;
        int greatestFreq = 0;
        for (int e : lst) {
            if (e > 0 && e >= greatestFreq) {
                greatestVal = e;
                greatestFreq = e;
            } else if (e > 0 && e < greatestFreq) {
                greatestFreq = e;
            }
        }
        if (greatestVal != -1) {
            return greatestVal;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_18_7ee72e5c_ac1f_42fa_ad8a_1dfa72fc4265(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        int maxVal = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
                maxVal = l;
            } else if (l == max) {
                maxFreq++;
                if (maxFreq > maxFreq) {
                    maxVal = l;
                }
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return maxVal;
    }

    
    public static int search_Problem_1_874b6e7e_c5ca_4364_9f07_386e22fb3ead(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (Integer i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxKey = i;
            }
        }
        if (max == 1) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_13_98bfe3ed_f3ce_47d1_8bea_af7d7e64762f(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
            if (map.get(i) > maxFreq) {
                maxFreq = map.get(i);
                max = i;
            }
        }
        if (maxFreq > 1) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_21_6a7b7f7d_bf12_46e2_8754_8fb7219f8216(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = lst.stream().filter(x -> x == val).count();
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_12_7f684e03_d035_4e49_941c_27089ee59d2e(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxCount) {
                max = entry.getKey();
                maxCount = entry.getValue();
            }
        }
        if (maxCount >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_4_ab2df2ec_7e19_49fe_a259_ea797419fa26(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq >= maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_0_e47f8fb2_1b80_499e_bdd5_eaa88ee7013a(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            }
        }
        return maxFreq > maxVal ? maxFreq : -1;

    }

    
    public static int search_Problem_13_6a3602a7_4941_45c1_9a98_5470b62d8b77(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq++;
            if(freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_8_db765413_77b5_41a5_98fa_39e066454fb5(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_11_7834a80d_3a64_4574_a908_cbac98de0244(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            int count = Collections.frequency(lst, i);
            if (count >= i && count > maxFreq) {
                maxFreq = count;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_17_6a7b7f7d_bf12_46e2_8754_8fb7219f8216(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = lst.stream().filter(x -> x == val).count();
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_21_c8d3c03e_03d7_4eed_84f1_213a49a6338f(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_12dddb88_e8bf_40f6_99a4_20af6b2d360f(ArrayList<Integer> lst) {
        int maxIndex = 0;
        int maxCount = 0;
        for (Integer v : lst) {
            if (v > 0) {
                if (v.intValue() > maxCount) {
                    maxCount = v.intValue();
                    maxIndex = v;
                } else if (v.intValue() == maxCount) {
                    maxCount = v.intValue();
                    maxIndex = v;
                }
            }
        }
        return maxIndex;
    }

    
    public static int search_Problem_19_12236577_0401_436d_b55e_69423b250446(ArrayList<Integer> lst) {

        // write your code here
        int max = 0;
        int count = 0;
        for(Integer l : lst){
            if(l > max){
                max = l;
                count = 1;
            }
            else if(l == max){
                count++;
            }
        }
        if(count >= max){
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_22_8744f966_d42c_47ea_900d_60469bfbffef(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_14600785_4c49_4232_acd1_e1e418227e28(ArrayList<Integer> lst) {

        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : freq.keySet()) {
            if (freq.get(l) > max) {
                max = freq.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_2_102171b8_7a4b_4a85_902b_614380e7fe76(ArrayList<Integer> lst) {
        ArrayList<Integer> unique = new ArrayList<>();
        unique.addAll(lst);

        Collections.sort(unique);

        int maxVal = unique.get(0);

        for (int x : unique) {
            if (x > maxVal) {
                maxVal = x;
            }
        }

        int freq = unique.size();

        for (int i = 0; i < unique.size(); i++) {
            if (freq < unique.get(i)) {
                return -1;
            }
        }

        return maxVal;
    }

    
    public static int search_Problem_12_d2bfefac_a1c1_4075_b9b0_2e8e83c57da9(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_8_f092c591_e37f_419c_941e_d72d1f899f89(ArrayList<Integer> lst) {
        int max = -1;
        int freq = lst.get(0);
        for (int elem : lst) {
            if (elem == freq) {
                ++freq;
            } else {
                if (freq > 0 && max < elem) {
                    max = elem;
                }
                freq = elem;
            }
        }
        return max;
    }

    
    public static int search_Problem_9_c98aa025_cbe3_4a8e_85ea_dae95b2133e3(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_15_7abf68a7_51df_46bc_bbd1_c0dd9d57662e(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_24_88410fd0_cd42_4333_b215_5849f35e9086(ArrayList<Integer> lst) {
        // WRITE YOUR CODE HERE
        Map<Integer, Integer> map = new HashMap<>();
        for(int i: lst){
            map.put(i, map.getOrDefault(i, 0L)+1);
        }
        for(int i: map.keySet()){
            if(map.get(i)>=i){
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_24_f8d913c4_b7aa_4790_bb0f_186ab8f79c81(ArrayList<Integer> lst) {
        int result = -1;
        int max = -1;
        for(int i : lst) {
            if(i>0) {
                max = Math.max(max, i);
            }
        }
        if(max>0) {
            int freq = Collections.frequency(lst, max);
            if(freq>=max) {
                result = max;
            }
        }
        return result;
    }

    
    public static int search_Problem_18_96f70579_66cb_4abc_bbd0_089ccfbcf1f9(ArrayList<Integer> lst) {
        int max = -1;
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1L);
            }
        }
        for (Integer i : lst) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_7880b246_42e6_49da_82e1_3f61dc26b1c3(ArrayList<Integer> lst) {
        int val = 0;
        val =  lst.stream().filter(l->l>0).map(l ->l).reduce(Math::max).orElse(-1);
        return val;
    }

    
    public static int search_Problem_0_77c5e688_8d9f_4446_b71f_afad034036e8(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) == max) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_2_b2d61701_8b21_4928_9f53_36bcfb52af5e(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_12_443c4e41_1bdd_41ce_85de_619ea96542f6(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_8c8f3e4a_373c_4cbf_9b74_69d6b008bbb6(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_6152d800_ef67_4e73_85cf_28fb6323eb1b(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq += i;
            if (freq > max) {
                max = freq;
            }
        }
        return max > 0 ? max : -1;

    }

    
    public static int search_Problem_11_def8798f_0913_4535_9142_65226c86ba5c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_9_96f70579_66cb_4abc_bbd0_089ccfbcf1f9(ArrayList<Integer> lst) {
        int max = -1;
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1L);
            }
        }
        for (Integer i : lst) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_64e868ac_f600_4e4e_8917_40cab66a699e(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_ca9955dc_12ef_47d5_b925_57e4b26296f1(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            Integer count = map.get(l);
            if (count == null) {
                map.put(l, 1);
            } else {
                map.put(l, count + 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_22_287a1721_1bbd_4c4f_940f_ec6d0a18802e(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i = 1; i < lst.size(); i++) {
            if (map.containsKey(i) && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_9_0f3f14f3_be8f_4885_b733_2638266c4ea1(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_2a04be34_387d_46ee_8621_644f439d461e(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            if (freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_6_53c45ca3_c863_463d_882c_f69b5b765f37(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_578ac7f3_4bdc_4c11_b4c8_389e98359c30(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_17_f0edbe6d_3455_470f_b3c1_de4f91b94e73(ArrayList<Integer> lst) {
        int max = 0;
        int maxFreq = -1;
        for(int i : lst) {
            if(i>0) {
                int freq = Collections.frequency(lst, i);
                if(freq>maxFreq) {
                    max = i;
                    maxFreq = freq;
                }
            }
        }
        return max;

    }

    
    public static int search_Problem_2_f8c33cc5_7c29_4773_9b27_933f8457cbee(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        int res = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
            if (maxFreq >= lst.size()) {
                res = max;
                break;
            }
        }
        return res;
    }

    
    public static int search_Problem_24_d1b5376b_7823_44e6_8545_3fae5869aef0(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxCount = 1;
            } else if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_17_36c780b1_f15c_4cbd_9600_95a55bd48700(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq++;
            if(freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_1_37b5f594_f270_4ef5_b9e6_ad08f05ad08d(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_3_bb0f85b6_5907_49ac_815f_9572649f0409(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_7_2433b27c_781f_4ce0_8b72_84a94bd1f64f(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_19_7b765904_4ff9_4cb1_8dec_1444983c4a49(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_12_f092c591_e37f_419c_941e_d72d1f899f89(ArrayList<Integer> lst) {
        int max = -1;
        int freq = lst.get(0);
        for (int elem : lst) {
            if (elem == freq) {
                ++freq;
            } else {
                if (freq > 0 && max < elem) {
                    max = elem;
                }
                freq = elem;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_b4c8435f_5714_4241_a2ba_bd2165fd6839(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_9_825af927_179a_48fb_a505_2903eae30155(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream()
                .filter(e -> e.getValue() > e.getKey())
                .map(Map.Entry::getKey)
                .max(Comparator.naturalOrder())
                .orElse(-1);
    }

    
    public static int search_Problem_24_cea3ebbe_ecff_4a34_a233_e441d8a50330(ArrayList<Integer> lst) {

        // Write your code here
        return lst.stream().max(Comparator.comparing(x -> x, Comparator.reverseOrder())).orElse(-1);
    }

    
    public static int search_Problem_21_fe0ba967_2d87_4e9a_9910_12affbaf7abb(ArrayList<Integer> lst) {

        // Write your code here
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_22_764f89cc_cd3f_4a0e_96f9_a54f039968a4(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_f092c591_e37f_419c_941e_d72d1f899f89(ArrayList<Integer> lst) {
        int max = -1;
        int freq = lst.get(0);
        for (int elem : lst) {
            if (elem == freq) {
                ++freq;
            } else {
                if (freq > 0 && max < elem) {
                    max = elem;
                }
                freq = elem;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_6f69e21c_5be0_4954_94db_763cde3389c7(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        int max = 0;
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        if (max == 0) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_5_db46886d_392f_4d04_bc41_95a46eebf685(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_77a38810_12cd_4815_ae7e_639d7f4884ab(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (int l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().filter(e -> e.getKey() > 0 && e.getValue() >= e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_5_c0088b1b_e2e2_43a5_af31_ae6b084f6e88(ArrayList<Integer> lst) {
        // Write your code here
        int n = lst.size();
        Map<Integer, Integer> m = new HashMap<>();
        for (int i = 0; i < n; i++) {
            if (m.containsKey(lst.get(i))) {
                m.merge(lst.get(i), lst.get(i), Integer::sum);
            } else {
                m.put(lst.get(i), 1);
            }
        }
        if (m.isEmpty()) {
            return -1;
        }
        for (Map.Entry<Integer, Integer> entry : m.entrySet()) {
            if (entry.getValue() > lst.size() * 1.0 / n) {
                return -1;
            }
        }
        int max = Integer.MIN_VALUE;
        for (Map.Entry<Integer, Integer> entry : m.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_9_c9b94f5e_1c41_4254_9925_eeeaf62e67d2(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == -1) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_19_c7435003_479d_4d32_b2fb_1b9aea58b610(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_18_b7819f6c_3d35_4f9d_ad6b_f17ca577a127(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            if (freq.containsKey(l)) {
                freq.put(l, freq.get(l) + 1);
            } else {
                freq.put(l, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (Map.Entry<Integer, Integer> entry : freq.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_19_c9486a52_9e68_4135_bb76_3717b0ee0ea1(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (int l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                max = entry.getKey();
            }
        }
        return max;
    }

    
    public static int search_Problem_15_6c88fbf8_e889_476c_888f_cf6605d17058(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_15_f76096c3_88e3_4b7e_a30f_8475a697a2dc(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_10_5af4b9a6_2dd0_41e9_9ff3_f88d7d0876fd(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_20_367dbae6_5c7a_438c_8efc_e29ad080c2b3(ArrayList<Integer> lst) {

        // your code here
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        int max = 0;
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_3_a26930f1_6ac9_49cc_9e8b_2b0bb79b3aa8(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_17_06d89672_7249_4af3_92bd_f3245dcc8e05(ArrayList<Integer> lst) {
        int maxVal = Integer.MIN_VALUE, maxCount = Integer.MIN_VALUE;
        for (Integer l : lst) {
            if (maxCount < l) {
                maxCount = l;
                maxVal = l;
            }
        }
        return maxVal > 0 ? maxVal : -1;
    }

    
    public static int search_Problem_11_256d22df_0c9f_4262_85be_ca79310258aa(ArrayList<Integer> lst) {

        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_e518fe27_2bdc_4fc5_aa88_55988ae35f39(ArrayList<Integer> lst) {

        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_5688ca13_6ed6_41d8_b4d5_94e30601f4b1(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq == -1 || maxFreq < i) {
                maxFreq = i;
                max = i;
            } else if (maxFreq == i) {
                maxFreq++;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_d6b46695_ae0f_4bf2_89ea_613b8488368d(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_824cae87_cdcd_4694_8e5e_89326c1e3c36(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_20_e892afb4_3345_46de_b4af_c036eceda920(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxCount = 0;
        for (int val : lst) {
            int count = Collections.frequency(lst, val);
            if (count > maxCount) {
                maxCount = count;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_21_888e5da3_8912_47e2_8fab_e2d35337f456(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_24_e2d66cb1_f756_4277_aa82_10aa4a3e1ac7(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq >= maxFreq) {
                maxFreq = freq;
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_14_9221cb44_5e2d_4ee5_a70a_a49250e0354e(ArrayList<Integer> lst) {
        int max = -1;
        int maxVal = 0;
        int cnt = 1;
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                max = cnt;
            }
            cnt += 1;
        }
        if (maxVal == 0)
            return -1;
        return max;
    }

    
    public static int search_Problem_15_afd54a7d_236b_46f5_8533_1af5dd7a2643(ArrayList<Integer> lst) {
        Collections.sort(lst);
        if (lst.isEmpty()) {
            return -1;
        }
        int max = lst.get(0);
        int min = lst.get(0);
        for (int l : lst) {
            if (l > max) {
                max = l;
            }
            if (l < min) {
                min = l;
            }
        }
        if (min == max) {
            return min;
        }
        int answer = max;
        for (int l : lst) {
            if (l >= min) {
                answer = Math.max(answer, l + 1);
            }
        }
        return answer < 0 ? -1 : answer;
    }

    
    public static int search_Problem_3_ab154e07_a3f7_48f9_8248_adddb4b64591(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int i : lst) {
            int freq = Collections.frequency(lst, i);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_22_61108b23_27b0_4fec_975b_51b698f8343c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i) {
                maxFreq = i;
                maxVal = i;
            } else if (maxFreq == i) {
                maxVal = Math.max(maxVal, i);
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_24_8a510569_dac3_4dbe_8a22_4a0c8d2600c7(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int max_key = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                max_key = entry.getKey();
            }
        }
        if (max_key > 0) {
            return max_key;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_3_d9f084cb_c24b_414a_b5f9_9b52bade21e0(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_17_38bc859c_559e_4d2a_8067_106d9fead4d3(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_17_0f866524_ff3f_427c_90cc_cba4208c378d(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_24_f78e9cff_1384_45f7_9006_413da86fb11a(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        int curFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                curFreq++;
            }
        }
        if (curFreq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_14_0cf9d3b9_cf12_40f0_a2b9_3e695d6c3b2d(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_8ac45b89_8cae_44dc_9aa0_42ed0dd23b6f(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_b9f062ab_9c9b_4f6b_aeae_13d0e7690062(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxCount) {
                max = l;
                maxCount = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_8_56b6dc6f_9d66_407a_a641_4524402d355e(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_17_749134b5_07b8_46a7_9feb_5b2448fed9cb(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_3_9179e5fd_8652_47e0_a859_89f97c9d38e2(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_1_11984dfe_d998_4f2d_b1d1_b41125ab06fe(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i) {
                max = Math.max(max, i);
            }
        }
        return max == 0 ? -1 : max;
    }

    
    public static int search_Problem_1_341de019_4f00_4478_b0bd_1911abc4b998(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq++;
            if(freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_8_6a3602a7_4941_45c1_9a98_5470b62d8b77(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq++;
            if(freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_19_668e2531_7fc0_4f69_b0b7_5bafec63be61(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && max < i) {
                max = i;
                maxFreq = i;
            } else if (maxFreq == i) {
                maxFreq++;
            }
        }
        return max;

    }

    
    public static int search_Problem_8_ab6384b3_cdb8_42f1_b531_a2752076f8c4(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (Integer i : lst) {
            if (freq == 0 || freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_7_678772f7_416e_446b_a653_8df0f365ead5(ArrayList<Integer> lst) {

        int max = 0;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_21_b8775e85_f0ba_4ada_8d5c_f56c60132baf(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxVal == -1 || maxFreq < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq == i) {
                maxFreq++;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_15_2f614d3c_e852_4600_821f_3df555fe65c5(ArrayList<Integer> lst) {
        int maxVal = lst.get(0);
        for (int i = 0; i < lst.size(); ++i) {
            if (lst.get(i) >= maxVal) {
                maxVal = lst.get(i);
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_24_9be68ec5_0ce5_48dd_aa8c_986716611188(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for (Integer i : map.keySet()) {
            if (map.get(i) > map.get(max) && map.get(i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_95ba8216_d86f_4cf2_a7df_66f656d5a462(ArrayList<Integer> lst) {

        Map<Integer, Integer> freq = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : freq.keySet()) {
            if (freq.get(l) > max) {
                max = freq.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_7_fa76f9e5_baf8_4aa7_9825_f26a8973e5f4(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_0_5cabecc6_e1f8_4e9f_a3c7_4d270c96f3a2(ArrayList<Integer> lst) {
        int result = 0;
        int max;
        int temp;
        for(int i : lst) {
            temp = i;
            max = i;
            for(int j : lst) {
                if(j == temp) {
                    max = j;
                    break;
                }
            }
            if(!lst.contains(max)) {
                result = -1;
                break;
            }
        }
        if(result > 0 && !lst.contains(result)) {
            result = -1;
        }
        return result;
    }

    
    public static int search_Problem_6_ee2e7d44_7229_42ba_af29_67b15c1ed82f(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i) {
                max = Math.max(max, i);
            }
        }
        return max;
    }

    
    public static int search_Problem_2_8c564e2d_e634_46d3_a615_39fc5e4b5c14(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        for (Integer l : lst) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_21_32cacc0f_97d1_4927_81dc_09801955e817(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            } else if (val == maxVal) {
                maxFreq++;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_17_caaac0b7_6203_49ec_84c7_d5fa2370acc9(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_7_97e87b77_709b_41b7_9f57_b5a0cd936b0f(ArrayList<Integer> lst) {

        if (lst.size() == 0) {
            return -1;
        }
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (int i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxKey = i;
            }
        }
        if (max == 1) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_2_8857856d_c9b5_4b25_8555_51827fd92012(ArrayList<Integer> lst) {

        // your code here
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        int max = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                max = Math.max(max, entry.getKey());
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_16_3750061a_b5b3_4f8f_a483_167259b4d890(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > max_freq) {
                max = i;
                max_freq = freq;
            }
        }
        if (max_freq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_16_fea40a69_10c9_411a_89e6_d1d55b1638c2(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_18_f66826c0_b307_4895_bd3a_49905d7ef8c9(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_2_f6e4ed8f_2384_48cb_af77_d4b3d22b86c0(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1L);
            }
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_3_da9d04ff_1ffc_4227_bc6a_cd8b9f8dfde8(ArrayList<Integer> lst) {

        int result = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) >= i) {
                result = i;
                break;
            }
        }
        return result;
    }

    
    public static int search_Problem_2_6a0ce858_cb00_4a00_a7bc_371fefd13857(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? max : -1;
    }

    
    public static int search_Problem_0_bb312a82_1435_4e74_894f_7d2e8940ce19(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_16_8f7afdd1_8267_4eb2_b4f4_f9bd8220253a(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_f6e4ed8f_2384_48cb_af77_d4b3d22b86c0(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1L);
            }
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_1c3abb21_9ccf_4a1d_8533_03935e1e4355(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                if (lst.stream().filter(x -> x == i).count() >= i) {
                    return i;
                }
            }
        }
        return -1;
    }

    
    public static int search_Problem_19_6ebca5a5_f6ca_423a_a444_56d608c56a85(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().max(Comparator.comparing(Map.Entry::getValue)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_7_666acf8f_6c87_422c_9773_34b934e4ee35(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == -1) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_1_a31c7a81_db5c_467a_af53_51f20788bc26(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_e1aa36e8_b670_467d_8ba1_abbfab213111(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxCount) {
                max = entry.getKey();
                maxCount = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_11_1f431f5d_5563_4792_b201_0d6315f4e178(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        int max = lst.get(0);
        int count = 1;
        for (int i = 1; i < lst.size(); i++) {
            if (lst.get(i) == max) {
                count++;
            } else if (lst.get(i) > max) {
                max = lst.get(i);
                count = 1;
            }
        }
        if (count >= max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_9_0b8ccd56_1c29_4f85_9c0f_9206c0e83a61(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int max_count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                max_count = 1;
            } else if (i == max) {
                max_count++;
            }
        }
        if (max_count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_19_8576a965_eca9_4c71_8d47_bcd59f4f4567(ArrayList<Integer> lst) {
        int max_val = -1;
        int max_freq = -1;

        for (int x : lst) {
            if (max_freq == -1 || x >= max_freq) {
                max_val = x;
                max_freq = x;
            }
            else if (x >= max_freq) {
                max_freq = x;
            }
        }

        return max_val;
    }

    
    public static int search_Problem_0_0de85f8b_acfd_4c00_b2d4_f77363c0777f(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_19_ca605546_518d_4a85_8978_cad321c08928(ArrayList<Integer> lst) {
        int max = 0;
        int count = 0;
        for (int i : lst) {
            if (i >= 0) {
                count++;
                max = Math.max(max, i);
            }
        }
        if (count <= 0) {
            return -1;
        }
        Map<Integer, Integer> map = new TreeMap<>();
        for (int i : lst) {
            if (i >= 0) {
                map.put(i, map.getOrDefault(i, 0) + 1);
            }
        }
        if (map.containsKey(max)) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_18_7f72f684_8d04_4768_909c_3e6d6b1c0c54(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i = lst.size(); i > 0; i--) {
            if (map.containsKey(i) && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_15_7f684e03_d035_4e49_941c_27089ee59d2e(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxCount) {
                max = entry.getKey();
                maxCount = entry.getValue();
            }
        }
        if (maxCount >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_12_244060d3_5b78_4d86_8687_f275f392833c(ArrayList<Integer> lst) {
        if (lst.isEmpty()) return -1; // no such value
        int maxVal = -1;
        int curVal = lst.get(0);
        int maxCount = 0;
        for (int i = 1; i < lst.size(); i++) {
            curVal = lst.get(i);
            if (curVal == -1) return -1; // no such value
            int cnt = lst.get(i).intValue();
            if (cnt > maxCount) {
                maxVal = curVal;
                maxCount = cnt;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_6_6c181fe7_ada0_46aa_aa1d_57ac1a0cdd80(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : lst) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_13_6166374f_0430_42be_8de4_21499d083c6a(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_9221cb44_5e2d_4ee5_a70a_a49250e0354e(ArrayList<Integer> lst) {
        int max = -1;
        int maxVal = 0;
        int cnt = 1;
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                max = cnt;
            }
            cnt += 1;
        }
        if (maxVal == 0)
            return -1;
        return max;
    }

    
    public static int search_Problem_8_8e5acdb4_b131_4aae_b425_2c25a06bd96d(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                if (val > maxVal) {
                    maxVal = val;
                    maxFreq = lst.get(lst.indexOf(val));
                }
            }
        }
        return maxFreq > maxVal ? maxVal : -1;
    }

    
    public static int search_Problem_4_d3d9dbfc_1722_4c1d_90d3_dce4e5a084d6(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_f236915b_8ada_4658_8a03_99f6fa08b578(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (int i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxKey = i;
            }
        }
        if (maxKey == 0) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_14_fa76f9e5_baf8_4aa7_9825_f26a8973e5f4(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_0_9cefe690_bd2b_49b0_9d8e_46d52218f92f(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_11_8de11e55_78e5_4199_93fc_479b27540c42(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > max) {
                max = lst.get(i);
                maxFreq = 1;
            } else if (lst.get(i) == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_11_57b3c05a_484e_4b8d_a2fa_599f6271d319(ArrayList<Integer> lst) {

        // your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        for (int l : map.keySet()) {
            if (map.get(l) >= l && l > max) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_11_3fba11a1_0357_4142_8079_b51667a0dc84(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (lst.stream().filter(x -> x == i).count() > lst.stream().filter(x -> x == i).max(Comparator.comparing(Integer::valueOf)).get()) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_05c71f8b_76ab_4242_b491_9b95ac8175d6(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_24_2f34c11d_7b90_4415_aab8_b0719ee95756(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_8_390982cc_eec4_4f4d_8452_8fe3c9b8665c(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        int freq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                freq = 1;
            } else if (i == max) {
                freq++;
            }
        }
        for (int i : lst) {
            if (i == max && freq < i) {
                return -1;
            }
        }
        return max;
    }

    
    public static int search_Problem_3_3595d5e4_acfb_45db_9df4_69276cd8efad(ArrayList<Integer> lst) {
        int maxVal = -1;
        int freq = -1;
        for(Integer val : lst) {
            freq = Collections.frequency(lst, val);
            if(freq >= val) break;
            maxVal = val;
        }
        return maxVal;
    }

    
    public static int search_Problem_23_ddbc52b5_f507_4136_a9c4_c54525cbd4dd(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int max_count = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                max_count = 1;
            } else if (l == max) {
                max_count++;
            }
        }
        if (max_count == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_7_97bcc9e3_8a29_476d_8a32_d73c5825b42e(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_dd54eb56_bc22_4c0b_b012_1ab055bd0648(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().filter(e -> e.getKey() > 0 && e.getValue() >= e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_11_0fd17178_d231_4663_be0f_ad430a6735f2(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l,  1);
            }
        }
        for (Integer l : lst) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_23_05f9d1c5_60cb_4de9_ac50_4b110cb933f0(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            int count = Collections.frequency(lst, i);
            if (count > maxCount) {
                max = i;
                maxCount = count;
            }
        }
        if (maxCount < max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_18_38282935_5a04_432c_92c1_f774673fe3a7(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_12_fbcca621_2f12_41de_b783_e88bd2e442c6(ArrayList<Integer> lst) {

        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : freq.keySet()) {
            if (freq.get(l) > max) {
                max = freq.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_8_b6a4fe3c_e799_49c3_955b_7473ff4e27ec(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i : lst) {
            if (i > 0 && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_13_815e362d_f17e_47e3_975d_a2903cddc99e(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : lst) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_1_7834a80d_3a64_4574_a908_cbac98de0244(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            int count = Collections.frequency(lst, i);
            if (count >= i && count > maxFreq) {
                maxFreq = count;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_8_f230db74_fed7_4b6a_83c0_0752384376e3(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_23_c1fe37b2_95bd_4059_901f_4bbdafaae479(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_24_70ea03bb_f448_4bbe_a458_aac319e2ff4d(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > maxFreq) {
                max = i;
                maxFreq = freq;
            }
        }
        return maxFreq >= max ? max : -1;
    }

    
    public static int search_Problem_17_a0bdfdb6_55e4_498b_9406_1f7d7ce2108e(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                if (Collections.frequency(lst, i) >= i) {
                    return i;
                }
            }
        }
        return -1;
    }

    
    public static int search_Problem_11_1bcd103b_3a37_4cc3_8e39_6815ada2f0b2(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_4e2a0a04_f9a9_49f5_8974_f8303201d523(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_ff957fd4_2307_4277_a354_50d1c8f8cf4f(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (maxFreq < val) maxFreq = val;
            if (maxVal < val) maxVal = val;
        }
        return maxVal;

    }

    
    public static int search_Problem_23_695e06d8_357a_4ae7_8a5a_1efb7ea02767(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        Integer max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_9_7524d6ff_4304_4581_b760_bcb1b7bdb987(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_12_2f34c11d_7b90_4415_aab8_b0719ee95756(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_8ae1e2dd_99cb_41a9_a70b_53fe862d7c84(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_13_1df64ee5_35f4_4334_8514_23f69b55e251(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        for (Integer l : lst) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_3_23c11b38_721e_4ceb_88c0_448d8c1ece27(ArrayList<Integer> lst) {

        // Write your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int l : lst) {
            if(map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for(int l : map.keySet()) {
            if(l > max && map.get(l) >= l) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_ce173da5_5189_4260_b53e_8b817c89c31e(ArrayList<Integer> lst) {
        int largest = -1;
        int frequency = 0;
        for (Integer i : lst)
            if (i >= frequency) {
                frequency = i;
                largest = i;
            }
        return largest;
    }

    
    public static int search_Problem_1_986759fb_82e4_41fd_9935_119147e4310b(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_bb312a82_1435_4e74_894f_7d2e8940ce19(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_18_cdbbb7b6_ea55_4a24_b36a_7a7bf9f6f666(ArrayList<Integer> lst) {

        int max = 0;
        int max_count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                max_count = 1;
            } else if (i == max) {
                max_count++;
            }
        }
        for (int i : lst) {
            if (i > 0 && i <= max && i >= max_count) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_14_e7c3b5fc_af5a_4acb_83c0_939b0750ecc4(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? max : -1;
    }

    
    public static int search_Problem_14_a1b5dcc2_40ae_499b_831e_d91bfe1583be(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1) {
                freq = i;
                max = i;
            } else if (freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_20_878dbdd9_26ab_4d52_9fb8_9097d5bcf531(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        for (Integer i : lst) {
            if (i > 0 && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_17_287de844_87df_4d51_abaa_2c57adec9425(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq < i) {
                maxFreq = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_22_1a6e864e_b77d_4df5_8239_9e555a36b998(ArrayList<Integer> lst) {

        // Your code here
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i > max) {
                int count = 0;
                for (int j : lst) {
                    if (j == i) {
                        count++;
                    }
                }
                if (count >= i) {
                    return i;
                }
            }
        }
        return -1;
    }

    
    public static int search_Problem_23_15ac33c0_ed98_4bf7_ba18_94155cc5e4a4(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == -1) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_3_e86f8def_382a_45d4_916b_55a33a1a3db1(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_79265086_4662_4c32_b662_d8abff490dd1(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_9_bec517b7_0f1b_498f_91fd_721a94703e8b(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == -1) {
            return -1;
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) == max) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_4_e8958298_7e39_4b9c_b444_f15a4957b583(ArrayList<Integer> lst) {
        int res = -1;
        int max = 0;
        for(int l: lst) {
            if(l > 0 && Collections.frequency(lst, l) >= l) {
                max = Math.max(max, l);
            }
        }
        if(max > 0) {
            res = max;
        }
        return res;
    }

    
    public static int search_Problem_23_e2ad134d_7a16_45ee_bed0_b39a3642e191(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_12_af6059f2_4fb5_46c1_9566_58544955986b(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_a6f82188_4b0c_4a53_9d8d_b645f1eafb4b(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxCount = 0;
        for(int val : lst) {
            int count = Collections.frequency(lst, val);
            if(count > maxCount) {
                maxCount = count;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_17_e2a3bad5_006d_4fd7_a3b3_92c8170913d4(ArrayList<Integer> lst) {
        return lst.stream()
                .max(Comparator.comparingInteger(item -> item.intValue()))
                .orElse(-1);
    }

    
    public static int search_Problem_18_c27b58dc_18ab_4bb5_86d7_119a78520ce9(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_22_1c7c640c_d17d_4b24_b2e7_ed3edaa7f58e(ArrayList<Integer> lst) {
        Set<Integer> set = new HashSet<>();
        for (Integer value : lst) {
            if (!set.add(value)) {
                return -1;
            }
        }
        Integer max = lst.stream().max(Integer::compare).get();
        for (Integer value : lst) {
            if (value > max) {
                return -1;
            }
            if (lst.stream().filter(x -> x == value).count() < set.size()) {
                return -1;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_d022dfc3_9c28_4c13_bf21_c4120b93fae8(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        int maxVal = 0;
        for (int l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
                maxVal = l;
            } else if (l == max) {
                maxFreq++;
                if (maxFreq > maxFreq) {
                    maxVal = l;
                }
            }
        }
        if (maxVal == 0) {
            return -1;
        }
        return maxVal;
    }

    
    public static int search_Problem_10_9cefe690_bd2b_49b0_9d8e_46d52218f92f(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_2_5aa3fa29_a18e_427a_89f7_ce7b6ec148bc(ArrayList<Integer> lst) {
        int frequency = lst.stream().filter(l -> l > 0).count();
        return frequency > lst.stream().filter(l -> l == frequency).findFirst().get() ? frequency : -1;
    }

    
    public static int search_Problem_0_b8b85adb_923a_49af_a4c1_863fc4dfd198(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_11_8e08dcff_7f3f_4331_8395_c0270c342337(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxCount = 0;
        for (int val : lst) {
            int count = Collections.frequency(lst, val);
            if (count > maxCount) {
                maxCount = count;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_6_26ac39da_6cb9_464a_af24_a2edcf907444(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        for (int i : lst) {
            if (lst.stream().filter(x -> x == i).count() >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_c740e4a4_54cd_4bf8_8060_fccabe2a3d6d(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        int currFreq = 0;
        int curr = 0;
        for (int i : lst) {
            currFreq = lst.stream().filter(x -> x == i).count();
            if (currFreq > maxFreq) {
                maxFreq = currFreq;
                curr = i;
            }
        }
        return curr;
    }

    
    public static int search_Problem_16_390982cc_eec4_4f4d_8452_8fe3c9b8665c(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        int freq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                freq = 1;
            } else if (i == max) {
                freq++;
            }
        }
        for (int i : lst) {
            if (i == max && freq < i) {
                return -1;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_1c21a877_0aa5_43f5_bae9_6b5d10c857fe(ArrayList<Integer> lst) {

        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                max = entry.getKey();
            }
        }
        return max;
    }

    
    public static int search_Problem_9_926dce09_9027_41e0_8c00_dcea5875b3ec(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1L);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                maxKey = l;
            }
        }
        return maxKey;
    }

    
    public static int search_Problem_2_ed2334df_ad99_4d61_b70b_484bcc080d85(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            map.put(i, map.getOrDefault(i, 0L) + 1);
        }
        for (int i = lst.size(); i > 0; i--) {
            if (map.getOrDefault(i, 0L) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_14_0fea2503_6108_4afd_8774_08e0357839a7(ArrayList<Integer> lst) {
        // write your code in Java 7
        return -1;
    }

    
    public static int search_Problem_14_7f2a4010_a03a_4f96_abe8_f06cc4047160(ArrayList<Integer> lst) {
        int maxVal = lst.get(0);
        int maxFreq = lst.get(0);
        for(int i : lst) {
            if(i == maxVal) {
                maxFreq++;
            } else {
                if(maxFreq >= i) {
                    maxVal = i;
                    maxFreq = i;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_20_d825d98b_a9b6_4606_ad70_1f35921857d5(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxVal == -1 || maxFreq < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq == i) {
                maxFreq++;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_4_1c3abb21_9ccf_4a1d_8533_03935e1e4355(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                if (lst.stream().filter(x -> x == i).count() >= i) {
                    return i;
                }
            }
        }
        return -1;
    }

    
    public static int search_Problem_9_2599f995_7cb0_4143_a382_faf502e23f10(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxCount = 1;
            } else if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_7_ddbc52b5_f507_4136_a9c4_c54525cbd4dd(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int max_count = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                max_count = 1;
            } else if (l == max) {
                max_count++;
            }
        }
        if (max_count == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_6_caaac0b7_6203_49ec_84c7_d5fa2370acc9(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_12_35e693d4_c689_45cb_85a2_5af26766ca5a(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int count = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                count = 1;
            } else if (l == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_0_b0e3e0da_cbe6_48ce_bd37_522560e3d980(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        int max_key = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                max_key = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        }
        return max_key;
    }

    
    public static int search_Problem_3_0eda4a74_83e7_4ce2_9dc9_7aab7dfc1ab6(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_08e3f4cd_c5f0_483f_9398_21bb85fe6042(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                maxFreq = val;
            } else if (val == maxVal && val >= maxFreq) {
                maxFreq = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_16_438e5491_ce92_45d3_9d79_14736aab8b56(ArrayList<Integer> lst) {
        int max = -1;
        int freq = 0;
        for (int i : lst) {
            if (freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_4e6eba07_392e_4e3e_aec0_886279fdd256(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                if (maxVal < 0 || maxVal > val) {
                    maxVal = val;
                    maxFreq = val;
                }
                else {
                    maxFreq++;
                }
            }
        }
        return maxFreq > maxVal ? maxVal : -1;

    }

    
    public static int search_Problem_4_57b3c05a_484e_4b8d_a2fa_599f6271d319(ArrayList<Integer> lst) {

        // your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        for (int l : map.keySet()) {
            if (map.get(l) >= l && l > max) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_18_2d4e15bd_de63_41b2_98fa_b8f75008eb08(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_675a3c30_bc8f_46b4_9912_b82eb2b01bae(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            map.put(i, map.getOrDefault(i, 0L) + 1);
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_8548a2a2_1e5a_49d1_bf60_691e7ec64705(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_17_bfccc857_bb15_49fe_b97f_44d9e28aba42(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_0_3c92babf_8146_426b_9e59_91e9b7214885(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_a9601a57_c612_4d6b_af04_e92af8d37e9d(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_1_fe95951f_1754_4bd1_8ce2_5b1f696310e5(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (int i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxKey = i;
            }
        }
        return maxKey;
    }

    
    public static int search_Problem_4_0c443593_89a7_440e_a7cf_50b04418de15(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (freq > max) {
                max = freq;
            }
            if (freq == i) {
                freq++;
            }
        }
        return max;

    }

    
    public static int search_Problem_3_d640f288_1b3e_4d66_a7b2_62d7422e430f(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        Integer max = freq.keySet().stream().max(Comparator.comparing(freq::get)).get();
        if (freq.get(max) >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_23_8c564e2d_e634_46d3_a615_39fc5e4b5c14(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        for (Integer l : lst) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_10_995052a6_e6d2_4686_9107_1489f3ae0a74(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : lst) {
            if (map.get(l) == 1) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_17_4ca050f1_5ae0_4732_a5e3_1a14ae559b28(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_5491e7c6_32c4_477e_b413_e2f68d0c0e9c(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            map.put(i, map.getOrDefault(i, 0L) + 1);
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_18_4e29768f_1939_40a6_b2dc_4234d554bb5b(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxCount = 1;
            } else if (i == max) {
                maxCount++;
            }
        }
        for (int i : lst) {
            if (i > max && i >= maxCount) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_20_47147db5_b999_4d56_8161_698a49d5f0e2(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_9_8a9288ca_4e7d_446b_b758_a16f5c84115a(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i : lst) {
            if(map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for(int i : map.keySet()) {
            if(map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_443c4e41_1bdd_41ce_85de_619ea96542f6(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_c8c16d74_4379_437f_a18d_7df72f9bb6b0(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_29a72b13_82b1_40e7_bdda_363fd936b521(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_22_202d66f4_d970_460a_bc13_3fbd16e36cd5(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_19_2fa63e9c_ec1a_4e10_b016_bb0bdf5e5332(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (int l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxKey = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (maxKey > 0) {
            return maxKey;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_14_6c88fbf8_e889_476c_888f_cf6605d17058(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_8_608f78a5_b021_49a1_881d_21759ac4431a(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_12_e94e0ad4_1cc4_4b6a_b9ba_1324142df0eb(ArrayList<Integer> lst) {

        // write your code here
        if(lst.size() == 0) return -1;
        int max = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for(int i : lst) {
            if(map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for(Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if(entry.getValue() > max) {
                max = entry.getValue();
            }
        }
        if(max == 0) return -1;
        for(Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if(entry.getValue() == max) {
                return entry.getKey();
            }
        }
        return -1;
    }

    
    public static int search_Problem_6_b2de7891_f13f_451c_88d5_8163d2c03eed(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == -1) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_9_8f4ac413_1655_42ca_9dcf_89fdbb7a8c7c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_11_d7aadf7e_d5a2_412c_89e3_bca43e04b30c(ArrayList<Integer> lst) {
        Integer max = new Integer(0);
        Integer maxFreq = new Integer(0);
        for (Integer i : lst) {
            if (i > max) {
                max = i;
            }
            if (i.equals(max)) {
                maxFreq++;
            }
        }
        if (maxFreq >= max.intValue()) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_4_8a510569_dac3_4dbe_8a22_4a0c8d2600c7(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int max_key = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                max_key = entry.getKey();
            }
        }
        if (max_key > 0) {
            return max_key;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_19_14600785_4c49_4232_acd1_e1e418227e28(ArrayList<Integer> lst) {

        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : freq.keySet()) {
            if (freq.get(l) > max) {
                max = freq.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_2_4867a230_8399_4ad1_b2fa_df92541291b8(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer i : lst) {
            freq.put(i, freq.getOrDefault(i, 0) + 1);
        }
        return freq.entrySet().stream().filter(x -> x.getKey() > 0 && x.getValue() >= x.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_9_083749b3_cdff_4705_b138_b3f0fbfa82ee(ArrayList<Integer> lst) {
        Integer max = -1;
        int counter = 0;
        for (Integer value : lst) {
            if (value > max) {
                counter = 0;
                max = value;
            }
            else if (value == max) {
                counter++;
            }
            else if (counter > 0) {
                return -1;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_0f06a97f_e837_4f16_8ea0_88a1b43490eb(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        int res = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                res = l;
            }
        }
        return res;
    }

    
    public static int search_Problem_4_5a032a42_4a1c_4dd8_8636_2e415726163c(ArrayList<Integer> lst) {

        // Write your code here.
        if (lst.size() == 0) return -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) == max) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_21_7b048d01_8f4f_42e3_9610_a45be340d098(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_15_23c11b38_721e_4ceb_88c0_448d8c1ece27(ArrayList<Integer> lst) {

        // Write your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int l : lst) {
            if(map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for(int l : map.keySet()) {
            if(l > max && map.get(l) >= l) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_8744f966_d42c_47ea_900d_60469bfbffef(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_8329cd82_d004_4440_a43e_9567c1d071fe(ArrayList<Integer> lst) {

        int max = -1;
        for (int i = 1; i <= lst.size(); i++) {
            if (Collections.frequency(lst, i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_36c780b1_f15c_4cbd_9600_95a55bd48700(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq++;
            if(freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_24_07a12481_6096_4095_801f_ab01ac79465c(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_9_4191c3bf_a25c_4840_826c_0655c2572fe4(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        int freq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                freq++;
            }
            if (freq > max_freq) {
                max_freq = freq;
            }
        }
        if (max_freq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_9_54491726_f22c_4b3b_b243_a4587726f393(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxCount = 0;
        for (int val : lst) {
            int count = Collections.frequency(lst, val);
            if (count > maxCount) {
                maxCount = count;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_19_def8798f_0913_4535_9142_65226c86ba5c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_12_c8d3c03e_03d7_4eed_84f1_213a49a6338f(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_9_6545e9db_640a_488c_b4bf_1316bc32978f(ArrayList<Integer> lst) {

        if (lst.size() == 0) {
            return -1;
        }
        int max = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_8_64e868ac_f600_4e4e_8917_40cab66a699e(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_51e99419_dbd9_4c2b_8ceb_a33dd64f333d(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1 || freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_0a755a50_3a6b_4701_aeef_43767dd5ca7e(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_e8593fb8_72d3_402c_8c08_63c872061934(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_22_b0e3e0da_cbe6_48ce_bd37_522560e3d980(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        int max_key = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                max_key = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        }
        return max_key;
    }

    
    public static int search_Problem_11_319a0590_2afc_4659_84b6_0a96a38b8024(ArrayList<Integer> lst) {
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? -1 : max;
    }

    
    public static int search_Problem_15_715119f4_fedc_452e_ae06_7484ede18335(ArrayList<Integer> lst) {
        int retVal = -1;
        for (int l : lst) {
            int f = Collections.frequency(lst, l);
            if (f > 0 && f >= retVal) {
                retVal = l;
            }
        }
        return retVal;
    }

    
    public static int search_Problem_19_459fe921_e172_41b8_8416_3429e9220c4c(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_888e5da3_8912_47e2_8fab_e2d35337f456(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_fd64c3a1_0fe9_426f_b2bd_2bae9b297988(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_1b7a9e93_b295_4d04_941d_5bdf97b791a3(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer x : lst) {
            map.put(x, map.getOrDefault(x, 0L) + 1L);
        }
        for (Integer x : lst) {
            if (x > 0 && map.get(x) >= x) {
                return x;
            }
        }
        return -1L;
    }

    
    public static int search_Problem_21_86f7fa98_e158_4c3a_8c06_e59526e3ace8(ArrayList<Integer> lst) {
        int result = -1;
        for (int num : lst) {
            if (num > 0) {
                int freq = lst
                        .stream()
                        .filter(x -> x == num)
                        .count();
                if (freq >= num) {
                    result = num;
                }
            }
        }
        return result;
    }

    
    public static int search_Problem_16_0b8ccd56_1c29_4f85_9c0f_9206c0e83a61(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int max_count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                max_count = 1;
            } else if (i == max) {
                max_count++;
            }
        }
        if (max_count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_19_dca3dbb9_fc63_4002_8113_d8ced87fea7a(ArrayList<Integer> lst) {

        // Your code here
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
            if (lst.stream().filter(x -> x == i).count() > maxFreq) {
                maxFreq = lst.stream().filter(x -> x == i).count();
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_15_0f866524_ff3f_427c_90cc_cba4208c378d(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_5_711f4351_c248_412a_a2c3_aa186b45f8ad(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > max_freq) {
                max_freq = freq;
                max = i;
            }
        }
        if (max_freq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_15_4d6c4607_7e26_47d4_84b1_6964d67718dd(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        Integer max = -1;
        Integer maxKey = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                maxKey = l;
            }
        }
        if (maxKey == -1) {
            return -1;
        } else {
            return maxKey;
        }
    }

    
    public static int search_Problem_20_a0bdfdb6_55e4_498b_9406_1f7d7ce2108e(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                if (Collections.frequency(lst, i) >= i) {
                    return i;
                }
            }
        }
        return -1;
    }

    
    public static int search_Problem_21_fbcca621_2f12_41de_b783_e88bd2e442c6(ArrayList<Integer> lst) {

        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : freq.keySet()) {
            if (freq.get(l) > max) {
                max = freq.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_4_9ebee63e_adc1_4a9a_93c1_d54a8b2b1112(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().filter(e -> e.getValue() >= e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_5_afd54a7d_236b_46f5_8533_1af5dd7a2643(ArrayList<Integer> lst) {
        Collections.sort(lst);
        if (lst.isEmpty()) {
            return -1;
        }
        int max = lst.get(0);
        int min = lst.get(0);
        for (int l : lst) {
            if (l > max) {
                max = l;
            }
            if (l < min) {
                min = l;
            }
        }
        if (min == max) {
            return min;
        }
        int answer = max;
        for (int l : lst) {
            if (l >= min) {
                answer = Math.max(answer, l + 1);
            }
        }
        return answer < 0 ? -1 : answer;
    }

    
    public static int search_Problem_10_13102ff7_017b_472b_a393_7f6e36de1fc1(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int i : lst) {
            if(i == 0) {
                continue;
            }
            int freq = Collections.frequency(lst, i);
            if(freq >= maxFreq) {
                maxFreq = freq;
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_4_3c2ba5d8_6a7b_44b2_a0f3_a751277ac805(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                if(val > maxVal) {
                    maxVal = val;
                    maxFreq = lst.get(lst.indexOf(val));
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_15_08787896_7a1e_4c1f_b505_d0f81530dd30(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_15_e97844f4_ea8c_48db_879b_8ec179f2d772(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_7_80e3429c_b409_45a0_90a7_5d40bdfee02e(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                return entry.getKey();
            }
        }
        return -1;
    }

    
    public static int search_Problem_8_dbd11b32_c28c_4414_b698_92c09a768095(ArrayList<Integer> lst) {
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? -1 : max;
    }

    
    public static int search_Problem_21_4881aa52_4483_49a4_8902_4e1b403db02c(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer num : lst) {
            map.put(num, map.getOrDefault(num, 0L) + 1);
        }
        for (int i = lst.size(); i > 0; i--) {
            if (map.getOrDefault(i, 0L) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_13_e4a76ebd_591a_4426_a989_8be0b61b4a19(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_21_53f51e5c_b719_42d0_8217_5b0f2e1c53b3(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_f46e0b35_648d_4e58_afe5_54e3ee52b8fc(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().filter(e -> e.getKey() > 0 && e.getValue() >= e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_8_db1968e0_5bdd_449e_898a_f34155a668ce(ArrayList<Integer> lst) {
        int maxVal = -1;
        int freqOfMaxVal = -1;

        for(int i : lst) {
            if(freqOfMaxVal == -1 || freqOfMaxVal >= i) {
                maxVal = i;
                freqOfMaxVal = lst.stream().filter((x) -> x == i).count();
            }
        }

        return maxVal;
    }

    
    public static int search_Problem_11_f519dbb0_1c57_49f3_a1ed_c9c73f1c3e92(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_2_d9f084cb_c24b_414a_b5f9_9b52bade21e0(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_ca9955dc_12ef_47d5_b925_57e4b26296f1(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            Integer count = map.get(l);
            if (count == null) {
                map.put(l, 1);
            } else {
                map.put(l, count + 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_4_6277725f_3c4d_43b7_914a_5bf1e3ff1aa3(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_95ba8216_d86f_4cf2_a7df_66f656d5a462(ArrayList<Integer> lst) {

        Map<Integer, Integer> freq = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : freq.keySet()) {
            if (freq.get(l) > max) {
                max = freq.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_4_43e6b27e_ac4f_43ac_9bd3_1bc3072ea43a(ArrayList<Integer> lst) {
        int max = -1;
        int freq = 0;
        for (int i : lst) {
            if (freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_8a9288ca_4e7d_446b_b758_a16f5c84115a(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i : lst) {
            if(map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for(int i : map.keySet()) {
            if(map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_5688ca13_6ed6_41d8_b4d5_94e30601f4b1(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq == -1 || maxFreq < i) {
                maxFreq = i;
                max = i;
            } else if (maxFreq == i) {
                maxFreq++;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_9cefe690_bd2b_49b0_9d8e_46d52218f92f(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_14_388b62f5_0d8d_477e_bd3e_359bed2f3979(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int count = 0;
        for(Integer i : lst){
            if(i > max){
                max = i;
                count = 1;
            }
            else if(i == max){
                count++;
            }
        }
        if(count >= max){
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_4_db1968e0_5bdd_449e_898a_f34155a668ce(ArrayList<Integer> lst) {
        int maxVal = -1;
        int freqOfMaxVal = -1;

        for(int i : lst) {
            if(freqOfMaxVal == -1 || freqOfMaxVal >= i) {
                maxVal = i;
                freqOfMaxVal = lst.stream().filter((x) -> x == i).count();
            }
        }

        return maxVal;
    }

    
    public static int search_Problem_6_d6961b00_c64b_462d_a118_5255b105b2f1(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int res = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                res = l;
            }
        }
        return res;
    }

    
    public static int search_Problem_16_bffdfb4c_4b04_4d99_8f8e_330a0df24e9b(ArrayList<Integer> lst) {
        int max = -1;
        int freq = 0;
        for (Integer i : lst) {
            if (freq > i.intValue()) break;
            freq += 1;
            if (freq > i.intValue()) {
                max = i;
                freq = i.intValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_22_2dff4d84_f0aa_471d_8877_8024d58d4241(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_5_def8798f_0913_4535_9142_65226c86ba5c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_18_1c7c640c_d17d_4b24_b2e7_ed3edaa7f58e(ArrayList<Integer> lst) {
        Set<Integer> set = new HashSet<>();
        for (Integer value : lst) {
            if (!set.add(value)) {
                return -1;
            }
        }
        Integer max = lst.stream().max(Integer::compare).get();
        for (Integer value : lst) {
            if (value > max) {
                return -1;
            }
            if (lst.stream().filter(x -> x == value).count() < set.size()) {
                return -1;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_e2d66cb1_f756_4277_aa82_10aa4a3e1ac7(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq >= maxFreq) {
                maxFreq = freq;
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_14_f536f9e2_62f3_4cf2_a5fc_56cb9b050672(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int max_count = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max_count) {
                max_count = map.get(l);
                max = l;
            }
        }
        if (max_count < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_19_9528fbfe_2a10_4272_a5e4_16cfce075fe1(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_c8d3c03e_03d7_4eed_84f1_213a49a6338f(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_0b430c68_e358_4349_96ce_58d60529d961(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_bb312a82_1435_4e74_894f_7d2e8940ce19(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_18_d7f0cbf9_43cc_4f65_ad34_4495ef5a3db2(ArrayList<Integer> lst) {

        // Write your code here
        if(lst.size() == 0) return -1;
        Map<Integer, Integer> map = new HashMap<>();
        for(Integer l : lst) {
            if(map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for(Integer l : map.keySet()) {
            if(map.get(l) >= l) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_668b2bd4_a177_4a64_90eb_e20ec9ba2b3b(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_24_ba418f86_5ea9_4b98_8f34_a7ca21e10d9b(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_3_192e4f75_0973_4e99_b0b5_5fae962de673(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i) {
                maxFreq = i;
                maxVal = i;
            } else if (maxFreq == i) {
                maxVal = Math.max(maxVal, i);
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_20_9b9e9b36_8b1b_4ade_af5a_dfa07c3c4785(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_b19e6896_f369_47ef_ad10_7511d9a1c04a(ArrayList<Integer> lst) {

        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_11_83c421ce_c0fe_4273_870a_8a50aff0a4e9(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i) {
                maxFreq = i;
                maxVal = i;
            } else if (maxFreq == i) {
                maxVal = Math.max(maxVal, i);
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_18_06d89672_7249_4af3_92bd_f3245dcc8e05(ArrayList<Integer> lst) {
        int maxVal = Integer.MIN_VALUE, maxCount = Integer.MIN_VALUE;
        for (Integer l : lst) {
            if (maxCount < l) {
                maxCount = l;
                maxVal = l;
            }
        }
        return maxVal > 0 ? maxVal : -1;
    }

    
    public static int search_Problem_15_fe08d895_fc1e_485c_80bd_def6dd00410f(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        int max = 0;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_6a7b7f7d_bf12_46e2_8754_8fb7219f8216(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = lst.stream().filter(x -> x == val).count();
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_7_0b05cc89_e346_4a9b_9b03_7142fcf49fdd(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x, Comparator.reverseOrder())).get();
    }

    
    public static int search_Problem_19_f577e1b9_a3ac_4b9c_b602_b1c97ca515b0(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_24_a302a74b_528e_46ad_8e44_a83919d09a29(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_0_9be68ec5_0ce5_48dd_aa8c_986716611188(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for (Integer i : map.keySet()) {
            if (map.get(i) > map.get(max) && map.get(i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_54491726_f22c_4b3b_b243_a4587726f393(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxCount = 0;
        for (int val : lst) {
            int count = Collections.frequency(lst, val);
            if (count > maxCount) {
                maxCount = count;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_22_d926941a_1712_4ea6_be1e_e7e62ba4272c(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                max_freq++;
            }
        }
        if (max_freq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_0_bf4c9e57_c2aa_45b1_8c6a_a06b6a432f92(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                max = entry.getKey();
            }
        }
        return max;
    }

    
    public static int search_Problem_18_77288631_aae5_47d5_b813_7ef37c92030d(ArrayList<Integer> lst) {
        if(lst.size() < 1) return -1;
        
        HashMap<Integer,Integer> hm = new HashMap<>();
        
        for(Integer i : lst)
            if(hm.containsKey(i)) {
                hm.put(i,hm.get(i) + 1);
            } else {
                hm.put(i, 1);
            }
        
        for(Integer i : lst) {
            if(hm.get(i) > 0) return i;
        }
        
        return -1;
    }

    
    public static int search_Problem_12_eb916da8_6f93_4acb_961d_f35cccf6daf6(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : lst) {
            if (map.get(i) >= i && i > 0) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_20_135b2d59_fd89_4be3_915d_7e14dfb110ac(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_3_162f887c_88b0_4c32_84a5_fba020d0563e(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_4_4e29768f_1939_40a6_b2dc_4234d554bb5b(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxCount = 1;
            } else if (i == max) {
                maxCount++;
            }
        }
        for (int i : lst) {
            if (i > max && i >= maxCount) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_5_96f70579_66cb_4abc_bbd0_089ccfbcf1f9(ArrayList<Integer> lst) {
        int max = -1;
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1L);
            }
        }
        for (Integer i : lst) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_d9f084cb_c24b_414a_b5f9_9b52bade21e0(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_395d84c6_0b2d_4c08_b46b_f197d2664903(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_24_23904fa1_cbc0_49f0_aec8_239992259324(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_13_9e47b236_3907_4993_94f8_33e8a1a1b8a4(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_553b982f_e39f_4f57_b88f_9e717eb4d935(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            int count = Collections.frequency(lst, i);
            if (count > maxCount) {
                max = i;
                maxCount = count;
            }
        }
        return maxCount >= max ? max : -1;
    }

    
    public static int search_Problem_23_fcc7171a_598d_45f0_8152_bda91bb80678(ArrayList<Integer> lst) {

        int max = 0;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_2_43d4c872_a9f5_4f1e_b91b_47f22f430049(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_1f431f5d_5563_4792_b201_0d6315f4e178(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        int max = lst.get(0);
        int count = 1;
        for (int i = 1; i < lst.size(); i++) {
            if (lst.get(i) == max) {
                count++;
            } else if (lst.get(i) > max) {
                max = lst.get(i);
                count = 1;
            }
        }
        if (count >= max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_20_f5952a8f_1497_4e64_842a_bb7364fc76da(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_11_f52f6a24_24bf_433a_bfa6_aa3349bf8867(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_6b3d4312_dd5e_4239_a5d6_c352dad46557(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        int max = 0;
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_24_9221cb44_5e2d_4ee5_a70a_a49250e0354e(ArrayList<Integer> lst) {
        int max = -1;
        int maxVal = 0;
        int cnt = 1;
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                max = cnt;
            }
            cnt += 1;
        }
        if (maxVal == 0)
            return -1;
        return max;
    }

    
    public static int search_Problem_1_db46886d_392f_4d04_bc41_95a46eebf685(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_1f708036_12b7_460b_b5ff_a5aa58640225(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? max : -1;
    }

    
    public static int search_Problem_1_69c99530_4186_494c_bf36_cf6353e82cd7(ArrayList<Integer> lst) {

        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
            }
        }
        if (max == -1) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_24_565a3fb0_c5ab_433a_952d_fc73e13149d3(ArrayList<Integer> lst) {
        int maxVal = lst.get(0);
        int maxFreq = lst.get(0);
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                maxFreq = val;
            } else if (val == maxVal) {
                maxFreq += val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_24_8d50debe_bb7b_4005_9945_4bce3244422c(ArrayList<Integer> lst) {
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? -1 : max;
    }

    
    public static int search_Problem_1_d35d357e_3a35_44ca_8a1c_f79e1d106e6d(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_4ca050f1_5ae0_4732_a5e3_1a14ae559b28(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_53c45ca3_c863_463d_882c_f69b5b765f37(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_6a2f4881_96de_4b2b_a147_43d27bd07968(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_8_74c6d266_8b0c_481c_a3b2_0c818252626e(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (maxVal == -1 || maxVal < val) {
                maxVal = val;
                maxFreq = val;
            } else if (maxFreq >= val) {
                maxFreq = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_19_20ed5ec9_c048_41b1_abc7_5b9b76dcb511(ArrayList<Integer> lst) {
        int n = lst.size();
        
        Collections.sort(lst);
        
        if (n > 1) { // if there is at least 2 or more occurrences we need to return -1
            
            int freq = 1;
            int max;
            
            for (int i = 1; i < n; i++) {
                if (lst.get(i) - lst.get(i-1) > 0) {
                    freq++;
                } else {
                    break;
                }
            }
            
            if (freq > lst.get(0) && freq >= n) {
                max = lst.get(0);
            } else {
                max = -1;
            }
            
            for (int i = 0; i < n; i++) {
                if (lst.get(i) == freq) {
                    max = lst.get(i);
                    break;
                }
                if (lst.get(i) > freq) {
                    max = lst.get(i);
                }
            }
            
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_24_1463fc04_d824_4055_8b21_7d5d3308fa12(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        int maxFreq = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxFreq) {
                max = entry.getKey();
                maxFreq = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_6_9c380ee4_490a_472e_9f4e_e9184d1ac3ad(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_23_18a42927_5fd3_4422_91a0_e0e64a3fd5e6(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i : lst) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_5_fdc75040_5df2_428f_ac6b_89011b0bca28(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_17_5f6bd213_59a5_4749_8a30_0e5828089cf1(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                max = Math.max(max, entry.getKey());
            }
        }
        return max;
    }

    
    public static int search_Problem_20_e39f3662_998c_4232_a338_1769da571e6e(ArrayList<Integer> lst) {
        int max = 0;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
        }
        if (count < lst.size()) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_8_e7cbd5aa_b981_4241_81f3_023fa35a3fbf(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max && Collections.frequency(lst, i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_6545e9db_640a_488c_b4bf_1316bc32978f(ArrayList<Integer> lst) {

        if (lst.size() == 0) {
            return -1;
        }
        int max = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_b83a09c7_5573_4d60_9744_2100c1dbcd89(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        Integer max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = l;
            }
        }
        if (max == -1) {
            return -1;
        }
        if (map.get(max) >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_22_d7584f7e_0aa2_498b_9728_13476dc93a11(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (maxFreq < val && val > 0) {
                maxFreq = val;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_17_e2fc3dae_61bb_40a6_aa5a_6b596e56416c(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i = lst.get(lst.size() - 1); i > 0; i--) {
            if (map.containsKey(i) && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_4_e8593fb8_72d3_402c_8c08_63c872061934(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_12_6760111d_4141_4c58_b0bc_583485454673(ArrayList<Integer> lst) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer v : lst) {
            int cnt = map.getOrDefault(v,0);
            map.put(v, ++cnt);
        }
        for (Integer v : map.keySet()) {
            if (map.get(v) >= map.get(v)) {
                return v;
            }
        }
        return -1;
    }

    
    public static int search_Problem_6_59f8f807_7899_4efc_a0f0_cf34881d7d55(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        Integer max = 0;
        Integer maxKey = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_19_079e386e_2d6e_4e3a_8f2a_d76ecdc65225(ArrayList<Integer> lst) {
        int maxValue = -1;
        int maxCount = 0;
        for (Integer l : lst) {
            int count = Collections.frequency(lst, l);
            if (count > maxCount) {
                maxCount = count;
                maxValue = l;
            }
        }
        return maxValue;
    }

    
    public static int search_Problem_23_ee71fb16_368d_4dfd_af93_232e75863a93(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_24_4ca050f1_5ae0_4732_a5e3_1a14ae559b28(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_33039bb6_d7a0_4504_a080_5900bcfb3092(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_15_0b430c68_e358_4349_96ce_58d60529d961(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_8_824cae87_cdcd_4694_8e5e_89326c1e3c36(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_9_4de34714_b2e9_454c_b0a5_511556d4ecf3(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i) {
                maxFreq = i;
                maxVal = i;
            } else if (maxFreq == i) {
                maxVal = Math.max(maxVal, i);
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_23_b2c715bc_b0ad_47ae_956b_20bf9af1a071(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_d89a4c21_e28d_4b3b_a7bd_8535543f2662(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_18_6748d58a_6923_4957_9774_203393489795(ArrayList<Integer> lst) {
        int max = 0;
        int maxFreq = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = i;
            } else if (maxFreq == -1 || maxFreq > i) {
                maxFreq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_22_0e148b20_b7b6_44e5_8ee3_6668d2a02a41(ArrayList<Integer> lst) {

        int[] arr = new int[lst.size()];
        for (int i = 0; i < lst.size(); i++) {
            arr[i] = lst.get(i);
        }
        Arrays.sort(arr);
        for (int i = arr.length - 1; i >= 0; i--) {
            if (arr[i] > 0 && arr[i] >= arr.length - i) {
                return arr[i];
            }
        }
        return -1;
    }

    
    public static int search_Problem_3_0ec461a1_7b9d_411f_be7c_fbb811407705(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        int freq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                freq = 1;
            } else if (i == max) {
                freq++;
            }
            if (freq > max_freq) {
                max_freq = freq;
            }
        }
        if (max_freq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_18_febffe4c_7c48_43fb_9283_fbc5885a60cb(ArrayList<Integer> lst) {

        // your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : lst) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_0_8daa32b0_a742_41c7_8e7e_00da5e9460a3(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_ca9955dc_12ef_47d5_b925_57e4b26296f1(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            Integer count = map.get(l);
            if (count == null) {
                map.put(l, 1);
            } else {
                map.put(l, count + 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_4_dffe57b8_3c6f_4f6e_9e6e_c7afdf1ceff7(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : lst) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_18_928b8493_82a3_46fc_b82a_bcbfeba8e1ab(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_2d386dcc_4ac9_4f9c_91b1_47f8240ed7a9(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_18_6a6bed05_eca8_42aa_bcea_d630e0a818f9(ArrayList<Integer> lst) {

        // Your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        for (Integer i : lst) {
            if (map.get(i) > i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_13_b8d98c6c_f366_4331_b9d7_e5aee0966a87(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == -1) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_23_f46e0b35_648d_4e58_afe5_54e3ee52b8fc(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().filter(e -> e.getKey() > 0 && e.getValue() >= e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_14_92fb837c_81a6_47a8_b0b7_03823f0559a3(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (int l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getKey() < entry.getValue() && entry.getKey() > max) {
                max = entry.getKey();
            }
        }
        return max;
    }

    
    public static int search_Problem_8_0b430c68_e358_4349_96ce_58d60529d961(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_ce2059a7_d0d9_443b_9c01_61718e3828e1(ArrayList<Integer> lst) {

        // Your code here
        int max = 0;
        int maxFreq = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) > maxFreq) {
                maxFreq = map.get(i);
                max = i;
            }
        }
        return maxFreq >= max ? max : -1;
    }

    
    public static int search_Problem_22_8c8f3e4a_373c_4cbf_9b74_69d6b008bbb6(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_11_bdf74c1f_88dc_421d_aa44_91c0a325b68c(ArrayList<Integer> lst) {

        int max = 0;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_2_2f2c4628_7c24_4ec4_b67a_72286aac61e9(ArrayList<Integer> lst) {

        // Your code here
        int max = 0;
        int maxFreq = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
            if (map.get(i) > maxFreq) {
                max = i;
                maxFreq = map.get(i);
            }
        }
        return maxFreq > max ? max : -1;
    }

    
    public static int search_Problem_21_64bb5a71_f594_4231_b72b_f2acb008abe8(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq++;
            if(freq > max) {
                max = freq;
            }
            if(i == 0) {
                freq--;
            }
        }
        return max;

    }

    
    public static int search_Problem_3_2f614d3c_e852_4600_821f_3df555fe65c5(ArrayList<Integer> lst) {
        int maxVal = lst.get(0);
        for (int i = 0; i < lst.size(); ++i) {
            if (lst.get(i) >= maxVal) {
                maxVal = lst.get(i);
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_9_eac62b13_ceb0_44be_b219_0f916914bb9c(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_12_1c21a877_0aa5_43f5_bae9_6b5d10c857fe(ArrayList<Integer> lst) {

        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                max = entry.getKey();
            }
        }
        return max;
    }

    
    public static int search_Problem_22_dbd11b32_c28c_4414_b698_92c09a768095(ArrayList<Integer> lst) {
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? -1 : max;
    }

    
    public static int search_Problem_5_ec5b0056_2cdf_4640_897e_83efc0bbf2a4(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_20_6fb711bd_597d_462c_9e6d_6115fdf55fc4(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int i : lst) {
            if(i == 0) continue;
            int freq = Collections.frequency(lst, i);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_18_214c41c5_c843_456e_936a_0b8ae9406677(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max && Collections.frequency(lst, i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_0b5db196_6720_4235_a894_5c759be5db04(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        if (max == 0) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_4_67b6b72c_b9ae_4569_b45e_303baa0345af(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_3e145535_1c77_4f29_8812_4e8b48462b91(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_11_5dda8a0c_d94d_4ca0_ad8a_7bece12d2252(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = lst.stream().filter(x -> x == val).count();
                if(freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_22_01318d91_4a8b_4637_a117_9e6d2cc4afbd(ArrayList<Integer> lst) {
        HashMap<Integer, Integer> h = new HashMap<Integer, Integer>();
        for (Integer l : lst)
            h.put(l, h.getOrDefault(l, 0L) + 1);
        Integer max = h.get(0);
        for (Integer l : h.keySet())
            if (l > max)
                max = l;
        if (max > 0)
            return max;
        return -1;
    }

    
    public static int search_Problem_23_7f684e03_d035_4e49_941c_27089ee59d2e(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxCount) {
                max = entry.getKey();
                maxCount = entry.getValue();
            }
        }
        if (maxCount >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_18_4d60ff40_b3e1_4eef_b7e2_7e2886d542f0(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_23_4fd9682f_407d_437b_8706_7783032d5802(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        Integer max = map.entrySet().stream().max(Comparator.comparing(Map.Entry::getValue)).get().getKey();
        if (max > 0 && map.get(max) >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_5_2998b3f1_ba65_4c6c_bffc_8e188122da94(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq += i;
            if (freq > max) {
                max = freq;
            }
        }
        return max > 0 ? max : -1;
    }

    
    public static int search_Problem_0_4254be1d_6589_40e3_a9a0_1772474cb79a(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_7518e306_e88f_42ff_9f68_0aa5e40e4f97(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer i : lst) {
            if (i > max) {
                max = i;
            }
            if (lst.stream().filter(j -> j == i).count() > maxFreq) {
                maxFreq = lst.stream().filter(j -> j == i).count();
            }
        }
        if (maxFreq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_22_61183238_b94c_4596_b7d7_7b7cc3b251a3(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_3_f9d113d2_a9cc_4521_8dcd_25c58e972fdb(ArrayList<Integer> lst) {
        int max = -1;
        int maxValue = -1;
        for (int i : lst) {
            if (maxValue < i)
                maxValue = i;
            if (maxValue > 0)
                max = i;
        }
        return max;
    }

    
    public static int search_Problem_4_fda6416f_ba62_46fa_9dce_b0a779f4ff86(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_14_707b2625_500e_4722_86c2_23df7a9249e1(ArrayList<Integer> lst) {

        // your code here
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : lst) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_12_184d9555_b5dd_4c06_8fab_80a84f3de604(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > max_freq) {
                max = i;
                max_freq = freq;
            }
        }
        return max_freq >= max ? max : -1;
    }

    
    public static int search_Problem_4_b587352a_ee73_4ffc_a4b0_7ccf75181eeb(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int max_count = 0;
        for(int i : lst) {
            if(i > max) {
                max = i;
                max_count = 1;
            } else if(i == max) {
                max_count++;
            }
        }
        if(max_count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_6_666acf8f_6c87_422c_9773_34b934e4ee35(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == -1) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_22_6d418d7a_bf84_4a1d_bbc9_6595d8ac0c8a(ArrayList<Integer> lst) {

        int max = 0;
        int count = 0;
        for (Integer i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_2_67fd4bd5_d9e1_4048_8903_ef6e2bb861d0(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_15_66da8dc7_ae30_47a7_a1ec_32410dd2aa2a(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_23_35b71884_52a9_45c1_b8aa_38b151fbfe80(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_8_a50b6e25_daca_408c_8f17_6aded972325e(ArrayList<Integer> lst) {
        int maxCount = 0;
        for (int num : lst) {
            if (num == 0 || num < 0) {
                return -1;
            }
            int count = lst.stream().filter(i -> i==num).count();
            if (count >= maxCount) {
                return maxCount;
            }
            maxCount = count;
        }
        return -1;
    }

    
    public static int search_Problem_23_968352cd_1cab_4638_888d_e6c95e77b1df(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_18_096a2d42_eb1e_4e26_9885_4fc1dfe77b01(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        int max = 0;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_7a46ab70_b76d_4341_ae65_848a6fb042f7(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_10_8567573e_f173_4377_9a1a_64ba32f854ef(ArrayList<Integer> lst) {

        int max = -1;
        for (int i = 0; i < lst.size(); i++) {
            int count = 0;
            for (int j = 0; j < lst.size(); j++) {
                if (lst.get(j) == i) {
                    count++;
                }
            }
            if (count > i && count > max) {
                max = count;
            }
        }
        return max;
    }

    
    public static int search_Problem_11_1c1e1e99_1ce3_43c4_9874_77ad7dcd845b(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                return entry.getKey();
            }
        }
        return -1;
    }

    
    public static int search_Problem_13_c78a5ca7_39d5_41d9_a868_f8ce638db707(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) == max) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_13_79425b2b_e0fc_4151_b454_f0f581fcc1c4(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_9_1cdfeb96_29f7_4a24_8209_5f934b645e0e(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_8857856d_c9b5_4b25_8555_51827fd92012(ArrayList<Integer> lst) {

        // your code here
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        int max = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                max = Math.max(max, entry.getKey());
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_9_44a9f443_fc83_40f9_9036_8ab92cba5e6c(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_18_c95feff2_fa70_4a44_b10f_6dc0f08ee1aa(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_12_0fea2503_6108_4afd_8774_08e0357839a7(ArrayList<Integer> lst) {
        // write your code in Java 7
        return -1;
    }

    
    public static int search_Problem_7_33109515_e93c_4c5d_b0a1_c3a2dbf94bbb(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_10_2ceb6733_e722_4d18_a889_990d723b21bd(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = Collections.frequency(lst, i);
            }
        }
        if (maxFreq < max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_21_59babbb8_8050_47af_8779_41cb22b79572(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? max : -1;
    }

    
    public static int search_Problem_10_05c71f8b_76ab_4242_b491_9b95ac8175d6(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_e6d4c08b_be33_4561_ad8b_49b4b408ebb2(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        int max = lst.get(0);
        int maxFreq = 1;
        for (int i = 1; i < lst.size(); i++) {
            if (lst.get(i) > max) {
                max = lst.get(i);
                maxFreq = 1;
            } else if (lst.get(i) == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_14_096a2d42_eb1e_4e26_9885_4fc1dfe77b01(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        int max = 0;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_4d6c4607_7e26_47d4_84b1_6964d67718dd(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        Integer max = -1;
        Integer maxKey = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                maxKey = l;
            }
        }
        if (maxKey == -1) {
            return -1;
        } else {
            return maxKey;
        }
    }

    
    public static int search_Problem_15_f2274e5d_e324_40b5_80af_bc21d27c9db9(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int max_count = 0;
        for(int i = 0; i < lst.size(); i++) {
            if(lst.get(i) > max) {
                max = lst.get(i);
                max_count = 1;
            } else if(lst.get(i) == max) {
                max_count++;
            }
        }
        if(max_count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_5_67309070_6704_47a8_8051_304324cf6ed1(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxCount) {
                max = l;
                maxCount = map.get(l);
            }
        }
        if (maxCount < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_13_d7c25666_a9d7_4e5c_b3fc_a87374cc145c(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_4bfc7632_cf07_47a2_a833_34ea7fcdc216(ArrayList<Integer> lst) {

        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                max = entry.getKey();
            }
        }
        return max;
    }

    
    public static int search_Problem_1_a480b873_3bf9_4c72_a871_1305d1b1bd90(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_11_2ff1c5cb_53fa_418a_9d36_0392ef6a6cae(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            int freq = lst.stream().filter(j -> j == i).count();
            if (freq >= maxFreq) {
                max = i;
                maxFreq = freq;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_88410fd0_cd42_4333_b215_5849f35e9086(ArrayList<Integer> lst) {
        // WRITE YOUR CODE HERE
        Map<Integer, Integer> map = new HashMap<>();
        for(int i: lst){
            map.put(i, map.getOrDefault(i, 0L)+1);
        }
        for(int i: map.keySet()){
            if(map.get(i)>=i){
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_18_5b5b4a7f_d6ef_4601_8400_1090d332704c(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        Integer max = Collections.max(map.keySet());
        if (map.get(max) >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_13_2f2c4628_7c24_4ec4_b67a_72286aac61e9(ArrayList<Integer> lst) {

        // Your code here
        int max = 0;
        int maxFreq = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
            if (map.get(i) > maxFreq) {
                max = i;
                maxFreq = map.get(i);
            }
        }
        return maxFreq > max ? max : -1;
    }

    
    public static int search_Problem_10_6972ecf1_53fd_404e_817b_0416e98a2a8b(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i) {
                maxFreq = i;
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_16_2fa52d0b_0839_47f3_a0cb_76a7d1d6c8ab(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_6b58869e_c1a9_4d82_89ee_645cdf2c8161(ArrayList<Integer> lst) {
        int max = Integer.MIN_VALUE;
        for (int num : lst) {
            if (num > max) {
                max = num;
            }
        }
        return max;
    }

    
    public static int search_Problem_3_7f684e03_d035_4e49_941c_27089ee59d2e(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxCount) {
                max = entry.getKey();
                maxCount = entry.getValue();
            }
        }
        if (maxCount >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_18_aea215f5_0418_4ad0_a18f_1dffd1766d81(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_11_4954a758_04cb_44a3_b32f_afa095afb6ef(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_0de85f8b_acfd_4c00_b2d4_f77363c0777f(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_12_b2d61701_8b21_4928_9f53_36bcfb52af5e(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_8_294f3c90_5963_4c18_acec_935d8606fe6d(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_23_487a9b77_bb2b_4906_8950_e76938681839(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_17_6972ecf1_53fd_404e_817b_0416e98a2a8b(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i) {
                maxFreq = i;
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_7_84eae471_b4ad_4d30_96fd_dad761e01628(ArrayList<Integer> lst) {
        Integer greatestInteger = null;
        Set<Integer> unique = new HashSet<Integer>();
        for (Integer i : lst) {
            if (!unique.add(i)) {
                unique.add(i);
                if (greatestInteger == null || i > greatestInteger) {
                    greatestInteger = i;
                }
            }
        }
        return unique.contains(greatestInteger) ? greatestInteger : -1;
    }

    
    public static int search_Problem_8_9528fbfe_2a10_4272_a5e4_16cfce075fe1(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_d9f285b2_0c8b_4bef_bb15_908ddbce7c24(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                max_freq = Collections.frequency(lst, i);
            }
        }
        if (max_freq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_10_e3c5540d_4395_440e_8d1d_c33aa55084ae(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_8d9acf83_59a9_4708_a5fa_229e15b01e6f(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_4ceaf7a9_4bfc_4add_b4f0_c0f6b3abf303(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_17_4881aa52_4483_49a4_8902_4e1b403db02c(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer num : lst) {
            map.put(num, map.getOrDefault(num, 0L) + 1);
        }
        for (int i = lst.size(); i > 0; i--) {
            if (map.getOrDefault(i, 0L) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_14_b0a511bd_95f5_4265_97a9_b65249a14edd(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int max_count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                max_count = 1;
            } else if (i == max) {
                max_count++;
            }
        }
        if (max_count == 0) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_2_c83b0ecd_c363_40cd_b8cc_26efda03a9d2(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i) {
                max = i;
                maxFreq = i;
            } else if (maxFreq == i) {
                maxFreq++;
            }
        }
        return max;

    }

    
    public static int search_Problem_14_a93472a3_a25a_4aaf_9511_391c0359b416(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_3_3e145535_1c77_4f29_8812_4e8b48462b91(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_9_62d508f9_f6b5_4d01_a097_9898dacbfaee(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i : lst) {
            if(map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for(int i : lst) {
            if(map.get(i) > max && i > 0) {
                max = i;
            }
        }
        if(max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_0_11212299_e15b_4955_96a5_5646b9dd8a87(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_10_56b6dc6f_9d66_407a_a641_4524402d355e(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_3_c0210ab5_c7f7_48e3_99a7_654ab2b6f933(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_d022dfc3_9c28_4c13_bf21_c4120b93fae8(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        int maxVal = 0;
        for (int l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
                maxVal = l;
            } else if (l == max) {
                maxFreq++;
                if (maxFreq > maxFreq) {
                    maxVal = l;
                }
            }
        }
        if (maxVal == 0) {
            return -1;
        }
        return maxVal;
    }

    
    public static int search_Problem_2_7233ff05_37f5_42c5_be36_bfee0295efdf(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_8_f519dbb0_1c57_49f3_a1ed_c9c73f1c3e92(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_21_2c362672_7c03_4111_be79_40c6adbf5391(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_17_33109515_e93c_4c5d_b0a1_c3a2dbf94bbb(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_6_91294ef0_e8b4_4761_8b52_2ded61334f94(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_6_3a0a9e9e_9ba3_4905_bfc4_53f9d2c3df84(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (int l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_4_7ee72e5c_ac1f_42fa_ad8a_1dfa72fc4265(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        int maxVal = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
                maxVal = l;
            } else if (l == max) {
                maxFreq++;
                if (maxFreq > maxFreq) {
                    maxVal = l;
                }
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return maxVal;
    }

    
    public static int search_Problem_12_f78e9cff_1384_45f7_9006_413da86fb11a(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        int curFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                curFreq++;
            }
        }
        if (curFreq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_4_214c41c5_c843_456e_936a_0b8ae9406677(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max && Collections.frequency(lst, i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_54b16812_6b4e_4dcf_a9f5_bc0f6e027738(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_21_ac3743e7_7b1e_4cd8_8ee7_c64471278284(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_17_b535b964_8a4f_4495_9181_069f5f1d5c57(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for (Integer i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) == max) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_11_15b6c366_1447_47d0_883f_5b972d52ce5a(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_5af4b9a6_2dd0_41e9_9ff3_f88d7d0876fd(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_10_93e505ab_763c_4367_b7e8_4971673ba635(ArrayList<Integer> lst) {
        int max = lst.stream().filter(e -> e > 0).max(Integer::compareTo).get();
        int maxCount = 0;
        for (int e : lst) {
            if (e > 0 && e > max) max = e;
            ++maxCount;
        }
        return max > 0 ? max : -1;
    }

    
    public static int search_Problem_24_f407d1cf_803c_474f_82e7_c2e8e3d9d3c5(ArrayList<Integer> lst) {
        int ans = -1;
        Collections.sort(lst);
        System.out.println(lst);
        
        for(Integer value : lst) {
            if(value >= 0 && ans > value) {
                ans = value;
            }
        }
        
        return ans;
    }

    
    public static int search_Problem_16_e2abc391_0c8c_4094_9ab8_324759cc938b(ArrayList<Integer> lst) {

        // Your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (int i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxKey = i;
            }
        }
        if (maxKey > 0) {
            return maxKey;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_20_c95feff2_fa70_4a44_b10f_6dc0f08ee1aa(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_18_ab2df2ec_7e19_49fe_a259_ea797419fa26(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq >= maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_4_65384fa5_8540_4db2_9fd4_6b6606a54056(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_47fb9e3c_2c95_4f94_892c_29b74be492e8(ArrayList<Integer> lst) {

        int max = -1;
        for(int i = 0; i < lst.size(); i++) {
            if(lst.get(i) > max && lst.get(i) >= lst.get(i)) {
                max = lst.get(i);
            }
        }
        return max;
    }

    
    public static int search_Problem_15_926dce09_9027_41e0_8c00_dcea5875b3ec(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1L);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                maxKey = l;
            }
        }
        return maxKey;
    }

    
    public static int search_Problem_3_6277725f_3c4d_43b7_914a_5bf1e3ff1aa3(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_9_d640f288_1b3e_4d66_a7b2_62d7422e430f(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        Integer max = freq.keySet().stream().max(Comparator.comparing(freq::get)).get();
        if (freq.get(max) >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_3_57b3c05a_484e_4b8d_a2fa_599f6271d319(ArrayList<Integer> lst) {

        // your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        for (int l : map.keySet()) {
            if (map.get(l) >= l && l > max) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_18_41e230b5_604b_466d_9588_bd307b47ae71(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            } else if (val == maxVal) {
                maxFreq++;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_15_54dc6b84_d8d9_4aac_8a46_3a5c10b331d4(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i : lst) {
            if(map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for(int i : lst) {
            if(map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_86003b35_a828_40c9_9b43_f002930366af(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_18_43fed902_f4ad_42a6_b935_82237ff13d35(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_8_23c11b38_721e_4ceb_88c0_448d8c1ece27(ArrayList<Integer> lst) {

        // Write your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int l : lst) {
            if(map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for(int l : map.keySet()) {
            if(l > max && map.get(l) >= l) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_764f89cc_cd3f_4a0e_96f9_a54f039968a4(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_7834a80d_3a64_4574_a908_cbac98de0244(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            int count = Collections.frequency(lst, i);
            if (count >= i && count > maxFreq) {
                maxFreq = count;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_8_4f2a5a34_8a19_49ab_a793_6f19847907cb(ArrayList<Integer> lst) {

        int max = -1;
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_67309070_6704_47a8_8051_304324cf6ed1(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxCount) {
                max = l;
                maxCount = map.get(l);
            }
        }
        if (maxCount < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_14_428d0206_4219_492b_90b8_ef75a59009b3(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        int freq = 0;
        for (int i = 0; i < lst.size(); i++) {
            int num = lst.get(i);
            freq = 0;
            for (int j = 0; j < lst.size(); j++) {
                if (num == lst.get(j)) {
                    freq++;
                }
            }
            if (freq > max_freq) {
                max = num;
                max_freq = freq;
            }
        }
        if (max_freq < max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_21_44a9f443_fc83_40f9_9036_8ab92cba5e6c(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_ff79d7a1_77fb_4df5_aa41_6b440c3af591(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_20_f5e589b2_23ca_4442_8c4c_21c044b95708(ArrayList<Integer> lst) {
        Map<Integer, Integer> frequency = new HashMap<>();
        for( int val : lst ){
            if( !frequency.containsKey(val) ){
                frequency.put(val, 0);
            }
            frequency.put(val, frequency.get(val) + 1);
        }
        for( int val : frequency.keySet() ){
            if( frequency.get(val) >= val ){
                return val;
            }
        }
        return -1;
    }

    
    public static int search_Problem_22_0a755a50_3a6b_4701_aeef_43767dd5ca7e(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_bfb2dd93_f2c0_4c9a_b17b_08f27ce15dcc(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max && Collections.frequency(lst, i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_7b765904_4ff9_4cb1_8dec_1444983c4a49(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_20_d640f288_1b3e_4d66_a7b2_62d7422e430f(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        Integer max = freq.keySet().stream().max(Comparator.comparing(freq::get)).get();
        if (freq.get(max) >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_2_d640f288_1b3e_4d66_a7b2_62d7422e430f(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        Integer max = freq.keySet().stream().max(Comparator.comparing(freq::get)).get();
        if (freq.get(max) >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_5_f78e9cff_1384_45f7_9006_413da86fb11a(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        int curFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                curFreq++;
            }
        }
        if (curFreq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_20_d97e020a_b337_4547_8647_344285c6fd00(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_590ade4f_ecdb_43b3_aa90_866fc02988f5(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxCount = 0;
            }
            if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_21_6ac158d9_6375_46e5_965a_040a21d26cec(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparingInteger(x -> x)).get();
    }

    
    public static int search_Problem_5_ee14dc35_0105_4691_8614_eb0bcf8c3e00(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            } else if (val == maxVal) {
                if (val > maxFreq) {
                    maxFreq = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_21_5a032a42_4a1c_4dd8_8636_2e415726163c(ArrayList<Integer> lst) {

        // Write your code here.
        if (lst.size() == 0) return -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) == max) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_17_7420df8f_2a31_4167_bf05_badb6587b9a5(ArrayList<Integer> lst) {
        int maxVal = Integer.MIN_VALUE, maxFreq = Integer.MIN_VALUE;
        for (Integer val : lst) {
            if (val > maxVal) {
                maxVal = val;
            }
            if (val > maxFreq) {
                maxFreq = val;
            }
        }
        return maxVal > 0 ? maxVal : -1;
    }

    
    public static int search_Problem_4_135b2d59_fd89_4be3_915d_7e14dfb110ac(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_12_d790ed4c_cb48_43e0_9783_f65d6b5e8c63(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_0fea2503_6108_4afd_8774_08e0357839a7(ArrayList<Integer> lst) {
        // write your code in Java 7
        return -1;
    }

    
    public static int search_Problem_13_5540641d_49d2_421e_a2d7_3c729b4f62e6(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        } else {
            return maxKey;
        }
    }

    
    public static int search_Problem_2_d33105fd_ae82_483d_8aec_d798583c84af(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_23_8744f966_d42c_47ea_900d_60469bfbffef(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_0ab3c683_7408_4aab_b7a4_2e4ab8ea9d51(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            int count = Collections.frequency(lst, i);
            if (count > maxCount) {
                maxCount = count;
                max = i;
            }
        }
        return maxCount >= max ? max : -1;
    }

    
    public static int search_Problem_17_ba5a7a95_4551_4fc6_8b0b_e56ef87753f2(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_20_f3176946_e144_4645_a95d_1517c21c5679(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_24_1c7c640c_d17d_4b24_b2e7_ed3edaa7f58e(ArrayList<Integer> lst) {
        Set<Integer> set = new HashSet<>();
        for (Integer value : lst) {
            if (!set.add(value)) {
                return -1;
            }
        }
        Integer max = lst.stream().max(Integer::compare).get();
        for (Integer value : lst) {
            if (value > max) {
                return -1;
            }
            if (lst.stream().filter(x -> x == value).count() < set.size()) {
                return -1;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_185ac59e_a2b3_4da3_8655_da24d367de87(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_fa12ac0f_d032_44a7_a218_2040f7ef6790(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                max_freq = Collections.frequency(lst, i);
            }
        }
        if (max_freq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_18_b2c715bc_b0ad_47ae_956b_20bf9af1a071(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_7524d6ff_4304_4581_b760_bcb1b7bdb987(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_3_7677010a_9bbf_4bf3_b5ad_53cfec0b8420(ArrayList<Integer> lst) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1L);
            }
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (i <= map.get(i) && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_ec5b0056_2cdf_4640_897e_83efc0bbf2a4(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_20_da9d04ff_1ffc_4227_bc6a_cd8b9f8dfde8(ArrayList<Integer> lst) {

        int result = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) >= i) {
                result = i;
                break;
            }
        }
        return result;
    }

    
    public static int search_Problem_18_8264ad36_a4e9_4c73_9fde_0abbda91b569(ArrayList<Integer> lst) {

        if (lst.size() == 0) {
            return -1;
        }
        int max = 0;
        int count = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > max) {
                max = lst.get(i);
                count = 1;
            } else if (lst.get(i) == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_15_89d04c64_ebc5_4f2d_9a94_82e2c53aed9e(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_23_d0c0aa67_6e55_46b5_89de_39afff21347b(ArrayList<Integer> lst) {

        // write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) == max) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_4_1cf8d8cc_1fbc_470d_bb24_a4debf7cab03(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_20_56811ddc_b69c_43a7_9a14_fbd669ad45c3(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_19_c87d175a_b038_45bd_a52a_c667a2530759(ArrayList<Integer> lst) {

        int max = 0;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_2_bda330ec_6b9c_46de_83a9_3eb0b47139f1(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i : lst) {
            if(map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = -1;
        for(int i : map.keySet()) {
            if(map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_24_11984dfe_d998_4f2d_b1d1_b41125ab06fe(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i) {
                max = Math.max(max, i);
            }
        }
        return max == 0 ? -1 : max;
    }

    
    public static int search_Problem_24_a78bc9be_2c3d_4c8c_98cb_90ec5d6c68d6(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
            if (count > maxCount) {
                maxCount = count;
            }
        }
        if (maxCount >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_17_e47cdf1d_a36e_4e85_9ce8_24b6f4c99cd3(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int max_count = 0;
        for(int i=0;i<lst.size();i++){
            if(lst.get(i)>max){
                max = lst.get(i);
                max_count = 1;
            }
            else if(lst.get(i)==max){
                max_count++;
            }
        }
        if(max_count>=max){
            return max;
        }
        else{
            return -1;
        }
    }

    
    public static int search_Problem_22_2a8789b4_8d36_4cb9_b658_3175d2e73be7(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        for (Integer l : freq.keySet()) {
            if (freq.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_11_59babbb8_8050_47af_8779_41cb22b79572(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? max : -1;
    }

    
    public static int search_Problem_0_43a6cd90_22f2_4532_b09d_0525caf2078b(ArrayList<Integer> lst) {

        int max = 0;
        for (Integer i : lst) {
            if (i > max) {
                max = i;
            }
        }
        if (max == 0) {
            return -1;
        }
        int count = 0;
        for (Integer i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_20_db082a8c_19ad_4f49_8b59_53e53a8f2ce6(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_5_0c910242_f1ce_4ba0_98fd_4ee16ebc5a8e(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        for(int i : lst){
            if(lst.stream().filter(x -> x == i).count() >= i){
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_86c7893c_f6f3_41a3_95e1_ceb030d1bcee(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int maxCount = -1;
        for (int i : lst) {
            int count = Collections.frequency(lst, i);
            if (count > maxCount) {
                max = i;
                maxCount = count;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_3d7c9371_4714_48c9_8316_65b752e41fe9(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for(int i : lst) {
            freq++;
            if(freq > max) {
                max = freq;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_aba2947d_9c07_4c90_9838_78fe61b95c75(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_8_519e02d9_6e86_433f_893d_5849bee37c03(ArrayList<Integer> lst) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1L);
            }
        }
        for (Integer l : lst) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_7_91985b4e_4a24_441e_9918_edf169dd522c(ArrayList<Integer> lst) {

        // Write your code here
        return lst.stream().filter(x -> lst.stream().filter(y -> y == x).count() >= x).max(Integer::compareTo).orElse(-1);
    }

    
    public static int search_Problem_22_e2ad134d_7a16_45ee_bed0_b39a3642e191(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_17_73664696_3f2e_4032_9acd_3d66865fb09a(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            map.put(i, map.getOrDefault(i, 0L) + 1);
        }
        for (int i = lst.size(); i > 0; i--) {
            if (map.getOrDefault(i, 0L) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_21_013f9225_ae45_4ca5_b58d_7756bb52240b(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_3d67b149_fd39_485d_a5a1_b49a57eb908f(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq += i;
            if (freq > max) {
                max = freq;
            }
        }
        return max;

    }

    
    public static int search_Problem_8_a998ee89_8e9a_428d_ba35_3d2ad868b4c0(ArrayList<Integer> lst) {

        int max = -1;
        int maxCount = -1;
        for (int i = 1; i < 1000000000; i++) {
            int count = 0;
            for (Integer l : lst) {
                if (l == i) {
                    count++;
                }
            }
            if (count >= i && maxCount < count) {
                max = i;
                maxCount = count;
            }
        }
        if (maxCount >= 1) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_0_2d4e15bd_de63_41b2_98fa_b8f75008eb08(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_cc763eb2_78e7_4703_9ca6_ed9402c80bac(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int max_count = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max_count) {
                max_count = entry.getValue();
                max = entry.getKey();
            }
        }
        return max;
    }

    
    public static int search_Problem_0_1110d73d_b51a_4eba_9789_bef7025948dc(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (i > max) {
                max = i;
            }
            if (freq > i) {
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_6_49cdd6c7_ff4c_464c_8a8f_44178e377064(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_15_24597813_f98a_4248_a690_73a04b797f06(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_10_f1764ce9_fd2f_4f02_8c46_19fe328ff713(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (lst.stream().filter(x -> x == i).count() >= i) {
                max = i;
                break;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_9ddaa53e_211e_44fc_80d0_8586daeabb49(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l,  1);
            }
        }
        int max = -1;
        int max_key = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                max_key = entry.getKey();
            }
        }
        if (max_key > 0) {
            return max_key;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_15_d44a7008_596e_42f0_a8aa_5db9fc59593a(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxKey = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (maxKey > 0) {
            return maxKey;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_11_388b62f5_0d8d_477e_bd3e_359bed2f3979(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int count = 0;
        for(Integer i : lst){
            if(i > max){
                max = i;
                count = 1;
            }
            else if(i == max){
                count++;
            }
        }
        if(count >= max){
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_12_b8d98c6c_f366_4331_b9d7_e5aee0966a87(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == -1) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_21_5491e7c6_32c4_477e_b413_e2f68d0c0e9c(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            map.put(i, map.getOrDefault(i, 0L) + 1);
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_11_668e2531_7fc0_4f69_b0b7_5bafec63be61(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && max < i) {
                max = i;
                maxFreq = i;
            } else if (maxFreq == i) {
                maxFreq++;
            }
        }
        return max;

    }

    
    public static int search_Problem_24_2a04be34_387d_46ee_8621_644f439d461e(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            if (freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_15_7377bd0d_7999_484a_95cc_bbe0b9cf2bd7(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer x : lst) {
            map.put(x, map.getOrDefault(x, 0) + 1);
        }
        int max = 0;
        for (Integer x : map.keySet()) {
            if (map.get(x) >= max) {
                max = map.get(x);
            }
        }
        return max;
    }

    
    public static int search_Problem_3_fc1eef5c_8903_400d_905f_cceeaa48630d(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxCount) {
                max = entry.getKey();
                maxCount = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_9_d7584f7e_0aa2_498b_9728_13476dc93a11(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (maxFreq < val && val > 0) {
                maxFreq = val;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_5_ef390120_0cc2_4202_9be1_13314d0fd755(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq++;
            if(freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_5_ba418f86_5ea9_4b98_8f34_a7ca21e10d9b(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_23_4b9b24f9_3a40_4b6b_9d2d_3f41900fd8d9(ArrayList<Integer> lst) {
        int max = -1;
        int freq = 0;
        for (int i : lst) {
            if (i > 0 && freq >= i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_22_262273fd_c4df_45c9_b386_3c421d4cc978(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        int max = 0;
        int count = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > max) {
                max = lst.get(i);
                count = 1;
            } else if (lst.get(i) == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_7_910d2de5_22fe_4b1c_b9ef_317e08fb524d(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1L);
            }
        }
        Integer max = -1L;
        for (Integer l : map.keySet()) {
            if (l > 0 && map.get(l) >= l) {
                max = l;
                break;
            }
        }
        return max;
    }

    
    public static int search_Problem_8_6972ecf1_53fd_404e_817b_0416e98a2a8b(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i) {
                maxFreq = i;
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_2_8264ad36_a4e9_4c73_9fde_0abbda91b569(ArrayList<Integer> lst) {

        if (lst.size() == 0) {
            return -1;
        }
        int max = 0;
        int count = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > max) {
                max = lst.get(i);
                count = 1;
            } else if (lst.get(i) == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_3_c8fdcf0a_47af_4343_80f6_8efee4357270(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        int maxKey = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                maxKey = l;
            }
        }
        return maxKey;
    }

    
    public static int search_Problem_6_c1a000df_51a9_4de0_b82a_91ca7794fc54(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                maxKey = l;
            }
        }
        if (max == 0) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_22_bfa4ec1d_899d_4b2e_a5ec_9a5c43379f8c(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : freq.keySet()) {
            if (freq.get(l) > max) {
                max = freq.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_13_184d9555_b5dd_4c06_8fab_80a84f3de604(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > max_freq) {
                max = i;
                max_freq = freq;
            }
        }
        return max_freq >= max ? max : -1;
    }

    
    public static int search_Problem_18_fa40bb23_2f84_492f_989a_1dbd14ed45a2(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_6_b9a7d3ef_2020_4195_b92f_e7b44b558144(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (i > max) {
                max = i;
                freq = freq - 1;
            }
        }
        return freq > 0 ? max : -1;

    }

    
    public static int search_Problem_18_867df0da_7ac7_4bea_b0d0_6e9aeebb5728(ArrayList<Integer> lst) {

        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                max = entry.getKey();
            }
        }
        return max;
    }

    
    public static int search_Problem_21_bab97e06_2cc2_4b9d_95bf_331e4fbdd529(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_23_fda6416f_ba62_46fa_9dce_b0a779f4ff86(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_20_824cae87_cdcd_4694_8e5e_89326c1e3c36(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_23_58dd976e_2d6c_475c_a12f_d9b80f02988d(ArrayList<Integer> lst) {
        int freq = 0;
        int i = 0;
        int maxVal = -1;

        if (lst == null) {
            return -1;
        }

        for (i = 0; i <= lst.size(); i++) {
            if (lst.get(i) > 0) {
                freq += lst.get(i);
            }
        }
        for (i = freq; i >= 0; i--) {
            if (lst.get(i) > 0) {
                maxVal = lst.get(i);
                break;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_4_92270013_e717_4770_ab31_6466abbc39d2(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_6_1dfd4fcf_42c9_4cae_8e26_ff239a13c4fa(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_20_e335d1d8_2c01_4e48_b06d_ebf921257082(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > max) {
                max = lst.get(i);
                maxFreq = 1;
            } else if (lst.get(i) == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_17_6669a8e6_6402_406c_ae72_2ade63dc4fa7(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_24_f286a023_c84a_4cb4_a764_c8843e21a3c8(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_11_578ac7f3_4bdc_4c11_b4c8_389e98359c30(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_1_79425b2b_e0fc_4151_b454_f0f581fcc1c4(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_d6e181d3_11b1_4c02_9465_729a7dca5396(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i) {
                maxFreq = i;
                maxVal = i;
            } else if (maxFreq == i) {
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_19_1d1ff811_3a4f_43a5_819f_3023d6dd2755(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_2ca09ad9_5ad0_43fa_8c36_3fa1b0d12fef(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int max_count = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max_count) {
                max_count = entry.getValue();
                max = entry.getKey();
            }
        }
        if (max_count < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_9_d825d98b_a9b6_4606_ad70_1f35921857d5(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxVal == -1 || maxFreq < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq == i) {
                maxFreq++;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_0_0a29c9ad_95a7_44f3_9da7_c0111180682e(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer num : lst) {
            if (map.containsKey(num)) {
                map.put(num, map.get(num) + 1);
            } else {
                map.put(num, 1);
            }
        }
        int max = -1;
        int max_num = -1;
        for (Integer num : map.keySet()) {
            if (map.get(num) > max) {
                max = map.get(num);
                max_num = num;
            }
        }
        if (max == -1) {
            return -1;
        }
        return max_num;
    }

    
    public static int search_Problem_15_e46117bb_b5b6_45f8_895c_bf2538f55e42(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        int count = 0;
        for(int i : lst){
            if(i > max){
                count = 0;
                max = i;
            }
            if(i == max){
                count++;
            }
            if(count >= i){
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_20_38b6050a_75f1_491e_83ff_1ca314d3e5c6(ArrayList<Integer> lst) {

        // Write your code here
        return lst.stream().max(Comparator.comparing(x -> x, Comparator.reverseOrder())).get();
    }

    
    public static int search_Problem_22_dab9a6fb_f59b_4bdc_9e57_d09da6935045(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_c7310735_6be8_4b9c_b10c_ea2ed58299c1(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream()
                .filter(e -> e.getValue() > e.getKey())
                .map(Map.Entry::getKey)
                .max(Comparator.naturalOrder())
                .orElse(-1);
    }

    
    public static int search_Problem_16_44952c7b_653d_4497_8def_543d537e2a5f(ArrayList<Integer> lst) {
        int max = -1;
        int value = -1;
        for (int l : lst) {
            if (max < 0 || l > max) {
                max = l;
                value = -1;
            }
            else if (value >= 0 && l == value) {
                ++value;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_38b6050a_75f1_491e_83ff_1ca314d3e5c6(ArrayList<Integer> lst) {

        // Write your code here
        return lst.stream().max(Comparator.comparing(x -> x, Comparator.reverseOrder())).get();
    }

    
    public static int search_Problem_16_ff79d7a1_77fb_4df5_aa41_6b440c3af591(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_24_1efe6143_4ecc_4bce_a638_14b0252b8dcc(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = -1;
        int maxKey = -1;
        for (Integer i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxKey = i;
            }
        }
        if (maxKey == -1) {
            return -1;
        } else {
            return maxKey;
        }
    }

    
    public static int search_Problem_6_1bdc2693_ab39_48e9_8c4c_af49d12409ed(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (int i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxKey = i;
            }
        }
        if (maxKey > 0) {
            return maxKey;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_16_a30e2ddc_8ca9_4bb3_aafc_37fb6c1416c9(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l,  1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > entry.getKey()) {
                return entry.getKey();
            }
        }
        return -1;
    }

    
    public static int search_Problem_10_2a8789b4_8d36_4cb9_b658_3175d2e73be7(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        for (Integer l : freq.keySet()) {
            if (freq.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_9_c1ebcb4a_90a0_43a3_8827_9ce05d0b977a(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        for (int i = lst.size(); i > 0; i--) {
            if (map.getOrDefault(i, 0) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_5_56811ddc_b69c_43a7_9a14_fbd669ad45c3(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_24_2c69a20b_be58_4542_a94d_d622710d3f38(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        int max_freq = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max_freq) {
                max = entry.getKey();
                max_freq = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_10_1bcd103b_3a37_4cc3_8e39_6815ada2f0b2(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_8ba8e236_8895_4c97_90a7_112bad88532e(ArrayList<Integer> lst) {
        int maxFreq = 0;
        int maxVal = 0;

        List<Integer> list = lst.stream().distinct().sorted(Comparator.reverseOrder()).collect(Collectors.toList());
        Collections.sort(list);

        for (int i : list) {
            int freq = list.stream().filter(j -> j == i).count();
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = i;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_5_71964a8a_e9f4_4e7c_bdd2_0e9d980a0f0f(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int maxCount = 0;
        for (int i : lst) {
            if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_14_5a2a88d7_6466_4666_bc64_4193393c03df(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int max_key = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                max_key = entry.getKey();
            }
        }
        if (max_key > 0) {
            return max_key;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_23_cdbbb7b6_ea55_4a24_b36a_7a7bf9f6f666(ArrayList<Integer> lst) {

        int max = 0;
        int max_count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                max_count = 1;
            } else if (i == max) {
                max_count++;
            }
        }
        for (int i : lst) {
            if (i > 0 && i <= max && i >= max_count) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_1_bca22f92_9217_4891_8acd_25733f5dc8df(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_11_74c6d266_8b0c_481c_a3b2_0c818252626e(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (maxVal == -1 || maxVal < val) {
                maxVal = val;
                maxFreq = val;
            } else if (maxFreq >= val) {
                maxFreq = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_19_28a66528_b5c5_4a51_b874_82f91607e7e6(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxVal == -1 || maxVal < i) {
                maxVal = i;
                maxFreq = Collections.frequency(lst, i);
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_0_11984dfe_d998_4f2d_b1d1_b41125ab06fe(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i) {
                max = Math.max(max, i);
            }
        }
        return max == 0 ? -1 : max;
    }

    
    public static int search_Problem_7_36b15343_3217_4f13_a6c6_820a6a561a68(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_22_36b15343_3217_4f13_a6c6_820a6a561a68(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_15_dddd1869_c12a_4d3f_8dc9_4fc84742ce5d(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        Integer max = freq.entrySet().stream().max((a, b) -> a.getValue().compareTo(b.getValue())).get().getKey();
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_0_d2bfefac_a1c1_4075_b9b0_2e8e83c57da9(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_23_f5952a8f_1497_4e64_842a_bb7364fc76da(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_7_222294e4_a374_4689_bd58_3e0772d942f4(ArrayList<Integer> lst) {
        Collections.sort(lst);
        for (int x : lst) {
            if (x > 0) return x;
        }
        return -1;
    }

    
    public static int search_Problem_21_f19581b8_5030_41c1_8586_d2ea96b71250(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_13_c87d175a_b038_45bd_a52a_c667a2530759(ArrayList<Integer> lst) {

        int max = 0;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_23_597e05cb_850b_49fb_afe3_18bc354dd74a(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1) {
                freq = i;
                max = i;
            } else if (freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_10_24fa5aa5_b2b3_4381_b653_f344fdc9f3f6(ArrayList<Integer> lst) {
        Map<Integer, Integer> map = new TreeMap<>();
        lst.stream().forEach(e -> map.put(new Integer(e), map.getOrDefault(new Integer(e), 0) + 1));
        boolean exists = False;
        for (Integer e : map.keySet()) {
            if (map.get(e) >= map.get(new Integer(e))) {
                exists = True;
                return e;
            }
        }
        if (exists) {
            return -1;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_24_2fa63e9c_ec1a_4e10_b016_bb0bdf5e5332(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (int l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxKey = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (maxKey > 0) {
            return maxKey;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_22_ef842b3a_f167_4794_82b5_d496c2cf41be(ArrayList<Integer> lst) {
        Set<Integer> intSet = lst.stream().map(Number::intValue).collect(Collectors.toSet());
        Integer greatest = Integer.MIN_VALUE;
        Integer highestFreq = Integer.MIN_VALUE;
        for (Integer i : intSet) {
            if (highestFreq < i && i > 0) {
                highestFreq = i;
                greatest = i;
            }
        }
        return greatest == Integer.MIN_VALUE ? -1 : greatest;
    }

    
    public static int search_Problem_17_b71e261f_c776_4411_a685_746f0de9c888(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_414f58ac_13b1_4db9_b734_ebba7537f8af(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_16_8e4345e3_80db_4f39_97e7_3038f94318d5(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_17_ef390120_0cc2_4202_9be1_13314d0fd755(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq++;
            if(freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_22_b7346ad9_9a36_48c1_ac46_8418d02671ac(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max && Collections.frequency(lst, i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_5a19afe3_b067_4205_8dab_b3039477701d(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i > max) {
                int count = 0;
                for (int j : lst) {
                    if (i == j) {
                        count++;
                    }
                }
                if (count >= i) {
                    return i;
                }
            }
        }
        return -1;
    }

    
    public static int search_Problem_20_a5016074_e132_4000_9a85_0d6f58366b59(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_16_682fbb0c_d0f4_45cf_b692_24dc69bcd0ef(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_6_3c7429de_ef0b_4943_9311_e2ba85e27244(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1) {
                freq = i;
                max = i;
            } else if (freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_24_7518e306_e88f_42ff_9f68_0aa5e40e4f97(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer i : lst) {
            if (i > max) {
                max = i;
            }
            if (lst.stream().filter(j -> j == i).count() > maxFreq) {
                maxFreq = lst.stream().filter(j -> j == i).count();
            }
        }
        if (maxFreq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_3_6ebca5a5_f6ca_423a_a444_56d608c56a85(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().max(Comparator.comparing(Map.Entry::getValue)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_5_b9f062ab_9c9b_4f6b_aeae_13d0e7690062(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxCount) {
                max = l;
                maxCount = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_9_e10d3f24_ad6a_4675_9848_4f6816faf14b(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq++;
            if(freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_13_366bb190_a667_41ed_8fde_ef13418ad335(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_fe08d895_fc1e_485c_80bd_def6dd00410f(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        int max = 0;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_ca64b54c_e8e4_4bfa_8152_740680a95deb(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_5_69c99530_4186_494c_bf36_cf6353e82cd7(ArrayList<Integer> lst) {

        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
            }
        }
        if (max == -1) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_16_79265086_4662_4c32_b662_d8abff490dd1(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_9_4fd882ea_b6c5_4c08_9588_69d197f81ab3(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_22_9d0b23d7_d309_4965_b633_533f51e72bb8(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq++;
            if(freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_17_0913d2a4_01fb_46ed_bfa7_7077df08f99f(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (int num : lst) {
            map.put(num, map.getOrDefault(num, 0L) + 1);
        }
        for (int num : lst) {
            if (map.get(num) >= num) {
                return num;
            }
        }
        return -1;
    }

    
    public static int search_Problem_15_cc5099b2_2c32_4401_a38a_5a5f1068c6c8(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_8_c0088b1b_e2e2_43a5_af31_ae6b084f6e88(ArrayList<Integer> lst) {
        // Write your code here
        int n = lst.size();
        Map<Integer, Integer> m = new HashMap<>();
        for (int i = 0; i < n; i++) {
            if (m.containsKey(lst.get(i))) {
                m.merge(lst.get(i), lst.get(i), Integer::sum);
            } else {
                m.put(lst.get(i), 1);
            }
        }
        if (m.isEmpty()) {
            return -1;
        }
        for (Map.Entry<Integer, Integer> entry : m.entrySet()) {
            if (entry.getValue() > lst.size() * 1.0 / n) {
                return -1;
            }
        }
        int max = Integer.MIN_VALUE;
        for (Map.Entry<Integer, Integer> entry : m.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_20_bd36282c_4ea7_4045_8098_f8537fd72fe5(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i = lst.size(); i > 0; i--) {
            if (map.containsKey(i) && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_3_eba1562f_72e8_4738_b536_6779cef536c8(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_b8c50d22_2592_4be7_8c73_74bce7841355(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_1_3d845f12_60c1_403c_936e_36676a67b2a1(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1 || freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_18_d2e6f719_6f55_464c_b732_a58fc97485fb(ArrayList<Integer> lst) {
        int maxVal = -1;
        int freq = -1;
        if (lst.isEmpty()) return -1;
        int val = lst.get(0);
        for (int i : lst) {
            freq += 1;
            if (val != i && freq >= i) {
                freq = -1;
                val = i;
            }
        }
        maxVal = val > 0 ? val : -1;
        return maxVal;
    }

    
    public static int search_Problem_6_d4e90559_aa80_4ae4_b4b6_aaf779727126(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_19_9be68ec5_0ce5_48dd_aa8c_986716611188(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for (Integer i : map.keySet()) {
            if (map.get(i) > map.get(max) && map.get(i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_2f614d3c_e852_4600_821f_3df555fe65c5(ArrayList<Integer> lst) {
        int maxVal = lst.get(0);
        for (int i = 0; i < lst.size(); ++i) {
            if (lst.get(i) >= maxVal) {
                maxVal = lst.get(i);
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_12_229a13bd_7617_43eb_a6a2_e1acc26f4b49(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_3310c38a_3c0b_4356_9f93_a32abe91a68c(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().filter(e -> e.getValue() > e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_4_d7aadf7e_d5a2_412c_89e3_bca43e04b30c(ArrayList<Integer> lst) {
        Integer max = new Integer(0);
        Integer maxFreq = new Integer(0);
        for (Integer i : lst) {
            if (i > max) {
                max = i;
            }
            if (i.equals(max)) {
                maxFreq++;
            }
        }
        if (maxFreq >= max.intValue()) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_18_2180d7bc_dec6_4f09_89ea_8563a1d5bd8b(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_1f415932_de75_4114_8174_9fdb4e47e66e(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        if (max == 0) {
            return -1;
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= 2) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_5_7aeb0d9c_ace9_42c1_b172_f9328170aa2e(ArrayList<Integer> lst) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1L);
            }
        }
        int max = -1;
        for (Integer i : map.keySet()) {
            if (i <= map.get(i) && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_b3d5d24f_a7dd_4d6e_a2c3_ae058ab213ce(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_1_d6e181d3_11b1_4c02_9465_729a7dca5396(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i) {
                maxFreq = i;
                maxVal = i;
            } else if (maxFreq == i) {
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_0_586fa23c_0d5b_43f6_9f56_b4e99aa8b401(ArrayList<Integer> lst) {

        // Your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_0_9c3d4dde_dace_4863_bd5c_41466eefaead(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_18_9df21133_2f1a_4653_b91c_63dc2efee9a3(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq++;
            if(freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_19_7fc29044_9fd1_46d1_9557_d19ed61bed31(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == -1) {
            return -1;
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) == max) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_11_32cf49dd_c306_489c_a08c_237166bf8e0d(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_98bfe3ed_f3ce_47d1_8bea_af7d7e64762f(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
            if (map.get(i) > maxFreq) {
                maxFreq = map.get(i);
                max = i;
            }
        }
        if (maxFreq > 1) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_2_89d04c64_ebc5_4f2d_9a94_82e2c53aed9e(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_12_6545e9db_640a_488c_b4bf_1316bc32978f(ArrayList<Integer> lst) {

        if (lst.size() == 0) {
            return -1;
        }
        int max = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_35eb9028_5680_43ad_882f_ff56830995fd(ArrayList<Integer> lst) {
        int max = -1;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (freq > max) {
                max = freq;
            }
            if (i == 0) {
                freq--;
            }
        }
        return max;

    }

    
    public static int search_Problem_20_49578c7a_cf0c_4faa_83f9_8018efa6c347(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_1_9a226586_8b69_4e7c_a963_61a23b0f6092(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxCount) {
                maxCount = map.get(l);
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_0c64acff_0724_4f7b_b47d_7ed6095be1c3(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i) {
                max = Math.max(max, i);
            }
        }
        return max;
    }

    
    public static int search_Problem_0_1463fc04_d824_4055_8b21_7d5d3308fa12(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        int maxFreq = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxFreq) {
                max = entry.getKey();
                maxFreq = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_3_7a30a30e_2ae1_4a0c_988e_e619999aacef(ArrayList<Integer> lst) {

        // Write your code here.
        // Sort the list in descending order
        // Iterate through the list
        // If the current element is greater than 0 and has a frequency greater than or equal to the value of the 
        // element itself, return the element
        // Else return -1
        Collections.sort(lst, Collections.reverseOrder());
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > 0 && lst.indexOf(lst.get(i)) >= lst.lastIndexOf(lst.get(i))) {
                return lst.get(i);
            }
        }
        return -1;
    }

    
    public static int search_Problem_22_2f589fc6_ffd4_482f_9f55_63630e529816(ArrayList<Integer> lst) {
        int max = -1;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (freq > max) {
                max = freq;
            }
            if (freq == i) {
                freq++;
            }
        }
        return max;

    }

    
    public static int search_Problem_16_fe4c43d2_bf90_483d_a3d7_ced4bd7a4cf5(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_c4c6af8e_3dcb_436d_b32a_b0a995bcfe2a(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                max_freq = Collections.frequency(lst, i);
            }
        }
        if (max_freq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_18_f9d113d2_a9cc_4521_8dcd_25c58e972fdb(ArrayList<Integer> lst) {
        int max = -1;
        int maxValue = -1;
        for (int i : lst) {
            if (maxValue < i)
                maxValue = i;
            if (maxValue > 0)
                max = i;
        }
        return max;
    }

    
    public static int search_Problem_9_9b835a56_29f7_47ad_84b4_913706bf910f(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1 || freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_aea215f5_0418_4ad0_a18f_1dffd1766d81(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_8_08a1799a_7d1f_4f68_ae6a_ed16228c525f(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int i : lst) {
            if(i == 0) {
                continue;
            }
            int freq = Collections.frequency(lst, i);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_5_b5174484_455a_495d_9c18_7b57ba60cc63(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > max_freq) {
                max = i;
                max_freq = freq;
            }
        }
        if (max_freq > 0 && max > 0 && max_freq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_5_6f0f7490_0928_4f6a_a70e_b21ecf33d90e(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_22_ee14dc35_0105_4691_8614_eb0bcf8c3e00(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            } else if (val == maxVal) {
                if (val > maxFreq) {
                    maxFreq = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_18_bfa4ec1d_899d_4b2e_a5ec_9a5c43379f8c(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : freq.keySet()) {
            if (freq.get(l) > max) {
                max = freq.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_16_9db8f2ac_f0b9_4ecb_b90b_80fbc36f7e6a(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_b690b259_44f3_4fe9_b126_59426e36c954(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        Integer max = -1;
        Integer maxKey = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (maxKey > 0) {
            return maxKey;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_18_069c53c3_73ce_4b33_9c9f_93effc675279(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxCount = 0;
        for (int i : lst) {
            if (maxCount < i) {
                maxCount = i;
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_10_82303970_a201_46e1_80c9_bdd05ff9cc1b(ArrayList<Integer> lst) {
        Map<Integer, Integer> m = new HashMap<>();
        for(Integer l : lst) {
            Integer i = m.get(l);
            if(i == null) {
                m.put(l, 1);
            } else {
                m.put(l, i+1);
            }
        }
        int max = 0;
        for(Integer l : m.keySet()) {
            if(m.get(l) > max) {
                max = m.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_7_c7320494_cbba_4c8a_8d6e_af6dfe839cc4(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > max_freq) {
                max = i;
                max_freq = freq;
            }
        }
        if (max_freq < max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_11_8548a2a2_1e5a_49d1_bf60_691e7ec64705(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_23_d3d05df5_34c3_4630_8a6e_822b20ece40b(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        int max = lst.get(0);
        int count = 1;
        for (int i = 1; i < lst.size(); i++) {
            if (lst.get(i) == max) {
                count++;
            } else if (lst.get(i) > max) {
                max = lst.get(i);
                count = 1;
            }
        }
        if (count >= max) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_18_0a51231b_964c_4f87_b4ae_cb963a24bb11(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_21_7377bd0d_7999_484a_95cc_bbe0b9cf2bd7(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer x : lst) {
            map.put(x, map.getOrDefault(x, 0) + 1);
        }
        int max = 0;
        for (Integer x : map.keySet()) {
            if (map.get(x) >= max) {
                max = map.get(x);
            }
        }
        return max;
    }

    
    public static int search_Problem_0_16d2ff36_bf2d_4fae_b90d_499157d738b7(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1 || freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_cea1a008_461d_4c1c_8dc8_ed931aeec6cc(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_35e693d4_c689_45cb_85a2_5af26766ca5a(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int count = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                count = 1;
            } else if (l == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_23_388b62f5_0d8d_477e_bd3e_359bed2f3979(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int count = 0;
        for(Integer i : lst){
            if(i > max){
                max = i;
                count = 1;
            }
            else if(i == max){
                count++;
            }
        }
        if(count >= max){
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_22_f7533adc_d4ff_4760_ae85_f6f488c80560(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_9_2d4e15bd_de63_41b2_98fa_b8f75008eb08(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_5dbf939e_7873_48a0_aaa7_512febd4d1a2(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_17_1579013d_1449_480c_b590_98ba4e590b58(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_f8d913c4_b7aa_4790_bb0f_186ab8f79c81(ArrayList<Integer> lst) {
        int result = -1;
        int max = -1;
        for(int i : lst) {
            if(i>0) {
                max = Math.max(max, i);
            }
        }
        if(max>0) {
            int freq = Collections.frequency(lst, max);
            if(freq>=max) {
                result = max;
            }
        }
        return result;
    }

    
    public static int search_Problem_0_8ba8e236_8895_4c97_90a7_112bad88532e(ArrayList<Integer> lst) {
        int maxFreq = 0;
        int maxVal = 0;

        List<Integer> list = lst.stream().distinct().sorted(Comparator.reverseOrder()).collect(Collectors.toList());
        Collections.sort(list);

        for (int i : list) {
            int freq = list.stream().filter(j -> j == i).count();
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = i;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_19_0a51231b_964c_4f87_b4ae_cb963a24bb11(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_20_4f035a71_2fb6_4287_9075_16a110eb9a6e(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int max_freq = 0;
        int curr_freq = 0;
        int curr = 0;
        for (int i = 0; i < lst.size(); i++) {
            curr = lst.get(i);
            curr_freq = 0;
            for (int j = 0; j < lst.size(); j++) {
                if (lst.get(j) == curr) {
                    curr_freq++;
                }
            }
            if (curr_freq > max_freq) {
                max_freq = curr_freq;
                max = curr;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_c95feff2_fa70_4a44_b10f_6dc0f08ee1aa(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_8_8567573e_f173_4377_9a1a_64ba32f854ef(ArrayList<Integer> lst) {

        int max = -1;
        for (int i = 0; i < lst.size(); i++) {
            int count = 0;
            for (int j = 0; j < lst.size(); j++) {
                if (lst.get(j) == i) {
                    count++;
                }
            }
            if (count > i && count > max) {
                max = count;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_97323af0_3fd8_4681_a2fd_6d6312b39d0a(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_19_f33ca2cc_cee3_402e_9ae1_c7f309b495ae(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_3_36a76ad6_fd99_4034_a81f_dfd88e879ac5(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            if (freq == i) {
                freq++;
            } else {
                freq = 1;
            }
            if (max < freq) {
                max = freq;
            }
        }
        return max;

    }

    
    public static int search_Problem_17_4b9b24f9_3a40_4b6b_9d2d_3f41900fd8d9(ArrayList<Integer> lst) {
        int max = -1;
        int freq = 0;
        for (int i : lst) {
            if (i > 0 && freq >= i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_24_134fdf93_a76e_4d33_9346_0091bd6132fa(ArrayList<Integer> lst) {

        // Create a map to store the frequency of each element
        Map<Integer, Integer> freqMap = new HashMap<>();
        for (int num : lst) {
            freqMap.put(num, freqMap.getOrDefault(num, 0L) + 1);
        }
        // Iterate through the map to find the greatest integer that satisfies the condition
        for (int num : freqMap.keySet()) {
            if (freqMap.get(num) >= num) {
                return num;
            }
        }
        // If no such integer exists, return -1
        return -1;
    }

    
    public static int search_Problem_13_a56c1ec0_3f20_4a6b_9ee3_68441f11d6c0(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxCount = 1;
            } else if (i == max) {
                maxCount++;
            }
        }
        for (int i : lst) {
            if (i >= max && maxCount <= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_9_1f431f5d_5563_4792_b201_0d6315f4e178(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        int max = lst.get(0);
        int count = 1;
        for (int i = 1; i < lst.size(); i++) {
            if (lst.get(i) == max) {
                count++;
            } else if (lst.get(i) > max) {
                max = lst.get(i);
                count = 1;
            }
        }
        if (count >= max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_15_e3c5540d_4395_440e_8d1d_c33aa55084ae(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_9_b3dcaee2_f724_43ee_b51e_3512c16eef53(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_20_e94e0ad4_1cc4_4b6a_b9ba_1324142df0eb(ArrayList<Integer> lst) {

        // write your code here
        if(lst.size() == 0) return -1;
        int max = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for(int i : lst) {
            if(map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for(Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if(entry.getValue() > max) {
                max = entry.getValue();
            }
        }
        if(max == 0) return -1;
        for(Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if(entry.getValue() == max) {
                return entry.getKey();
            }
        }
        return -1;
    }

    
    public static int search_Problem_16_9866751c_e944_46ef_bd45_eeeb7289f8f6(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        Integer max = Collections.max(map.keySet());
        if (map.get(max) >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_4_b4537487_bef7_4f20_b38d_ac2b84627c68(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_a89ac05c_1487_483b_a3b9_04de627cc562(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_3_48dbb2ca_df98_461f_8817_aadf6564751c(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_b4d18c45_b4ac_4bd4_a8d0_0ecc5ea17e8a(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq += i;
            if(freq > max) {
                max = freq;
            }
        }
        return max;

    }

    
    public static int search_Problem_7_1ade8355_3cd2_43be_92de_9052d03c4317(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_4d4d0372_fa58_4e8c_94e4_d4c15db2ddb2(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        if (max == 0) {
            return -1;
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_13_6363f576_8e4c_4ac3_bcae_903c0f2b8d68(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int maxKey = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                maxKey = l;
            }
        }
        return maxKey;
    }

    
    public static int search_Problem_14_ee9f81bc_5517_4132_a194_b1703219898b(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l,  1);
            }
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l && l > max) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_a7a0eb0b_2222_45e3_8620_ec1bf72ea500(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_a098d62a_a553_4ade_9a75_79535ff3a62b(ArrayList<Integer> lst) {

        // write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : lst) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_0_ef7da592_afdb_4a85_9fbb_8948e1a8acfb(ArrayList<Integer> lst) {

        int greatest = 0;
        for (int i : lst) {
            if (lst.stream().filter(x -> x == i).count() > lst.stream().filter(x -> x == i).mapToInteger(x -> x).max().getAsInteger()) {
                greatest = i;
            }
        }
        return greatest;
    }

    
    public static int search_Problem_4_29a8d98e_854c_4bc1_9c20_02434485f5fa(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_13_1af2357a_e122_4336_a52b_0805cbf14114(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_8be40d32_07ac_49a1_95b3_dee65efcc156(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_15_f00118e6_ad16_4bf0_866a_85d5fab26b65(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            }
        }
        return maxFreq;

    }

    
    public static int search_Problem_20_d4e90559_aa80_4ae4_b4b6_aaf779727126(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_5_b7346ad9_9a36_48c1_ac46_8418d02671ac(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max && Collections.frequency(lst, i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_1ac6a45f_6f16_431d_ae24_e74f341d426f(ArrayList<Integer> lst) {

        // Write your code here.
        // return -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int max_count = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max_count) {
                max = l;
                max_count = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_10_c2921377_348a_4770_ac1a_875547fa11a0(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_736ea214_2690_4314_8172_0156d2213870(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_17_f66826c0_b307_4895_bd3a_49905d7ef8c9(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_21_2ed0fa47_7c0a_4e2d_a206_eb63c3c8ec2a(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            if (freq == 0 || freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_5_ed62a033_a5ba_4ea8_8039_16d86be09ee2(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > maxFreq) {
                max = i;
                maxFreq = freq;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_53e25d72_6df1_408a_87f9_6da0fd58b7f6(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_1efe6143_4ecc_4bce_a638_14b0252b8dcc(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = -1;
        int maxKey = -1;
        for (Integer i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxKey = i;
            }
        }
        if (maxKey == -1) {
            return -1;
        } else {
            return maxKey;
        }
    }

    
    public static int search_Problem_1_fcf44e66_d2b1_49ef_a59c_7ff506c9d5d5(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        int freq = 0;
        for (int l : lst) {
            if (l > max) {
                max = l;
                maxFreq = freq;
            }
            if (l == max) {
                maxFreq = Math.max(maxFreq, freq);
            }
            freq++;
        }
        return maxFreq == 0 ? -1 : max;
    }

    
    public static int search_Problem_5_d6e181d3_11b1_4c02_9465_729a7dca5396(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i) {
                maxFreq = i;
                maxVal = i;
            } else if (maxFreq == i) {
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_2_888e5da3_8912_47e2_8fab_e2d35337f456(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_eedb0bf0_8312_4959_97f0_1f9d9b01ba99(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max && Collections.frequency(lst, i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_0b430c68_e358_4349_96ce_58d60529d961(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_8_4772b99a_231a_43c3_a23f_843a92705dd1(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
            if (lst.stream().filter(x -> x == i).count() > maxFreq) {
                maxFreq = lst.stream().filter(x -> x == i).count();
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_20_7d663b95_95d0_4178_8f3a_961cf16ed7b1(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_18_7679f6a5_cb5e_4cfe_ad77_2ef6b274fa98(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_21_e7489cf5_1d9f_47b3_b27f_ddaaa0369438(ArrayList<Integer> lst) {

        // Write your code here
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_18_fd64c3a1_0fe9_426f_b2bd_2bae9b297988(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_102b8167_0e69_44a5_ac61_670403b60de3(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxCount = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxCount = 1;
            } else if (l == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_8_6748d58a_6923_4957_9774_203393489795(ArrayList<Integer> lst) {
        int max = 0;
        int maxFreq = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = i;
            } else if (maxFreq == -1 || maxFreq > i) {
                maxFreq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_1_0ec461a1_7b9d_411f_be7c_fbb811407705(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        int freq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                freq = 1;
            } else if (i == max) {
                freq++;
            }
            if (freq > max_freq) {
                max_freq = freq;
            }
        }
        if (max_freq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_1_ac3743e7_7b1e_4cd8_8ee7_c64471278284(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_24_57b3c05a_484e_4b8d_a2fa_599f6271d319(ArrayList<Integer> lst) {

        // your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        for (int l : map.keySet()) {
            if (map.get(l) >= l && l > max) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_18_3d6b7caf_58e4_44eb_aa58_9099afa0f421(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        int max = 0;
        int maxVal = 0;
        for (int i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxVal = i;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_3_8d669a90_440d_4a83_a3bb_96c55d024d8e(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                return entry.getKey();
            }
        }
        return -1;
    }

    
    public static int search_Problem_15_fe7c3daa_1130_4549_8c1a_d21aaaa3a96a(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int maxFreq = -1;
        for (int num : lst) {
            if (num > max) {
                max = num;
                maxFreq = 1;
            } else if (num == max) {
                maxFreq++;
            }
        }
        return maxFreq >= max ? max : -1;
    }

    
    public static int search_Problem_1_040d945a_b0fc_40b8_8f9a_acdf6a3d6eab(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream()
                .filter(e -> e.getValue() > e.getKey())
                .max(Comparator.comparing(Map.Entry::getKey))
                .map(Map.Entry::getKey)
                .orElse(-1);
    }

    
    public static int search_Problem_2_95fe7d72_5b98_4a2d_8a79_885f491b2be5(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_1_0913d2a4_01fb_46ed_bfa7_7077df08f99f(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (int num : lst) {
            map.put(num, map.getOrDefault(num, 0L) + 1);
        }
        for (int num : lst) {
            if (map.get(num) >= num) {
                return num;
            }
        }
        return -1;
    }

    
    public static int search_Problem_22_f663888b_49c0_4cc0_bada_097ac0b02fb0(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        for(int i : lst){
            if(i > max && Collections.frequency(lst, i) >= i)
                max = i;
        }
        return max;
    }

    
    public static int search_Problem_15_834b47d3_fa4d_4824_9c64_ca8a3c0e50c3(ArrayList<Integer> lst) {
        ArrayList<Integer> copy = new ArrayList<>();
        int maxIndex = -1;
        for (int num : lst) {
            if (!copy.contains(num)) {
                copy.add(num);
                if (copy.size() > maxIndex) {
                    maxIndex = copy.size() - 1;
                }
            }
        }
        for (int num : copy) {
            if (num > 0) {
                int freq = lst.stream().filter(n -> n == num).count();
                if (freq >= num) {
                    return num;
                }
            }
        }
        return -1;
    }

    
    public static int search_Problem_15_d2e6f719_6f55_464c_b732_a58fc97485fb(ArrayList<Integer> lst) {
        int maxVal = -1;
        int freq = -1;
        if (lst.isEmpty()) return -1;
        int val = lst.get(0);
        for (int i : lst) {
            freq += 1;
            if (val != i && freq >= i) {
                freq = -1;
                val = i;
            }
        }
        maxVal = val > 0 ? val : -1;
        return maxVal;
    }

    
    public static int search_Problem_22_7d663b95_95d0_4178_8f3a_961cf16ed7b1(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_12_66c61072_b573_4077_9089_0cc66944a073(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxKey = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (maxKey > 0) {
            return maxKey;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_1_53c45ca3_c863_463d_882c_f69b5b765f37(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_6488e94e_d1ec_433f_8e5f_1c1bd263a6d9(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_5f8c35d2_a488_4d86_b91d_656286247ad3(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_53c45ca3_c863_463d_882c_f69b5b765f37(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_a7a0eb0b_2222_45e3_8620_ec1bf72ea500(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_17_273d6f8b_ef30_472e_be97_4cf62ab81a2a(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_13_8e5acdb4_b131_4aae_b425_2c25a06bd96d(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                if (val > maxVal) {
                    maxVal = val;
                    maxFreq = lst.get(lst.indexOf(val));
                }
            }
        }
        return maxFreq > maxVal ? maxVal : -1;
    }

    
    public static int search_Problem_23_92270013_e717_4770_ab31_6466abbc39d2(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_7_9e0198d7_112c_4157_83be_870f9b2ad740(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                if (maxFreq < val) maxFreq = val;
                if (maxVal < val) maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_15_c07ae43f_db2a_4414_80e2_c20bb9b64368(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int maxFreq = 0;
        for (int num : lst) {
            int freq = Collections.frequency(lst, num);
            if (freq > maxFreq) {
                max = num;
                maxFreq = freq;
            }
        }
        return max;
    }

    
    public static int search_Problem_11_a9c16827_b0c9_4b1d_8976_0bb6d7538a69(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_16_294f3c90_5963_4c18_acec_935d8606fe6d(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_24_878dbdd9_26ab_4d52_9fb8_9097d5bcf531(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        for (Integer i : lst) {
            if (i > 0 && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_6_48143c47_db39_41f1_b13d_ebd7c58126e0(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer num : lst) {
            if (map.containsKey(num)) {
                map.put(num, map.get(num) + 1);
            } else {
                map.put(num, 1);
            }
        }
        Integer max = Collections.max(map.keySet());
        if (map.get(max) >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_20_ba93473d_544a_4d69_87af_69d1a9f7f9cb(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_18_cc763eb2_78e7_4703_9ca6_ed9402c80bac(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int max_count = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max_count) {
                max_count = entry.getValue();
                max = entry.getKey();
            }
        }
        return max;
    }

    
    public static int search_Problem_11_c29a7117_7350_4774_9b46_8e0e6717ff86(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq++;
            if(freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_16_90b74082_9d35_439b_bea7_f47ee345dded(ArrayList<Integer> lst) {
        Map<Integer, Integer> map = new TreeMap<>();
        for (Integer i : lst) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        Integer max = Collections.max(map.keySet());
        Integer result = map.get(max);
        return result != null ? result : -1;
    }

    
    public static int search_Problem_8_f5009f9f_8ec1_41f2_89eb_d2baebc6b0ec(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i = max; i > 0; i--) {
            int count = 0;
            for (int j : lst) {
                if (j == i) {
                    count++;
                }
            }
            if (count >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_6_3c5a4f0f_56ba_4768_a767_d0843e06cf06(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) == max) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_12_8d5ccef5_0a87_4e3d_b458_c901f3828dd1(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_20_3d7c9371_4714_48c9_8316_65b752e41fe9(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for(int i : lst) {
            freq++;
            if(freq > max) {
                max = freq;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_2a81176e_fb0c_4e42_8ee9_ac6aec8e46bd(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_11_94c5cfcf_ba1a_41ca_a2e7_b25e7d69d5d4(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxCount) {
                max = entry.getKey();
                maxCount = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_18_57f18433_187e_4649_991e_f4a5a0ff1a10(ArrayList<Integer> lst) {
        // BEGIN
            Map<Integer, Integer> dictionary = new HashMap<Integer, Integer>();
            for (int el : lst) {
                if (dictionary.containsKey(el)) {
                    dictionary.put(el, dictionary.get(el) + 1);
                } else {
                    dictionary.put(el, 1);
                }
            }
            int max = -1;
            for (int key : dictionary.keySet()) {
                if (key >= dictionary.get(key) && key > max) {
                    max = key;
                }
            }
            return max;
        // END
    }

    
    public static int search_Problem_7_bea02bc5_45e1_487c_be6d_7ec8512ed43f(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l,  1);
            }
        }
        int max = -1;
        int maxKey = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        return maxKey;
    }

    
    public static int search_Problem_4_a9c16827_b0c9_4b1d_8976_0bb6d7538a69(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_22_dddd1869_c12a_4d3f_8dc9_4fc84742ce5d(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        Integer max = freq.entrySet().stream().max((a, b) -> a.getValue().compareTo(b.getValue())).get().getKey();
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_22_5540641d_49d2_421e_a2d7_3c729b4f62e6(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        } else {
            return maxKey;
        }
    }

    
    public static int search_Problem_1_47147db5_b999_4d56_8161_698a49d5f0e2(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_4_d58852e8_cdfa_4ba5_99cc_f35a90c3caad(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int max_count = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max_count) {
                max = entry.getKey();
                max_count = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_15_7b048d01_8f4f_42e3_9610_a45be340d098(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_1_3e145535_1c77_4f29_8812_4e8b48462b91(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_7cc6fea7_f06a_4a19_98d4_0c33335b5c2d(ArrayList<Integer> lst) {

        int max = 0;
        for (Integer i : lst) {
            if (i > max) {
                max = i;
            }
        }
        if (max == 0) {
            return -1;
        }
        int count = 0;
        for (Integer i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_5_ca64b54c_e8e4_4bfa_8152_740680a95deb(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_13_39a9c84d_f8bb_4ac4_8cd0_e08eb9d59f04(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().filter(e -> e.getValue() > e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_17_0b5db196_6720_4235_a894_5c759be5db04(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        if (max == 0) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_23_c98aa025_cbe3_4a8e_85ea_dae95b2133e3(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_20_b8ca31af_ba3d_4b16_8f55_6bb0950c9370(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxCount) {
                max = l;
                maxCount = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_3_4b30273f_57d0_40ea_850d_e823a1a9f302(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_15_c650ad03_0902_45c9_b9ed_21712b038040(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                return max;
            }
        }
        return -1;
    }

    
    public static int search_Problem_23_beafc98f_ba4c_45a9_82ba_82dfe325ad6c(ArrayList<Integer> lst) {
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? -1 : max;
    }

    
    public static int search_Problem_20_fae87fdf_e03d_43b2_bc85_48a054a4ea1f(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq == i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq > i && maxVal == i) {
                maxFreq = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_12_764f89cc_cd3f_4a0e_96f9_a54f039968a4(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_3_2eabff35_6818_4914_991f_1cc19c72cdd2(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1L);
            }
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == -1) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_15_a7e4be8e_87a3_427a_91b0_d5c547a82c36(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_11_4859b23b_9104_4da6_8ba9_99338acf5c2f(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        int res = -1;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > max) {
                max = lst.get(i);
                maxFreq = 1;
            } else if (lst.get(i) == max) {
                maxFreq++;
            }
            if (maxFreq > res) {
                res = maxFreq;
            }
        }
        return res == 0 ? -1 : max;
    }

    
    public static int search_Problem_23_17ae3662_124b_41f9_a35b_8da829c38f55(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i = lst.size(); i > 0; i--) {
            if (map.containsKey(i) && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_6_96ebf8ed_5f02_47e4_863f_1718dbfc739d(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_24_a30e2ddc_8ca9_4bb3_aafc_37fb6c1416c9(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l,  1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > entry.getKey()) {
                return entry.getKey();
            }
        }
        return -1;
    }

    
    public static int search_Problem_2_41e230b5_604b_466d_9588_bd307b47ae71(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            } else if (val == maxVal) {
                maxFreq++;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_8_fbc34421_7d3d_4e44_9860_7977bfc9368b(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_13ec23a7_dd48_46e5_8d0f_1ff525981f7f(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int maxCount = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxCount) {
                maxCount = entry.getValue();
                max = entry.getKey();
            }
        }
        if (maxCount < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_16_2752fbb0_4e01_4dfd_8201_2909f9da3e11(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_e8593fb8_72d3_402c_8c08_63c872061934(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_7_e8a7e3d5_8885_4064_b024_5a8e628cbf9a(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_dbfe8fe3_bac5_4c59_9bf2_1867501e2092(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_23_a60653f7_4bb2_4af0_934a_005813528595(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_8_88912f6e_0791_44e6_a710_88218b3f3050(ArrayList<Integer> lst) {
        // Your code here
        return -1;
    }

    
    public static int search_Problem_23_2504374f_70da_4de9_91c9_b5fe595c524a(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (int l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int max_count = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max_count) {
                max = entry.getKey();
                max_count = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_16_bbe47d47_26f0_4719_8639_03179a454ac6(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i = lst.size(); i > 0; i--) {
            if (map.containsKey(i) && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_22_5a42e005_9770_4c26_a831_409bacb4429c(ArrayList<Integer> lst) {

        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_2_63c7680d_63d9_4547_a71d_d1febfcfacf8(ArrayList<Integer> lst) {
        // Your code here
        return -1;
    }

    
    public static int search_Problem_9_f73f219a_8448_4b6b_ac23_254b6ce3b0f2(ArrayList<Integer> lst) {

        int max = 0;
        for (Integer i : lst) {
            if (i > max) {
                max = i;
            }
        }
        if (max == 0) {
            return -1;
        }
        int count = 0;
        for (Integer i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= 2) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_14_7636a358_de74_4432_a902_c97f3d3a5596(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int res = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                res = l;
            }
        }
        return res;
    }

    
    public static int search_Problem_19_695e06d8_357a_4ae7_8a5a_1efb7ea02767(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        Integer max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_90b548e2_b90c_4097_8e3f_2852929b4bf5(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        int res = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                res = l;
            }
        }
        return res;
    }

    
    public static int search_Problem_2_2f34c11d_7b90_4415_aab8_b0719ee95756(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_d7dcf3f3_85ac_4b71_9157_a3c4aa2b8b00(ArrayList<Integer> lst) {
        List<Integer> sortedLst = lst.stream().sorted().collect(Collectors.toList());
        for (int l : sortedLst) {
            int freq = Collections.frequency(lst, l);
            if (freq >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_19_a6f82188_4b0c_4a53_9d8d_b645f1eafb4b(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxCount = 0;
        for(int val : lst) {
            int count = Collections.frequency(lst, val);
            if(count > maxCount) {
                maxCount = count;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_18_4de34714_b2e9_454c_b0a5_511556d4ecf3(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i) {
                maxFreq = i;
                maxVal = i;
            } else if (maxFreq == i) {
                maxVal = Math.max(maxVal, i);
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_9_0f866524_ff3f_427c_90cc_cba4208c378d(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_8_ad5a0fa8_01a2_49c8_bb2f_a4ab42a11cc4(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (freq.containsKey(i)) {
                freq.put(i, freq.get(i) + 1);
            } else {
                freq.put(i, 1);
            }
        }
        Integer max = freq.entrySet().stream().max(Map.Entry.comparingByValue()).get().getKey();
        if (freq.get(max) >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_4_77538800_0a07_466b_8f7d_55bf89e76488(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (int l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < max) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_12_8b44da3b_143c_4ac6_9557_817833127ac0(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_c9b94f5e_1c41_4254_9925_eeeaf62e67d2(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == -1) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_15_a2470877_044c_431a_ae99_ecbe88a2b23a(ArrayList<Integer> lst) {
        TreeMap<Integer,Integer> map = new TreeMap<>();
        for (Integer num : lst) {
            int count = map.get(num);
            map.put(num, count + 1);
        }
        Integer max = map.firstKey();
        for (Map.Entry<Integer,Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey() && entry.getValue() > max)
                max = entry.getKey();
        }
        return max == null ? -1 : max;
    }

    
    public static int search_Problem_23_675a3c30_bc8f_46b4_9912_b82eb2b01bae(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            map.put(i, map.getOrDefault(i, 0L) + 1);
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_aea215f5_0418_4ad0_a18f_1dffd1766d81(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_11_7ee1436f_98e0_4345_bdfe_066cfa125494(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_1_132f983a_6c2c_4a1f_a1bc_48685fd7ed8b(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer num : lst) {
            if (map.containsKey(num)) {
                map.put(num, map.get(num) + 1);
            } else {
                map.put(num, 1);
            }
        }
        for (Integer num : map.keySet()) {
            if (map.get(num) >= num) {
                return num;
            }
        }
        return -1;
    }

    
    public static int search_Problem_24_b7819f6c_3d35_4f9d_ad6b_f17ca577a127(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            if (freq.containsKey(l)) {
                freq.put(l, freq.get(l) + 1);
            } else {
                freq.put(l, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (Map.Entry<Integer, Integer> entry : freq.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_17_0689962a_1a77_4b98_bd8e_3354bbafc106(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                max_freq = 1;
            } else if (l == max) {
                max_freq++;
            }
        }
        if (max_freq == 0) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_0_c0210ab5_c7f7_48e3_99a7_654ab2b6f933(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_1361118a_c032_4e42_a50d_810a440eccc7(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i) {
                maxFreq = i;
                maxVal = i;
            } else if (maxFreq == i) {
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_5_c865a948_8909_46e9_8310_d5d8f06486a3(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_10_c1ebcb4a_90a0_43a3_8827_9ce05d0b977a(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        for (int i = lst.size(); i > 0; i--) {
            if (map.getOrDefault(i, 0) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_5_392bbd95_1e25_4d49_a296_dca3ccc152a9(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_2_f4f3949a_931b_48cb_a00a_a8c35e54c114(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for(Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        
        int max = 0;
        int freq = 0;
        for(Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if(entry.getValue() > freq) {
                max = entry.getKey();
                freq = entry.getValue();
            }
        }
        
        return freq >= max ? max : -1;
    }

    
    public static int search_Problem_24_def8798f_0913_4535_9142_65226c86ba5c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_5_77c5e688_8d9f_4446_b71f_afad034036e8(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) == max) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_1_184d9555_b5dd_4c06_8fab_80a84f3de604(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > max_freq) {
                max = i;
                max_freq = freq;
            }
        }
        return max_freq >= max ? max : -1;
    }

    
    public static int search_Problem_7_487a9b77_bb2b_4906_8950_e76938681839(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_15_51a18a71_9c7c_4300_b9dc_130d32eaff76(ArrayList<Integer> lst) {

        // Write your code here.
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) == max) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_6_bf9223ca_6953_4fd4_8d53_d07cd14bd004(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq += i;
            if (freq > max) {
                max = freq;
            }
        }
        return max >= 0 ? max : -1;

    }

    
    public static int search_Problem_14_6a7b7f7d_bf12_46e2_8754_8fb7219f8216(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = lst.stream().filter(x -> x == val).count();
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_4_b19e6896_f369_47ef_ad10_7511d9a1c04a(ArrayList<Integer> lst) {

        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_dbe4d6d4_62d0_4301_b609_f2a61d315130(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_675a3c30_bc8f_46b4_9912_b82eb2b01bae(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            map.put(i, map.getOrDefault(i, 0L) + 1);
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_6fb711bd_597d_462c_9e6d_6115fdf55fc4(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int i : lst) {
            if(i == 0) continue;
            int freq = Collections.frequency(lst, i);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_12_e3c5540d_4395_440e_8d1d_c33aa55084ae(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_1b721256_60fd_4c00_a78d_fe202989f1c0(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_e7cbd5aa_b981_4241_81f3_023fa35a3fbf(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max && Collections.frequency(lst, i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_3a3b7224_ac4d_45b7_8a70_6c25aa1f236e(ArrayList<Integer> lst) {
        // Write your code here
        // To print results to the standard output you can use System.out.println()
        // Example: System.out.println("Hello world!");
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1L);
            }
        }
        int max = -1;
        for (int l : map.keySet()) {
            if (map.get(l) >= l && l > max) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_b9a7d3ef_2020_4195_b92f_e7b44b558144(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (i > max) {
                max = i;
                freq = freq - 1;
            }
        }
        return freq > 0 ? max : -1;

    }

    
    public static int search_Problem_20_e6d4c08b_be33_4561_ad8b_49b4b408ebb2(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        int max = lst.get(0);
        int maxFreq = 1;
        for (int i = 1; i < lst.size(); i++) {
            if (lst.get(i) > max) {
                max = lst.get(i);
                maxFreq = 1;
            } else if (lst.get(i) == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_7_c9f1bfb7_fd9b_4c43_adee_2f50604edb3c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                if (maxFreq < val) maxFreq = val;
                if (maxVal < val) maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_14_edbc8149_405c_4540_8114_81429cb34261(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_22_8567573e_f173_4377_9a1a_64ba32f854ef(ArrayList<Integer> lst) {

        int max = -1;
        for (int i = 0; i < lst.size(); i++) {
            int count = 0;
            for (int j = 0; j < lst.size(); j++) {
                if (lst.get(j) == i) {
                    count++;
                }
            }
            if (count > i && count > max) {
                max = count;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_b22b8e31_3f57_4873_be23_315951e8679a(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == -1) {
            return -1;
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) == max) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_3_28084cab_464b_408e_b679_c23d56f0a015(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_5d9995f5_d56e_44bb_b5bd_15cc057242b3(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_9_52f7c056_7c82_48b0_b85a_620b4a06e1e7(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_cc763eb2_78e7_4703_9ca6_ed9402c80bac(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int max_count = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max_count) {
                max_count = entry.getValue();
                max = entry.getKey();
            }
        }
        return max;
    }

    
    public static int search_Problem_23_1c1e1e99_1ce3_43c4_9874_77ad7dcd845b(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                return entry.getKey();
            }
        }
        return -1;
    }

    
    public static int search_Problem_1_b8c50d22_2592_4be7_8c73_74bce7841355(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_21_ac06e188_38f0_4e02_bdc3_e19d6ea53cb0(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_12_55c6327a_1461_49fd_a5f2_55a72f09859d(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i = 0; i < lst.size(); i++) {
            Integer key = lst.get(i);
            if (map.containsKey(key)) {
                map.put(key, map.get(key) + 1);
            } else {
                map.put(key, 1);
            }
        }
        Integer max = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            Integer key = entry.getKey();
            Integer value = entry.getValue();
            if (value > max) {
                max = value;
            }
        }
        if (max == -1) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_17_cea3ebbe_ecff_4a34_a233_e441d8a50330(ArrayList<Integer> lst) {

        // Write your code here
        return lst.stream().max(Comparator.comparing(x -> x, Comparator.reverseOrder())).orElse(-1);
    }

    
    public static int search_Problem_23_d7aadf7e_d5a2_412c_89e3_bca43e04b30c(ArrayList<Integer> lst) {
        Integer max = new Integer(0);
        Integer maxFreq = new Integer(0);
        for (Integer i : lst) {
            if (i > max) {
                max = i;
            }
            if (i.equals(max)) {
                maxFreq++;
            }
        }
        if (maxFreq >= max.intValue()) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_18_fe95951f_1754_4bd1_8ce2_5b1f696310e5(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (int i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxKey = i;
            }
        }
        return maxKey;
    }

    
    public static int search_Problem_21_8e5acdb4_b131_4aae_b425_2c25a06bd96d(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                if (val > maxVal) {
                    maxVal = val;
                    maxFreq = lst.get(lst.indexOf(val));
                }
            }
        }
        return maxFreq > maxVal ? maxVal : -1;
    }

    
    public static int search_Problem_5_67b6b72c_b9ae_4569_b45e_303baa0345af(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_c26b07ed_446b_4e0f_86fb_dc8b85017572(ArrayList<Integer> lst) {

        int max = 0;
        int max_count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                max_count = 1;
            } else if (i == max) {
                max_count++;
            }
        }
        for (int i : lst) {
            if (i > max && i >= max_count) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_7_5d9995f5_d56e_44bb_b5bd_15cc057242b3(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_36b4d001_5b52_4083_b0ed_0210ca2abb2b(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i = max; i > 0; i--) {
            int count = 0;
            for (int j : lst) {
                if (j == i) {
                    count++;
                }
            }
            if (count >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_18_ccae73c1_f65b_4b68_87fe_917e032a2589(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_17_a580bb2b_de95_48d9_875c_a0615ef1bbe1(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max && Collections.frequency(lst, i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_2785d7f6_7671_4320_888d_ca98d7cdc09a(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : lst) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_7_35b71884_52a9_45c1_b8aa_38b151fbfe80(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_13ec23a7_dd48_46e5_8d0f_1ff525981f7f(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int maxCount = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxCount) {
                maxCount = entry.getValue();
                max = entry.getKey();
            }
        }
        if (maxCount < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_7_53e25d72_6df1_408a_87f9_6da0fd58b7f6(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_b55f0202_e7b2_449f_b990_46a90a94e562(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq < max) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_1_0b8ccd56_1c29_4f85_9c0f_9206c0e83a61(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int max_count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                max_count = 1;
            } else if (i == max) {
                max_count++;
            }
        }
        if (max_count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_7_0765c1df_dfed_4bf5_a362_ae043f84ba89(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        int currFreq = -1;
        for(int val : lst) {
            currFreq = Collections.frequency(lst, val);
            if(currFreq > maxFreq) {
                maxFreq = currFreq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_7_1a3be9ba_44a0_4a67_8fab_1c4ba2360e24(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l,  1);
            }
        }
        Integer max = Collections.max(map.keySet());
        if (map.get(max) >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_15_9e47b236_3907_4993_94f8_33e8a1a1b8a4(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_9_6b3d4312_dd5e_4239_a5d6_c352dad46557(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        int max = 0;
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_7f72f684_8d04_4768_909c_3e6d6b1c0c54(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i = lst.size(); i > 0; i--) {
            if (map.containsKey(i) && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_1_519e02d9_6e86_433f_893d_5849bee37c03(ArrayList<Integer> lst) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1L);
            }
        }
        for (Integer l : lst) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_14_d1b5376b_7823_44e6_8545_3fae5869aef0(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxCount = 1;
            } else if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_14_0b3f9131_7548_4898_b0d8_40b106853377(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        Integer max = -1;
        Integer maxFreq = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxFreq) {
                max = l;
                maxFreq = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_5_73361bd0_0385_456d_bfc6_c35cd881f987(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq += i;
            if (freq > max) {
                max = freq;
            }
        }
        return max > 0 ? max : -1;
    }

    
    public static int search_Problem_4_6a3602a7_4941_45c1_9a98_5470b62d8b77(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq++;
            if(freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_20_f1a3ffbb_3efd_406b_8e9e_575b480d42b7(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_11_4772b99a_231a_43c3_a23f_843a92705dd1(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
            if (lst.stream().filter(x -> x == i).count() > maxFreq) {
                maxFreq = lst.stream().filter(x -> x == i).count();
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_4_a4106e4c_1ff9_4565_9df9_49d9dd86c455(ArrayList<Integer> lst) {
        int freq = 0;
        ArrayList<Integer> newArr = new ArrayList<>();
        for (Integer i : lst) {
            if (i > 0) freq++;
            newArr.add(i);
        }
        if (freq == 0)
            return -1;
        else
            return newArr.get(newArr.size() - 1);
    }

    
    public static int search_Problem_5_cc30f95d_1381_4df1_b156_f6f71aaefb57(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_16_cea3ebbe_ecff_4a34_a233_e441d8a50330(ArrayList<Integer> lst) {

        // Write your code here
        return lst.stream().max(Comparator.comparing(x -> x, Comparator.reverseOrder())).orElse(-1);
    }

    
    public static int search_Problem_23_9c3d4dde_dace_4863_bd5c_41466eefaead(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_8_4b0c895b_b846_4a21_86d2_b7aed4d550ac(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            }
        }
        return maxFreq > maxVal ? maxFreq : -1;

    }

    
    public static int search_Problem_17_bfa4ec1d_899d_4b2e_a5ec_9a5c43379f8c(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : freq.keySet()) {
            if (freq.get(l) > max) {
                max = freq.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_19_c08942a7_56d3_430a_bbcb_8a6ff3d9a909(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_6a7b7f7d_bf12_46e2_8754_8fb7219f8216(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = lst.stream().filter(x -> x == val).count();
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_14_878dbdd9_26ab_4d52_9fb8_9097d5bcf531(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        for (Integer i : lst) {
            if (i > 0 && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_14_54b16812_6b4e_4dcf_a9f5_bc0f6e027738(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_21_cc30f95d_1381_4df1_b156_f6f71aaefb57(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_21_b1d41f5c_1f82_4bbb_a4d0_633c3dc854f3(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_9803caa8_94ac_4167_bb51_5b1d30975530(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_711f4351_c248_412a_a2c3_aa186b45f8ad(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > max_freq) {
                max_freq = freq;
                max = i;
            }
        }
        if (max_freq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_20_a593c4c9_7213_4be3_87a3_cf071b849e81(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for (Integer i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) == max) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_0_590ade4f_ecdb_43b3_aa90_866fc02988f5(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxCount = 0;
            }
            if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_24_f536f9e2_62f3_4cf2_a5fc_56cb9b050672(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int max_count = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max_count) {
                max_count = map.get(l);
                max = l;
            }
        }
        if (max_count < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_12_1f431f5d_5563_4792_b201_0d6315f4e178(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        int max = lst.get(0);
        int count = 1;
        for (int i = 1; i < lst.size(); i++) {
            if (lst.get(i) == max) {
                count++;
            } else if (lst.get(i) > max) {
                max = lst.get(i);
                count = 1;
            }
        }
        if (count >= max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_6_14600785_4c49_4232_acd1_e1e418227e28(ArrayList<Integer> lst) {

        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : freq.keySet()) {
            if (freq.get(l) > max) {
                max = freq.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_20_fe08d895_fc1e_485c_80bd_def6dd00410f(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        int max = 0;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_68dae0e5_fd37_446e_a42c_ee625b2062c5(ArrayList<Integer> lst) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1L);
            }
        }
        int max = -1;
        for (Integer i : map.keySet()) {
            if (i <= map.get(i) && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_11_a56c1ec0_3f20_4a6b_9ee3_68441f11d6c0(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxCount = 1;
            } else if (i == max) {
                maxCount++;
            }
        }
        for (int i : lst) {
            if (i >= max && maxCount <= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_13_b768e1e9_f39e_4f14_8a71_2081ee4fcabb(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_78962c36_c153_4933_b972_2e7c55c674f2(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_5_319a0590_2afc_4659_84b6_0a96a38b8024(ArrayList<Integer> lst) {
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? -1 : max;
    }

    
    public static int search_Problem_4_578ac7f3_4bdc_4c11_b4c8_389e98359c30(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_8_7834a80d_3a64_4574_a908_cbac98de0244(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            int count = Collections.frequency(lst, i);
            if (count >= i && count > maxFreq) {
                maxFreq = count;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_2_6a7b7f7d_bf12_46e2_8754_8fb7219f8216(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = lst.stream().filter(x -> x == val).count();
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_19_b9cf0650_86b1_4a00_84ce_93cfd4a76ae8(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int res = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                res = l;
            }
        }
        if (max == 0) {
            return -1;
        }
        return res;
    }

    
    public static int search_Problem_2_9f7e62a9_82df_4bf8_b65b_5c816b26f6a5(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_11_55c22ca2_2cd7_4a25_b626_609ea36130bb(ArrayList<Integer> lst) {
        int max = 0;
        int curr = 0;
        for (int n : lst) {
            curr += n;
            if (curr > max)
                max = curr;
        }
        return max > 0 ? max : -1;
    }

    
    public static int search_Problem_10_273d6f8b_ef30_472e_be97_4cf62ab81a2a(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_16_b9663e76_b45a_47bb_939f_3791547e761e(ArrayList<Integer> lst) {

        // write your code in Java SE 8
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_18_a9ef5082_811e_487b_92b3_609f5cead847(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_5f067a56_9b40_4252_8690_d1af6c5964ce(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxCount) {
                max = entry.getKey();
                maxCount = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_19_75172c87_1316_4a96_b313_e86bee55a46b(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxCount = 0;
        for (int i : lst) {
            if (maxCount < i) {
                maxCount = i;
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_18_319a0590_2afc_4659_84b6_0a96a38b8024(ArrayList<Integer> lst) {
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? -1 : max;
    }

    
    public static int search_Problem_13_12236577_0401_436d_b55e_69423b250446(ArrayList<Integer> lst) {

        // write your code here
        int max = 0;
        int count = 0;
        for(Integer l : lst){
            if(l > max){
                max = l;
                count = 1;
            }
            else if(l == max){
                count++;
            }
        }
        if(count >= max){
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_21_f7e3167e_8b63_4a62_a341_e86c7d346513(ArrayList<Integer> lst) {
        if (lst.isEmpty()) return -1;
        int max = 0;
        int count = 1;
        for (Integer v : lst) {
            count += 1;
            if (v > max) max = v;
        }
        if (count >= max) return -1;
        for (Integer v : lst) {
            if (v == max) break;
            if (v > max) max = v;
        }
        return max;
    }

    
    public static int search_Problem_21_92efcfa5_ce13_430f_9abc_57df15460ba9(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (Integer i : lst) {
            freq++;
            if (freq > i) {
                freq = i;
            }
            if (max < 0) {
                max = freq;
            } else if (freq > max) {
                max = freq;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_7fe02556_39eb_4dc9_963d_b2775886e7df(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_9803caa8_94ac_4167_bb51_5b1d30975530(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_a70d730f_4724_4508_9a0b_8c5e194e2fa0(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq++;
            if(freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_14_55f8d2c2_19ae_4d96_8259_83ae16d7468a(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_7_bbbd05ce_d331_482f_82bf_6beb878df429(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int ans = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_23_36c780b1_f15c_4cbd_9600_95a55bd48700(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq++;
            if(freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_5_eac62b13_ceb0_44be_b219_0f916914bb9c(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_2_6ea44e65_c02c_44c2_a843_3905ab5cb9c5(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_2_43e6b27e_ac4f_43ac_9bd3_1bc3072ea43a(ArrayList<Integer> lst) {
        int max = -1;
        int freq = 0;
        for (int i : lst) {
            if (freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_9ab888f3_d807_4efc_a185_ba39091716b6(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_5_db03fc5f_cfd1_448d_91aa_d15a80adf926(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        int currFreq = -1;
        for (int val : lst) {
            currFreq = Collections.frequency(lst, val);
            if (currFreq > maxFreq) {
                maxFreq = currFreq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_10_f2c4ffd4_2df7_4d6e_83e6_8666b8862220(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().max(Comparator.comparing(Map.Entry::getValue)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_5_2ed0fa47_7c0a_4e2d_a206_eb63c3c8ec2a(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            if (freq == 0 || freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_21_f058ba41_e5a0_4800_9b6e_ef0c19812839(ArrayList<Integer> lst) {
        return lst.stream().filter(i -> Collections.frequency(lst, i) >= i).max(Comparator.naturalOrder()).orElse(-1);
    }

    
    public static int search_Problem_18_ac3743e7_7b1e_4cd8_8ee7_c64471278284(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_5_5f85706c_d5e2_45f8_a076_be1f06d10a8f(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxCount = 0;
        for (int val : lst) {
            if (val == 0)
                continue;
            if (maxVal == -1 || val > maxVal) {
                maxVal = val;
                maxCount = 0;
            } else {
                ++maxCount;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_8_578ac7f3_4bdc_4c11_b4c8_389e98359c30(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_14_ff79d7a1_77fb_4df5_aa41_6b440c3af591(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_1_bf82e2fd_c86b_434f_b026_02eecc0cafac(ArrayList<Integer> lst) {
        if (lst.isEmpty()) return -1L;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < lst.size(); i++) {
            int val = lst.get(i);
            if (map.containsKey(val)) {
                map.put(val, map.get(val) + 1);
            } else {
                map.put(val, 1L);
            }
        }
        for (Map.Entry<Integer, Integer> e : map.entrySet()) {
            if (e.getValue() >= e.getKey() && e.getKey() > 0) {
                return e.getKey();
            }
        }
        return -1L;
    }

    
    public static int search_Problem_20_d74d9d4c_bc0f_41f9_9439_b2fc86955ad1(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_73361bd0_0385_456d_bfc6_c35cd881f987(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq += i;
            if (freq > max) {
                max = freq;
            }
        }
        return max > 0 ? max : -1;
    }

    
    public static int search_Problem_14_0cf73034_0194_4606_967f_b4c030af213f(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_bda330ec_6b9c_46de_83a9_3eb0b47139f1(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i : lst) {
            if(map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = -1;
        for(int i : map.keySet()) {
            if(map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_d6938612_66dd_4462_b29d_9457acaa99b6(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_9_bca22f92_9217_4891_8acd_25733f5dc8df(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_24_56b6dc6f_9d66_407a_a641_4524402d355e(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_8_b11c6e4e_8771_4985_bdbb_f3c4ad8cd620(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                return max;
            }
        }
        return -1;
    }

    
    public static int search_Problem_2_41ac9a7b_218b_405a_8e4e_6fb392644202(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i >= max) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_11_867df0da_7ac7_4bea_b0d0_6e9aeebb5728(ArrayList<Integer> lst) {

        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                max = entry.getKey();
            }
        }
        return max;
    }

    
    public static int search_Problem_12_715119f4_fedc_452e_ae06_7484ede18335(ArrayList<Integer> lst) {
        int retVal = -1;
        for (int l : lst) {
            int f = Collections.frequency(lst, l);
            if (f > 0 && f >= retVal) {
                retVal = l;
            }
        }
        return retVal;
    }

    
    public static int search_Problem_6_4fd882ea_b6c5_4c08_9588_69d197f81ab3(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_6_18a42927_5fd3_4422_91a0_e0e64a3fd5e6(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i : lst) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_1_06d89672_7249_4af3_92bd_f3245dcc8e05(ArrayList<Integer> lst) {
        int maxVal = Integer.MIN_VALUE, maxCount = Integer.MIN_VALUE;
        for (Integer l : lst) {
            if (maxCount < l) {
                maxCount = l;
                maxVal = l;
            }
        }
        return maxVal > 0 ? maxVal : -1;
    }

    
    public static int search_Problem_23_97e87b77_709b_41b7_9f57_b5a0cd936b0f(ArrayList<Integer> lst) {

        if (lst.size() == 0) {
            return -1;
        }
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (int i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxKey = i;
            }
        }
        if (max == 1) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_22_8b44da3b_143c_4ac6_9557_817833127ac0(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_dc7acd40_8182_4bc2_9ca8_d6779a0ee2bf(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_9_968352cd_1cab_4638_888d_e6c95e77b1df(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_2_a70d730f_4724_4508_9a0b_8c5e194e2fa0(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq++;
            if(freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_21_f52f6a24_24bf_433a_bfa6_aa3349bf8867(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_95176853_9229_41a5_9a3a_83d817b589af(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        return map.entrySet().stream().filter(e -> e.getValue() > e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_9_1d604aa0_198b_424d_97cf_314dbaf8e7d5(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_5c36d46f_4b03_412f_a09f_ebb1b9ee8a35(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_8_44810787_33a6_40bf_b0c6_d09d764c9d51(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        for (int l : map.keySet()) {
            if (map.get(l) >= l && l > max) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_7aa0a066_cba4_4099_880c_997219e72721(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_2_05c71f8b_76ab_4242_b491_9b95ac8175d6(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_50ab1adb_6c22_471c_919a_db9f06ab6c99(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_bb0f85b6_5907_49ac_815f_9572649f0409(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_4_c7435003_479d_4d32_b2fb_1b9aea58b610(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_1a5ff06d_da65_41b2_974c_b8d626938848(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_23_e1aa36e8_b670_467d_8ba1_abbfab213111(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxCount) {
                max = entry.getKey();
                maxCount = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_3_1580c256_91e3_4db3_9700_a6534b03618b(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            if (i > 0 && freq >= i) {
                max = i;
                freq = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_de6bc373_03d5_4f3e_adac_cbe1cb281e49(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_2_a56c1ec0_3f20_4a6b_9ee3_68441f11d6c0(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxCount = 1;
            } else if (i == max) {
                maxCount++;
            }
        }
        for (int i : lst) {
            if (i >= max && maxCount <= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_18_3d7c9371_4714_48c9_8316_65b752e41fe9(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for(int i : lst) {
            freq++;
            if(freq > max) {
                max = freq;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_b4537487_bef7_4f20_b38d_ac2b84627c68(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_69c99530_4186_494c_bf36_cf6353e82cd7(ArrayList<Integer> lst) {

        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
            }
        }
        if (max == -1) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_22_d90b80dd_3038_4de9_91fe_dea48097fb58(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_a50b6e25_daca_408c_8f17_6aded972325e(ArrayList<Integer> lst) {
        int maxCount = 0;
        for (int num : lst) {
            if (num == 0 || num < 0) {
                return -1;
            }
            int count = lst.stream().filter(i -> i==num).count();
            if (count >= maxCount) {
                return maxCount;
            }
            maxCount = count;
        }
        return -1;
    }

    
    public static int search_Problem_12_ae104091_9cb6_42d6_955b_af81059a964c(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_8daa32b0_a742_41c7_8e7e_00da5e9460a3(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_e4a76ebd_591a_4426_a989_8be0b61b4a19(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_24_4b5de19e_b19c_401e_8b4a_529de437bb34(ArrayList<Integer> lst) {
        // Complete the function here
        int res = -1;
        for (int num : lst) {
            if (num >= 0) {
                int count = lst.stream().filter(a -> a == num).count();
                if (count > res) {
                    res = num;
                }
            }
        }
        return res;
    }

    
    public static int search_Problem_18_53c45ca3_c863_463d_882c_f69b5b765f37(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_668b2bd4_a177_4a64_90eb_e20ec9ba2b3b(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_13_36a76ad6_fd99_4034_a81f_dfd88e879ac5(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            if (freq == i) {
                freq++;
            } else {
                freq = 1;
            }
            if (max < freq) {
                max = freq;
            }
        }
        return max;

    }

    
    public static int search_Problem_20_386f04c3_a999_423e_b2a3_427a4a957aef(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_6f60d3cf_0320_4744_9bc1_9b32d36631a8(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_17_d38b7080_4cc9_4903_a07c_02ff4b364c5e(ArrayList<Integer> lst) {

        int max = -1;
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_c26b07ed_446b_4e0f_86fb_dc8b85017572(ArrayList<Integer> lst) {

        int max = 0;
        int max_count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                max_count = 1;
            } else if (i == max) {
                max_count++;
            }
        }
        for (int i : lst) {
            if (i > max && i >= max_count) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_13_3c7429de_ef0b_4943_9311_e2ba85e27244(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1) {
                freq = i;
                max = i;
            } else if (freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_22_0b430c68_e358_4349_96ce_58d60529d961(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_17_32cf49dd_c306_489c_a08c_237166bf8e0d(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_145115a4_5be9_4bbe_8110_a2bda29de3fe(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_3_49cdd6c7_ff4c_464c_8a8f_44178e377064(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_23_1a6e864e_b77d_4df5_8239_9e555a36b998(ArrayList<Integer> lst) {

        // Your code here
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i > max) {
                int count = 0;
                for (int j : lst) {
                    if (j == i) {
                        count++;
                    }
                }
                if (count >= i) {
                    return i;
                }
            }
        }
        return -1;
    }

    
    public static int search_Problem_14_1af2357a_e122_4336_a52b_0805cbf14114(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_5f067a56_9b40_4252_8690_d1af6c5964ce(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxCount) {
                max = entry.getKey();
                maxCount = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_17_629abe9b_b619_47ed_afb3_447c2cb1e3ea(ArrayList<Integer> lst) {

        int max = 0;
        int max_count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                max_count++;
            }
        }
        if (max_count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_15_32cf49dd_c306_489c_a08c_237166bf8e0d(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_dd54eb56_bc22_4c0b_b012_1ab055bd0648(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().filter(e -> e.getKey() > 0 && e.getValue() >= e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_24_4903da4d_797a_4cd9_814c_c2f9c7e23827(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (i > max) {
                max = i;
                freq = freq - 1;
            }
        }
        if (freq >= 0) {
            return max;
        }
        return -1;

    }

    
    public static int search_Problem_24_17ae3662_124b_41f9_a35b_8da829c38f55(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i = lst.size(); i > 0; i--) {
            if (map.containsKey(i) && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_13_08e3f4cd_c5f0_483f_9398_21bb85fe6042(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                maxFreq = val;
            } else if (val == maxVal && val >= maxFreq) {
                maxFreq = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_7_707b2625_500e_4722_86c2_23df7a9249e1(ArrayList<Integer> lst) {

        // your code here
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : lst) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_13_0765c1df_dfed_4bf5_a362_ae043f84ba89(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        int currFreq = -1;
        for(int val : lst) {
            currFreq = Collections.frequency(lst, val);
            if(currFreq > maxFreq) {
                maxFreq = currFreq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_13_16381637_254d_4bb2_b2a9_d5276be51122(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (maxFreq < val && val > 0) {
                maxFreq = val;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_5_5d509a83_b434_4710_808a_22a9e5cc1930(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_8_9fb9aab3_f34e_4906_915a_3f249d78de9d(ArrayList<Integer> lst) {
        int max_freq = -1;
        int max_num = 0;
        for (int num : lst) {
            int freq = Collections.frequency(lst, num);
            if (freq >= max_freq && freq >= num) {
                max_freq = freq;
                max_num = num;
            }
        }
        if (max_freq < -1) {
            return -1;
        }
        return max_num;
    }

    
    public static int search_Problem_6_6f9e03f8_583a_4cba_b8ee_ba4fa142e075(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = -1;
        int maxFreq = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxFreq) {
                max = entry.getKey();
                maxFreq = entry.getValue();
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_9_8f8c6c16_4160_4918_9a98_39990f17f21a(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_43a6cd90_22f2_4532_b09d_0525caf2078b(ArrayList<Integer> lst) {

        int max = 0;
        for (Integer i : lst) {
            if (i > max) {
                max = i;
            }
        }
        if (max == 0) {
            return -1;
        }
        int count = 0;
        for (Integer i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_7_3caad047_965b_4e7d_bca4_dffbb6eb95cd(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_21_8a9f54f8_42c0_41a7_ae4b_9734bd53d82c(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_19_ce679c69_20bb_4241_9fa1_c26aad235689(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_14_d0b72e0e_b8cc_469a_bd7d_e3828549eee5(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_bf4c9e57_c2aa_45b1_8c6a_a06b6a432f92(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                max = entry.getKey();
            }
        }
        return max;
    }

    
    public static int search_Problem_24_334762fa_6ee3_46fa_ab9f_4a0ae8e4805e(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_24_6e31d389_16dc_4ce6_8ca2_98ac556db54c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_13_33a538c0_8cc6_47db_b492_2e541664a911(ArrayList<Integer> lst) {

        int max = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_0_ac06e188_38f0_4e02_bdc3_e19d6ea53cb0(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_8_b8b85adb_923a_49af_a4c1_863fc4dfd198(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_11_750ad179_bfe8_4741_b68a_8e2237b91c5d(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxCount = 0;
        for (int val : lst) {
            if (val > 0) {
                int count = Collections.frequency(lst, val);
                if (count > maxCount) {
                    maxCount = count;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_6_4bfc7632_cf07_47a2_a833_34ea7fcdc216(ArrayList<Integer> lst) {

        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                max = entry.getKey();
            }
        }
        return max;
    }

    
    public static int search_Problem_24_9f7e62a9_82df_4bf8_b65b_5c816b26f6a5(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_17_eedb0bf0_8312_4959_97f0_1f9d9b01ba99(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max && Collections.frequency(lst, i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_9_77538800_0a07_466b_8f7d_55bf89e76488(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (int l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < max) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_24_b4d18c45_b4ac_4bd4_a8d0_0ecc5ea17e8a(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq += i;
            if(freq > max) {
                max = freq;
            }
        }
        return max;

    }

    
    public static int search_Problem_17_1580c256_91e3_4db3_9700_a6534b03618b(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            if (i > 0 && freq >= i) {
                max = i;
                freq = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_fdbdbebd_bc4e_4bf4_9041_aa13dd322cca(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        for (int i : lst) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_4_ca605546_518d_4a85_8978_cad321c08928(ArrayList<Integer> lst) {
        int max = 0;
        int count = 0;
        for (int i : lst) {
            if (i >= 0) {
                count++;
                max = Math.max(max, i);
            }
        }
        if (count <= 0) {
            return -1;
        }
        Map<Integer, Integer> map = new TreeMap<>();
        for (int i : lst) {
            if (i >= 0) {
                map.put(i, map.getOrDefault(i, 0) + 1);
            }
        }
        if (map.containsKey(max)) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_1_f577e1b9_a3ac_4b9c_b602_b1c97ca515b0(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_0192f9f5_ffcc_4467_9317_99a81a0c3b69(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1) {
                freq = i;
                max = i;
            } else if (freq >= i) {
                freq = i;
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_24_c8d3c03e_03d7_4eed_84f1_213a49a6338f(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_651d625e_3138_47fb_8d7c_84cd129d98e2(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (lst.stream().filter(x -> x == i).count() >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_d7f0cbf9_43cc_4f65_ad34_4495ef5a3db2(ArrayList<Integer> lst) {

        // Write your code here
        if(lst.size() == 0) return -1;
        Map<Integer, Integer> map = new HashMap<>();
        for(Integer l : lst) {
            if(map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for(Integer l : map.keySet()) {
            if(map.get(l) >= l) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_c1d55cdd_8455_4da2_9ecc_31f775f9df3f(ArrayList<Integer> lst) {

        // Your code here
        int max = 0;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_8_b768e1e9_f39e_4f14_8a71_2081ee4fcabb(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_8_764f89cc_cd3f_4a0e_96f9_a54f039968a4(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_a480b873_3bf9_4c72_a871_1305d1b1bd90(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_8_fda6416f_ba62_46fa_9dce_b0a779f4ff86(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_10_09352cce_7fd8_40aa_a713_e15252c07b05(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_299d5e51_4166_4b36_a624_0648594a9de1(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_89fb8076_d99b_4ae5_81ec_509e08d9a777(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_19_d53d75db_97b7_4c00_919f_3370acbdd657(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_164c6e1a_91e2_4038_b15f_5c15235e981d(ArrayList<Integer> lst) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        for (int i : map.keySet()) {
            if (i > 0 && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_15_8d938d12_2bce_456a_bb29_3a7567ced22b(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_18_5688ca13_6ed6_41d8_b4d5_94e30601f4b1(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq == -1 || maxFreq < i) {
                maxFreq = i;
                max = i;
            } else if (maxFreq == i) {
                maxFreq++;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_222294e4_a374_4689_bd58_3e0772d942f4(ArrayList<Integer> lst) {
        Collections.sort(lst);
        for (int x : lst) {
            if (x > 0) return x;
        }
        return -1;
    }

    
    public static int search_Problem_24_c98aa025_cbe3_4a8e_85ea_dae95b2133e3(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_21_822dead6_a7e1_48aa_a064_7e170f9013dd(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i = 0; i < lst.size(); i++) {
            int freq = 0;
            for (int j = 0; j < lst.size(); j++) {
                if (lst.get(i) == lst.get(j)) {
                    freq++;
                }
            }
            if (freq > maxFreq) {
                max = lst.get(i);
                maxFreq = freq;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_e693b02b_4ea6_4fc4_bb6f_ca03ba1c1d29(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_14_c2921377_348a_4770_ac1a_875547fa11a0(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_0c1472b4_4123_4385_8e5c_95435dde6fde(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int max_count = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max_count) {
                max = l;
                max_count = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_16_273d6f8b_ef30_472e_be97_4cf62ab81a2a(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_11_519e02d9_6e86_433f_893d_5849bee37c03(ArrayList<Integer> lst) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1L);
            }
        }
        for (Integer l : lst) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_3_54b16812_6b4e_4dcf_a9f5_bc0f6e027738(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_5_36b4d001_5b52_4083_b0ed_0210ca2abb2b(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i = max; i > 0; i--) {
            int count = 0;
            for (int j : lst) {
                if (j == i) {
                    count++;
                }
            }
            if (count >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_14_49d784a1_5608_49ab_9709_84e735969e70(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_3d7c9371_4714_48c9_8316_65b752e41fe9(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for(int i : lst) {
            freq++;
            if(freq > max) {
                max = freq;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_294f3c90_5963_4c18_acec_935d8606fe6d(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_10_fcc7171a_598d_45f0_8152_bda91bb80678(ArrayList<Integer> lst) {

        int max = 0;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_2_11212299_e15b_4955_96a5_5646b9dd8a87(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_22_3fba11a1_0357_4142_8079_b51667a0dc84(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (lst.stream().filter(x -> x == i).count() > lst.stream().filter(x -> x == i).max(Comparator.comparing(Integer::valueOf)).get()) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_ae104091_9cb6_42d6_955b_af81059a964c(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_17_d8cccfd3_5302_4d97_ad7e_2ed482e6875c(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for(int i : lst) {
            freq = Collections.frequency(lst, i);
            if(freq >= 0) {
                if(freq > max) {
                    max = freq;
                }
            }
        }
        return max;

    }

    
    public static int search_Problem_1_96ebf8ed_5f02_47e4_863f_1718dbfc739d(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_17_e7e11b40_4fce_4700_893a_e9fd742e56f9(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_17_9f7e62a9_82df_4bf8_b65b_5c816b26f6a5(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_23_cac4025d_fb2c_48fc_a932_7be72feec2ad(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_11_4fd9682f_407d_437b_8706_7783032d5802(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        Integer max = map.entrySet().stream().max(Comparator.comparing(Map.Entry::getValue)).get().getKey();
        if (max > 0 && map.get(max) >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_4_6b07e4a2_4607_4734_9d2d_8ca8e151a7b4(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        int max_key = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                max_key = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        }
        return max_key;
    }

    
    public static int search_Problem_6_ab04337d_dbed_4239_85ca_813baa73e62f(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_2_81e33176_a77a_48db_988f_f28998296c9e(ArrayList<Integer> lst) {
        int max = 0; // The greatest value that appears in the array
        int maxFreq = Integer.MIN_VALUE; // The frequency of the max value
        for (Integer val: lst) {
            int freq = lst.indexOf(val); // Get the frequency of the value
            if (freq > maxFreq) {
                max = val;
                maxFreq = freq;
            } else if (freq == maxFreq) {
                max = Math.max(max, val);
            }
        }
        return max;
    }

    
    public static int search_Problem_15_3c2ba5d8_6a7b_44b2_a0f3_a751277ac805(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                if(val > maxVal) {
                    maxVal = val;
                    maxFreq = lst.get(lst.indexOf(val));
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_8_5f85706c_d5e2_45f8_a076_be1f06d10a8f(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxCount = 0;
        for (int val : lst) {
            if (val == 0)
                continue;
            if (maxVal == -1 || val > maxVal) {
                maxVal = val;
                maxCount = 0;
            } else {
                ++maxCount;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_12_d640f288_1b3e_4d66_a7b2_62d7422e430f(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        Integer max = freq.keySet().stream().max(Comparator.comparing(freq::get)).get();
        if (freq.get(max) >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_4_988aba6d_c89f_400b_8901_74ba69f39ca1(ArrayList<Integer> lst) {
        int max = -1;
        int count = 0;
        for (Integer i : lst) {
            count++;
            if (i > 0)
                if (count > max)
                    max = count;
            else
                count--;
        }
        return max;
    }

    
    public static int search_Problem_14_d3d05df5_34c3_4630_8a6e_822b20ece40b(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        int max = lst.get(0);
        int count = 1;
        for (int i = 1; i < lst.size(); i++) {
            if (lst.get(i) == max) {
                count++;
            } else if (lst.get(i) > max) {
                max = lst.get(i);
                count = 1;
            }
        }
        if (count >= max) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_15_f73f219a_8448_4b6b_ac23_254b6ce3b0f2(ArrayList<Integer> lst) {

        int max = 0;
        for (Integer i : lst) {
            if (i > max) {
                max = i;
            }
        }
        if (max == 0) {
            return -1;
        }
        int count = 0;
        for (Integer i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= 2) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_18_8a9288ca_4e7d_446b_b758_a16f5c84115a(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i : lst) {
            if(map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for(int i : map.keySet()) {
            if(map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_89187a83_3522_45dd_9dd1_032b0537147c(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_9_56e4132f_3c41_4286_bf8a_2fe3f4cddd95(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                max = Math.max(max, entry.getKey());
            }
        }
        return max;
    }

    
    public static int search_Problem_1_0ea1256f_ed59_467a_af86_d7e68405f48f(ArrayList<Integer> lst) {
        // >>> YOUR CODE HERE <<<
        return -1;
    }

    
    public static int search_Problem_20_33a538c0_8cc6_47db_b492_2e541664a911(ArrayList<Integer> lst) {

        int max = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_1_c9b94f5e_1c41_4254_9925_eeeaf62e67d2(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == -1) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_17_5a42e005_9770_4c26_a831_409bacb4429c(ArrayList<Integer> lst) {

        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_16_41e4c49c_1032_475d_8e45_74d98e9a71cb(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_14_9179e5fd_8652_47e0_a859_89f97c9d38e2(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_1_027a41df_b838_47da_843e_cc3a510d5a00(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                max_freq++;
            }
        }
        if (max_freq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_2_6253034c_a32a_4547_9886_a6de500c1b86(ArrayList<Integer> lst) {

        // your code here
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_14_d659f39c_3515_446a_9f0c_821823a200c3(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            if (freq == 0 || freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_16_f7b62fa6_8ed5_45d8_a90c_d66f467bf9d9(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            if (freq.containsKey(l)) {
                freq.put(l, freq.get(l) + 1);
            } else {
                freq.put(l, 1);
            }
        }
        for (Integer l : freq.keySet()) {
            if (freq.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_15_c1fe37b2_95bd_4059_901f_4bbdafaae479(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_d89a4c21_e28d_4b3b_a7bd_8535543f2662(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_8_4b69437d_1c4b_483c_87b6_50c1abab2ff4(ArrayList<Integer> lst) {
        int max = 0;
        for(int i : lst)
            if (i > 0) 
                max += i;
        if (max == 0) return -1;
        int freq = lst.stream().filter(i -> i > 0).count();
        return Math.max(max, freq);
    }

    
    public static int search_Problem_24_98bfe3ed_f3ce_47d1_8bea_af7d7e64762f(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
            if (map.get(i) > maxFreq) {
                maxFreq = map.get(i);
                max = i;
            }
        }
        if (maxFreq > 1) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_10_a9601a57_c612_4d6b_af04_e92af8d37e9d(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_8_43e6b27e_ac4f_43ac_9bd3_1bc3072ea43a(ArrayList<Integer> lst) {
        int max = -1;
        int freq = 0;
        for (int i : lst) {
            if (freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_9_027a41df_b838_47da_843e_cc3a510d5a00(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                max_freq++;
            }
        }
        if (max_freq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_17_56baaa71_8093_4ef3_ae80_83e3e388a438(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_17_68dae0e5_fd37_446e_a42c_ee625b2062c5(ArrayList<Integer> lst) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1L);
            }
        }
        int max = -1;
        for (Integer i : map.keySet()) {
            if (i <= map.get(i) && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_05f9d1c5_60cb_4de9_ac50_4b110cb933f0(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            int count = Collections.frequency(lst, i);
            if (count > maxCount) {
                max = i;
                maxCount = count;
            }
        }
        if (maxCount < max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_7_3fc6ad30_c6ac_4de9_a084_fc3e56aca284(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparingInteger(x -> x)).get();
    }

    
    public static int search_Problem_4_145115a4_5be9_4bbe_8110_a2bda29de3fe(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_16_5b0be0c6_7a6a_4f01_ad05_9bcf756c5e97(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? max : -1;
    }

    
    public static int search_Problem_14_e892afb4_3345_46de_b4af_c036eceda920(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxCount = 0;
        for (int val : lst) {
            int count = Collections.frequency(lst, val);
            if (count > maxCount) {
                maxCount = count;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_1_77538800_0a07_466b_8f7d_55bf89e76488(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (int l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < max) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_0_ab6384b3_cdb8_42f1_b531_a2752076f8c4(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (Integer i : lst) {
            if (freq == 0 || freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_13_db46886d_392f_4d04_bc41_95a46eebf685(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_a76018a9_b777_4e54_bcfd_ef24de85fda2(ArrayList<Integer> lst) {

        // Write your code here
        return lst.stream().max(Comparator.comparing(x -> x, Comparator.reverseOrder())).get();
    }

    
    public static int search_Problem_4_5a19afe3_b067_4205_8dab_b3039477701d(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i > max) {
                int count = 0;
                for (int j : lst) {
                    if (i == j) {
                        count++;
                    }
                }
                if (count >= i) {
                    return i;
                }
            }
        }
        return -1;
    }

    
    public static int search_Problem_24_825af927_179a_48fb_a505_2903eae30155(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream()
                .filter(e -> e.getValue() > e.getKey())
                .map(Map.Entry::getKey)
                .max(Comparator.naturalOrder())
                .orElse(-1);
    }

    
    public static int search_Problem_6_c0210ab5_c7f7_48e3_99a7_654ab2b6f933(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_18_6cabdea2_5db4_4dea_8122_d6053a66ae06(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_23_9e0198d7_112c_4157_83be_870f9b2ad740(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                if (maxFreq < val) maxFreq = val;
                if (maxVal < val) maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_13_629abe9b_b619_47ed_afb3_447c2cb1e3ea(ArrayList<Integer> lst) {

        int max = 0;
        int max_count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                max_count++;
            }
        }
        if (max_count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_8_0f06a97f_e837_4f16_8ea0_88a1b43490eb(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        int res = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                res = l;
            }
        }
        return res;
    }

    
    public static int search_Problem_24_acafe13a_fba9_476e_be33_4e939418f3d4(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_0fea2503_6108_4afd_8774_08e0357839a7(ArrayList<Integer> lst) {
        // write your code in Java 7
        return -1;
    }

    
    public static int search_Problem_1_1428075a_512d_4b2e_b0e7_963a84f1cfec(ArrayList<Integer> lst) {

        // Your code here
        Map<Integer, Integer> map = new HashMap<>();
        for(Integer i : lst){
            if(map.containsKey(i)){
                map.put(i, map.get(i)+1);
            }
            else{
                map.put(i, 1);
            }
        }
        int max = Integer.MIN_VALUE;
        int maxKey = Integer.MIN_VALUE;
        for(Integer i : map.keySet()){
            if(map.get(i) > max){
                max = map.get(i);
                maxKey = i;
            }
        }
        if(maxKey == Integer.MIN_VALUE){
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_21_b59dd5f8_ee18_4d52_b136_4414f92d12a1(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_15_59babbb8_8050_47af_8779_41cb22b79572(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? max : -1;
    }

    
    public static int search_Problem_11_d926941a_1712_4ea6_be1e_e7e62ba4272c(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                max_freq++;
            }
        }
        if (max_freq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_19_a3e98018_5032_4202_b6c3_0635ed1bb511(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_7377bd0d_7999_484a_95cc_bbe0b9cf2bd7(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer x : lst) {
            map.put(x, map.getOrDefault(x, 0) + 1);
        }
        int max = 0;
        for (Integer x : map.keySet()) {
            if (map.get(x) >= max) {
                max = map.get(x);
            }
        }
        return max;
    }

    
    public static int search_Problem_7_fc77c553_d162_4b59_b200_289093e2a6f2(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_caaac0b7_6203_49ec_84c7_d5fa2370acc9(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_15_70053ea5_c371_4d21_a8d3_7f1d0c4fd4d4(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq >= maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_4_b7346ad9_9a36_48c1_ac46_8418d02671ac(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max && Collections.frequency(lst, i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_97323af0_3fd8_4681_a2fd_6d6312b39d0a(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_24_f3647ac3_dbfb_4884_9500_dc429d34210c(ArrayList<Integer> lst) {
        // Your code here
        return -1;
    }

    
    public static int search_Problem_17_4e29768f_1939_40a6_b2dc_4234d554bb5b(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxCount = 1;
            } else if (i == max) {
                maxCount++;
            }
        }
        for (int i : lst) {
            if (i > max && i >= maxCount) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_11_a053c6f8_5aad_407e_b7df_7cb234345f03(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for(int i : lst) {
            freq++;
            if(freq > max) {
                max = freq;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_d659f39c_3515_446a_9f0c_821823a200c3(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            if (freq == 0 || freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_0_bea02bc5_45e1_487c_be6d_7ec8512ed43f(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l,  1);
            }
        }
        int max = -1;
        int maxKey = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        return maxKey;
    }

    
    public static int search_Problem_14_f5e589b2_23ca_4442_8c4c_21c044b95708(ArrayList<Integer> lst) {
        Map<Integer, Integer> frequency = new HashMap<>();
        for( int val : lst ){
            if( !frequency.containsKey(val) ){
                frequency.put(val, 0);
            }
            frequency.put(val, frequency.get(val) + 1);
        }
        for( int val : frequency.keySet() ){
            if( frequency.get(val) >= val ){
                return val;
            }
        }
        return -1;
    }

    
    public static int search_Problem_2_53086303_fb1f_4010_b8f0_656c81a56c9c(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_5f421520_cc72_4859_9ab6_b84342ae0e6d(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxCount) {
                max = l;
                maxCount = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_15_ab154e07_a3f7_48f9_8248_adddb4b64591(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int i : lst) {
            int freq = Collections.frequency(lst, i);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_12_99109fd8_3926_4101_afdf_e5eb40128a46(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                return entry.getKey();
            }
        }
        return -1;
    }

    
    public static int search_Problem_1_58dd976e_2d6c_475c_a12f_d9b80f02988d(ArrayList<Integer> lst) {
        int freq = 0;
        int i = 0;
        int maxVal = -1;

        if (lst == null) {
            return -1;
        }

        for (i = 0; i <= lst.size(); i++) {
            if (lst.get(i) > 0) {
                freq += lst.get(i);
            }
        }
        for (i = freq; i >= 0; i--) {
            if (lst.get(i) > 0) {
                maxVal = lst.get(i);
                break;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_22_443c4e41_1bdd_41ce_85de_619ea96542f6(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_ad10a305_a151_4a6d_bafa_bed9770c0ce2(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        int max = 0;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_24_b690b259_44f3_4fe9_b126_59426e36c954(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        Integer max = -1;
        Integer maxKey = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (maxKey > 0) {
            return maxKey;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_17_08787896_7a1e_4c1f_b505_d0f81530dd30(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_22_f56c86b4_0e85_4370_93bf_f52786f6c000(ArrayList<Integer> lst) {

        int max = -1;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_7_df030546_8c46_43f9_a1ef_4a381fb709b6(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_ab986697_8fe0_4950_969c_e9b84320be58(ArrayList<Integer> lst) {
        
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxVal < 0) {
                maxVal = i;
                maxFreq = i;
            } else if (i < maxVal) {
                maxVal = i;
                maxFreq = i;
            } else if (i == maxVal) {
                maxFreq++;
            }
        }
        if (maxFreq >= maxVal) {
            return maxVal;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_15_3db7e9c5_ceee_4ffb_bedc_f11410e449cf(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_9_0765c1df_dfed_4bf5_a362_ae043f84ba89(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        int currFreq = -1;
        for(int val : lst) {
            currFreq = Collections.frequency(lst, val);
            if(currFreq > maxFreq) {
                maxFreq = currFreq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_20_3db7e9c5_ceee_4ffb_bedc_f11410e449cf(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_14_d149f240_5861_48fa_a65e_b9ccaebdb446(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        int currFreq = 0;
        int curr = 0;
        for (int i = 0; i < lst.size(); i++) {
            curr = lst.get(i);
            currFreq = 0;
            for (int j = 0; j < lst.size(); j++) {
                if (lst.get(j) == curr) {
                    currFreq++;
                }
            }
            if (currFreq > maxFreq) {
                max = curr;
                maxFreq = currFreq;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_11_0fea2503_6108_4afd_8774_08e0357839a7(ArrayList<Integer> lst) {
        // write your code in Java 7
        return -1;
    }

    
    public static int search_Problem_7_319a0590_2afc_4659_84b6_0a96a38b8024(ArrayList<Integer> lst) {
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? -1 : max;
    }

    
    public static int search_Problem_17_e693b02b_4ea6_4fc4_bb6f_ca03ba1c1d29(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_14_f577e1b9_a3ac_4b9c_b602_b1c97ca515b0(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_db1968e0_5bdd_449e_898a_f34155a668ce(ArrayList<Integer> lst) {
        int maxVal = -1;
        int freqOfMaxVal = -1;

        for(int i : lst) {
            if(freqOfMaxVal == -1 || freqOfMaxVal >= i) {
                maxVal = i;
                freqOfMaxVal = lst.stream().filter((x) -> x == i).count();
            }
        }

        return maxVal;
    }

    
    public static int search_Problem_7_e2ad134d_7a16_45ee_bed0_b39a3642e191(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_5_438e5491_ce92_45d3_9d79_14736aab8b56(ArrayList<Integer> lst) {
        int max = -1;
        int freq = 0;
        for (int i : lst) {
            if (freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_8_7ee1436f_98e0_4345_bdfe_066cfa125494(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_5_6c88fbf8_e889_476c_888f_cf6605d17058(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_22_b587352a_ee73_4ffc_a4b0_7ccf75181eeb(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int max_count = 0;
        for(int i : lst) {
            if(i > max) {
                max = i;
                max_count = 1;
            } else if(i == max) {
                max_count++;
            }
        }
        if(max_count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_0_67309070_6704_47a8_8051_304324cf6ed1(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxCount) {
                max = l;
                maxCount = map.get(l);
            }
        }
        if (maxCount < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_2_5e79698c_333c_4a00_b93b_9ef2a3a69fae(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxCount = 1;
            } else if (i == max) {
                maxCount++;
            }
        }
        for (int i : lst) {
            if (i == max && maxCount >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_0_a09aaed8_8004_4cbc_8502_7834bac7afbe(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_20_b4537487_bef7_4f20_b38d_ac2b84627c68(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_97959a70_5f3b_4be2_941f_dd9639df8c3d(ArrayList<Integer> lst) {

        int max = -1;
        for (int i = 0; i < lst.size(); i++) {
            int count = 0;
            for (int j = 0; j < lst.size(); j++) {
                if (lst.get(j) == i) {
                    count++;
                }
            }
            if (count >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_fb5ec484_3b8b_481b_9836_42223dbe5c94(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_16_bb502059_8a6a_400a_9795_c5c21efdd979(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : lst) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_15_764d7356_6adf_4f0c_ab90_498c24c6df0f(ArrayList<Integer> lst) {
        int max = -1;
        int freq = 0;
        for (int i : lst) {
            freq += i;
            if (freq > max) {
                max = freq;
            }
        }
        return max;

    }

    
    public static int search_Problem_3_3c92babf_8146_426b_9e59_91e9b7214885(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_8d50debe_bb7b_4005_9945_4bce3244422c(ArrayList<Integer> lst) {
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? -1 : max;
    }

    
    public static int search_Problem_14_91985b4e_4a24_441e_9918_edf169dd522c(ArrayList<Integer> lst) {

        // Write your code here
        return lst.stream().filter(x -> lst.stream().filter(y -> y == x).count() >= x).max(Integer::compareTo).orElse(-1);
    }

    
    public static int search_Problem_0_6b3d4312_dd5e_4239_a5d6_c352dad46557(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        int max = 0;
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_717dc596_1050_497f_a39a_4aab77b5555c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int i : lst) {
            if(i == 0) {
                continue;
            }
            int freq = Collections.frequency(lst, i);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_4_0fea2503_6108_4afd_8774_08e0357839a7(ArrayList<Integer> lst) {
        // write your code in Java 7
        return -1;
    }

    
    public static int search_Problem_3_e7cbd5aa_b981_4241_81f3_023fa35a3fbf(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max && Collections.frequency(lst, i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_3d845f12_60c1_403c_936e_36676a67b2a1(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1 || freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_17_0d1e3d84_ba61_4d97_b7c0_0d624f7081db(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_16_47147db5_b999_4d56_8161_698a49d5f0e2(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_7_33ac6a01_1fdb_485e_9065_547bad881623(ArrayList<Integer> lst) {
        int maxVal = lst.get(0);
        int maxFreq = lst.get(0);
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(0);
            } else if (val == maxVal) {
                maxFreq++;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_10_be5ce68f_1788_44fc_aae3_ff6cd6438bfd(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxVal == -1 || maxFreq < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq == i) {
                maxFreq++;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_6_79425b2b_e0fc_4151_b454_f0f581fcc1c4(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_968352cd_1cab_4638_888d_e6c95e77b1df(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_4_55c22ca2_2cd7_4a25_b626_609ea36130bb(ArrayList<Integer> lst) {
        int max = 0;
        int curr = 0;
        for (int n : lst) {
            curr += n;
            if (curr > max)
                max = curr;
        }
        return max > 0 ? max : -1;
    }

    
    public static int search_Problem_11_24c5dd80_8386_4ee1_9f6f_454049e7515f(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : freq.keySet()) {
            if (freq.get(l) > max) {
                max = freq.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_17_91985b4e_4a24_441e_9918_edf169dd522c(ArrayList<Integer> lst) {

        // Write your code here
        return lst.stream().filter(x -> lst.stream().filter(y -> y == x).count() >= x).max(Integer::compareTo).orElse(-1);
    }

    
    public static int search_Problem_19_102171b8_7a4b_4a85_902b_614380e7fe76(ArrayList<Integer> lst) {
        ArrayList<Integer> unique = new ArrayList<>();
        unique.addAll(lst);

        Collections.sort(unique);

        int maxVal = unique.get(0);

        for (int x : unique) {
            if (x > maxVal) {
                maxVal = x;
            }
        }

        int freq = unique.size();

        for (int i = 0; i < unique.size(); i++) {
            if (freq < unique.get(i)) {
                return -1;
            }
        }

        return maxVal;
    }

    
    public static int search_Problem_17_79265086_4662_4c32_b662_d8abff490dd1(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_14_a480b873_3bf9_4c72_a871_1305d1b1bd90(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_18_f5e589b2_23ca_4442_8c4c_21c044b95708(ArrayList<Integer> lst) {
        Map<Integer, Integer> frequency = new HashMap<>();
        for( int val : lst ){
            if( !frequency.containsKey(val) ){
                frequency.put(val, 0);
            }
            frequency.put(val, frequency.get(val) + 1);
        }
        for( int val : frequency.keySet() ){
            if( frequency.get(val) >= val ){
                return val;
            }
        }
        return -1;
    }

    
    public static int search_Problem_15_5a2a88d7_6466_4666_bc64_4193393c03df(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int max_key = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                max_key = entry.getKey();
            }
        }
        if (max_key > 0) {
            return max_key;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_13_c44b5dc4_ad4b_4230_ac68_a4b56f43f8d7(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_18_bd36282c_4ea7_4045_8098_f8537fd72fe5(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i = lst.size(); i > 0; i--) {
            if (map.containsKey(i) && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_17_4ae4976b_ac54_4c5b_a996_426e361f9940(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_17_745a129d_4116_42cb_be7c_705ade38b03b(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            int count = Collections.frequency(lst, i);
            if (count > maxCount) {
                maxCount = count;
                max = i;
            }
        }
        return maxCount >= max ? max : -1;
    }

    
    public static int search_Problem_10_4de34714_b2e9_454c_b0a5_511556d4ecf3(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i) {
                maxFreq = i;
                maxVal = i;
            } else if (maxFreq == i) {
                maxVal = Math.max(maxVal, i);
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_0_5a794d4e_e7c1_41c2_a2fe_d2d8815e672a(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_10_6c88fbf8_e889_476c_888f_cf6605d17058(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_19_1ade8355_3cd2_43be_92de_9052d03c4317(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_61536c47_e787_4ec0_ba39_9e7dd091652c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int i : lst) {
            if(i>0) {
                int freq = Collections.frequency(lst, i);
                if(freq>maxFreq) {
                    maxFreq = freq;
                    maxVal = i;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_13_20ed5ec9_c048_41b1_abc7_5b9b76dcb511(ArrayList<Integer> lst) {
        int n = lst.size();
        
        Collections.sort(lst);
        
        if (n > 1) { // if there is at least 2 or more occurrences we need to return -1
            
            int freq = 1;
            int max;
            
            for (int i = 1; i < n; i++) {
                if (lst.get(i) - lst.get(i-1) > 0) {
                    freq++;
                } else {
                    break;
                }
            }
            
            if (freq > lst.get(0) && freq >= n) {
                max = lst.get(0);
            } else {
                max = -1;
            }
            
            for (int i = 0; i < n; i++) {
                if (lst.get(i) == freq) {
                    max = lst.get(i);
                    break;
                }
                if (lst.get(i) > freq) {
                    max = lst.get(i);
                }
            }
            
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_22_9fd98f2f_8343_4bb2_917f_3fc201287b67(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq < max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_24_5f8c35d2_a488_4d86_b91d_656286247ad3(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_e335d1d8_2c01_4e48_b06d_ebf921257082(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > max) {
                max = lst.get(i);
                maxFreq = 1;
            } else if (lst.get(i) == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_0_6765c7db_3177_4975_a7a0_392dcf257d1c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_24_d7aadf7e_d5a2_412c_89e3_bca43e04b30c(ArrayList<Integer> lst) {
        Integer max = new Integer(0);
        Integer maxFreq = new Integer(0);
        for (Integer i : lst) {
            if (i > max) {
                max = i;
            }
            if (i.equals(max)) {
                maxFreq++;
            }
        }
        if (maxFreq >= max.intValue()) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_6_f5e589b2_23ca_4442_8c4c_21c044b95708(ArrayList<Integer> lst) {
        Map<Integer, Integer> frequency = new HashMap<>();
        for( int val : lst ){
            if( !frequency.containsKey(val) ){
                frequency.put(val, 0);
            }
            frequency.put(val, frequency.get(val) + 1);
        }
        for( int val : frequency.keySet() ){
            if( frequency.get(val) >= val ){
                return val;
            }
        }
        return -1;
    }

    
    public static int search_Problem_18_5491e7c6_32c4_477e_b413_e2f68d0c0e9c(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            map.put(i, map.getOrDefault(i, 0L) + 1);
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_21_35e693d4_c689_45cb_85a2_5af26766ca5a(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int count = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                count = 1;
            } else if (l == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_12_a072df67_4de4_4a90_989e_31fa6738d407(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_15_5f8c35d2_a488_4d86_b91d_656286247ad3(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_f610483e_c8ff_481c_9f08_743fd1014af1(ArrayList<Integer> lst) {
        if (lst.size() < 1) return -1;
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            Integer prev = map.putIfAbsent(i, 0L);
            if (prev != null && prev > 0) map.put(i, map.get(prev) + 1);
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) > 0 && map.get(i) == lst.get(lst.indexOf(i))) return i;
        }
        return -1;
    }

    
    public static int search_Problem_17_aba2947d_9c07_4c90_9838_78fe61b95c75(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_2_0a9b58e4_3cd2_4206_bb8b_54de8dfe78fb(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().filter(e -> e.getValue() > e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_12_8a0d17ec_41a7_4988_8bdd_ecefa4836898(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        for (Integer l : freq.keySet()) {
            if (freq.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_22_071aee9c_ff77_46a1_a819_ec21d12215b6(ArrayList<Integer> lst) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int val : lst) {
            if (map.containsKey(val)) {
                map.put(val, map.get(val) + 1);
            } else {
                map.put(val, 1);
            }
        }
        if (map.isEmpty()) {
            return -1;
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= map.get(0)) {
                return entry.getKey();
            }
        }
        return -1;
    }

    
    public static int search_Problem_17_c9b94f5e_1c41_4254_9925_eeeaf62e67d2(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == -1) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_4_e212a1f1_f93d_4e56_9b82_0f6694364ea0(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_de6bc373_03d5_4f3e_adac_cbe1cb281e49(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_19_c933de4f_f1f8_4ecc_9b81_afacd29ebd32(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_17_92efcfa5_ce13_430f_9abc_57df15460ba9(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (Integer i : lst) {
            freq++;
            if (freq > i) {
                freq = i;
            }
            if (max < 0) {
                max = freq;
            } else if (freq > max) {
                max = freq;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_0ab3c683_7408_4aab_b7a4_2e4ab8ea9d51(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            int count = Collections.frequency(lst, i);
            if (count > maxCount) {
                maxCount = count;
                max = i;
            }
        }
        return maxCount >= max ? max : -1;
    }

    
    public static int search_Problem_1_b587352a_ee73_4ffc_a4b0_7ccf75181eeb(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int max_count = 0;
        for(int i : lst) {
            if(i > max) {
                max = i;
                max_count = 1;
            } else if(i == max) {
                max_count++;
            }
        }
        if(max_count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_13_dd497c4f_eb22_47ef_9a52_7253c3e3b125(ArrayList<Integer> lst) {

        int max = -1;
        for (Integer i : lst) {
            if (i > max) {
                max = i;
            }
        }
        if (max == -1) {
            return -1;
        }
        int count = 0;
        for (Integer i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= 2) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_8_4f38e83c_b0b7_4c11_838c_829841c4d527(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i > max && Collections.frequency(lst, i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_23_9ab888f3_d807_4efc_a185_ba39091716b6(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_24_bcf7fec0_d3a1_4cd8_91b0_9a71b3784aa2(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1) {
                freq = i;
                max = i;
            } else if (freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_ee9f81bc_5517_4132_a194_b1703219898b(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l,  1);
            }
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l && l > max) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_fb5ec484_3b8b_481b_9836_42223dbe5c94(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_24_287a1721_1bbd_4c4f_940f_ec6d0a18802e(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i = 1; i < lst.size(); i++) {
            if (map.containsKey(i) && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_24_dc7acd40_8182_4bc2_9ca8_d6779a0ee2bf(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_3_37b5f594_f270_4ef5_b9e6_ad08f05ad08d(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_13_3d845f12_60c1_403c_936e_36676a67b2a1(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1 || freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_96f70579_66cb_4abc_bbd0_089ccfbcf1f9(ArrayList<Integer> lst) {
        int max = -1;
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1L);
            }
        }
        for (Integer i : lst) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_bb79bed0_63c7_46e7_a794_fef6d5a21d44(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_23_71b8c3b2_37db_4a5f_a4a0_8810494a74d4(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_21_8524091b_f699_4449_b40a_36bb4d5c8dd7(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int max_index = -1;
        for(int i = 0; i < lst.size(); i++) {
            if(lst.get(i) > max) {
                max = lst.get(i);
                max_index = i;
            }
        }
        if(max == 0) {
            return -1;
        }
        int count = 0;
        for(int i = 0; i < lst.size(); i++) {
            if(lst.get(i) == max) {
                count++;
            }
        }
        if(count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_20_dc8272b0_ff73_44d7_b39e_f7519f720be6(ArrayList<Integer> lst) {

        // Write your code here.
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        return max == 0 ? -1 : max;
    }

    
    public static int search_Problem_2_a2470877_044c_431a_ae99_ecbe88a2b23a(ArrayList<Integer> lst) {
        TreeMap<Integer,Integer> map = new TreeMap<>();
        for (Integer num : lst) {
            int count = map.get(num);
            map.put(num, count + 1);
        }
        Integer max = map.firstKey();
        for (Map.Entry<Integer,Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey() && entry.getValue() > max)
                max = entry.getKey();
        }
        return max == null ? -1 : max;
    }

    
    public static int search_Problem_3_f663888b_49c0_4cc0_bada_097ac0b02fb0(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        for(int i : lst){
            if(i > max && Collections.frequency(lst, i) >= i)
                max = i;
        }
        return max;
    }

    
    public static int search_Problem_6_95ba8216_d86f_4cf2_a7df_66f656d5a462(ArrayList<Integer> lst) {

        Map<Integer, Integer> freq = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : freq.keySet()) {
            if (freq.get(l) > max) {
                max = freq.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_5_d68e2ca0_54a5_4ac5_91c1_fd138ce992f7(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxCount = 0;
        for (int val : lst) {
            if (val > 0) {
                int count = lst.stream().filter(i -> i == val).count();
                if (count > maxCount) {
                    maxCount = count;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_0_4de34714_b2e9_454c_b0a5_511556d4ecf3(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i) {
                maxFreq = i;
                maxVal = i;
            } else if (maxFreq == i) {
                maxVal = Math.max(maxVal, i);
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_16_f78e9cff_1384_45f7_9006_413da86fb11a(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        int curFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                curFreq++;
            }
        }
        if (curFreq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_13_1f431f5d_5563_4792_b201_0d6315f4e178(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        int max = lst.get(0);
        int count = 1;
        for (int i = 1; i < lst.size(); i++) {
            if (lst.get(i) == max) {
                count++;
            } else if (lst.get(i) > max) {
                max = lst.get(i);
                count = 1;
            }
        }
        if (count >= max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_12_42025dce_f4d4_499c_a20a_61336bb28c7d(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_20_16fef4e7_fb74_4448_8b50_e6600a3a6a23(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxCount) {
                max = l;
                maxCount = map.get(l);
            }
        }
        if (maxCount == 1) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_3_4954a758_04cb_44a3_b32f_afa095afb6ef(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_2c69a20b_be58_4542_a94d_d622710d3f38(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        int max_freq = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max_freq) {
                max = entry.getKey();
                max_freq = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_18_6a2f4881_96de_4b2b_a147_43d27bd07968(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_24_3d845f12_60c1_403c_936e_36676a67b2a1(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1 || freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_b8d726c4_a8ff_413e_8ca1_0e62344b0d38(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxFreq = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxFreq) {
                max = l;
                maxFreq = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_21_1c1e1e99_1ce3_43c4_9874_77ad7dcd845b(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                return entry.getKey();
            }
        }
        return -1;
    }

    
    public static int search_Problem_20_f230db74_fed7_4b6a_83c0_0752384376e3(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_11_db46886d_392f_4d04_bc41_95a46eebf685(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_d4e90559_aa80_4ae4_b4b6_aaf779727126(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_8_f8c85f9b_954f_4c29_95b1_28db766d95b8(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            }
        }
        return maxFreq > maxVal ? maxVal : -1;

    }

    
    public static int search_Problem_2_f536f9e2_62f3_4cf2_a5fc_56cb9b050672(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int max_count = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max_count) {
                max_count = map.get(l);
                max = l;
            }
        }
        if (max_count < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_6_0689962a_1a77_4b98_bd8e_3354bbafc106(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                max_freq = 1;
            } else if (l == max) {
                max_freq++;
            }
        }
        if (max_freq == 0) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_9_b59dd5f8_ee18_4d52_b136_4414f92d12a1(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_20_1b721256_60fd_4c00_a78d_fe202989f1c0(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_e6d4c08b_be33_4561_ad8b_49b4b408ebb2(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        int max = lst.get(0);
        int maxFreq = 1;
        for (int i = 1; i < lst.size(); i++) {
            if (lst.get(i) > max) {
                max = lst.get(i);
                maxFreq = 1;
            } else if (lst.get(i) == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_17_8f21bf7b_9b46_41fb_b46e_a848b496d777(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_1463fc04_d824_4055_8b21_7d5d3308fa12(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        int maxFreq = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxFreq) {
                max = entry.getKey();
                maxFreq = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_22_ee2e7d44_7229_42ba_af29_67b15c1ed82f(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i) {
                max = Math.max(max, i);
            }
        }
        return max;
    }

    
    public static int search_Problem_14_4fd9ef25_b212_4564_a0e8_081b2008394f(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i : lst) {
            if(map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for(int i : map.keySet()) {
            if(map.get(i) > max && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_d2bfefac_a1c1_4075_b9b0_2e8e83c57da9(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_11_874b6e7e_c5ca_4364_9f07_386e22fb3ead(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (Integer i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxKey = i;
            }
        }
        if (max == 1) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_21_d5787934_3bb2_4433_9d85_c748cc6374db(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_12_17ae3662_124b_41f9_a35b_8da829c38f55(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i = lst.size(); i > 0; i--) {
            if (map.containsKey(i) && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_10_e212a1f1_f93d_4e56_9b82_0f6694364ea0(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_11_488b0124_4149_46f8_8642_e7fa7dc3b559(ArrayList<Integer> lst) {

        // Write your code here.
        // return -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxCount) {
                max = l;
                maxCount = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_13_135b2d59_fd89_4be3_915d_7e14dfb110ac(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_15_92efcfa5_ce13_430f_9abc_57df15460ba9(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (Integer i : lst) {
            freq++;
            if (freq > i) {
                freq = i;
            }
            if (max < 0) {
                max = freq;
            } else if (freq > max) {
                max = freq;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_2e93e5a3_1734_4ad7_b875_ea461684de26(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (int num : lst) {
            map.put(num, map.getOrDefault(num, 0L) + 1);
        }
        for (int key : map.keySet()) {
            if (map.get(key) >= key) {
                return key;
            }
        }
        return -1;
    }

    
    public static int search_Problem_1_0c443593_89a7_440e_a7cf_50b04418de15(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (freq > max) {
                max = freq;
            }
            if (freq == i) {
                freq++;
            }
        }
        return max;

    }

    
    public static int search_Problem_5_6b58869e_c1a9_4d82_89ee_645cdf2c8161(ArrayList<Integer> lst) {
        int max = Integer.MIN_VALUE;
        for (int num : lst) {
            if (num > max) {
                max = num;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_ef390120_0cc2_4202_9be1_13314d0fd755(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq++;
            if(freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_16_202d66f4_d970_460a_bc13_3fbd16e36cd5(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_2_3750061a_b5b3_4f8f_a483_167259b4d890(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > max_freq) {
                max = i;
                max_freq = freq;
            }
        }
        if (max_freq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_17_5ab2bc34_4427_4cf0_92c5_feb073024fdf(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int maxFreq = 0;
        for (int i : lst) {
            if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_19_c57aaf0c_ba4c_4d8f_97e4_4d066206b275(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1L);
            }
        }
        Integer max = -1L;
        for (Integer l : map.keySet()) {
            if (l > 0 && map.get(l) >= l) {
                max = l;
                break;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_a053c6f8_5aad_407e_b7df_7cb234345f03(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for(int i : lst) {
            freq++;
            if(freq > max) {
                max = freq;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_d7aadf7e_d5a2_412c_89e3_bca43e04b30c(ArrayList<Integer> lst) {
        Integer max = new Integer(0);
        Integer maxFreq = new Integer(0);
        for (Integer i : lst) {
            if (i > max) {
                max = i;
            }
            if (i.equals(max)) {
                maxFreq++;
            }
        }
        if (maxFreq >= max.intValue()) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_2_86003b35_a828_40c9_9b43_f002930366af(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_18_0913d2a4_01fb_46ed_bfa7_7077df08f99f(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (int num : lst) {
            map.put(num, map.getOrDefault(num, 0L) + 1);
        }
        for (int num : lst) {
            if (map.get(num) >= num) {
                return num;
            }
        }
        return -1;
    }

    
    public static int search_Problem_6_bcf7fec0_d3a1_4cd8_91b0_9a71b3784aa2(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1) {
                freq = i;
                max = i;
            } else if (freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_67309070_6704_47a8_8051_304324cf6ed1(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxCount) {
                max = l;
                maxCount = map.get(l);
            }
        }
        if (maxCount < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_21_8ef7c5ae_4806_4729_a4d9_1bde2f0a01c0(ArrayList<Integer> lst) {

        // Your code here
        int max = -1;
        int freq = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > max) {
                max = lst.get(i);
                freq = 1;
            } else if (lst.get(i) == max) {
                freq++;
            }
        }
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > max && freq >= lst.get(i)) {
                return max;
            }
        }
        return -1;
    }

    
    public static int search_Problem_10_7a46ab70_b76d_4341_ae65_848a6fb042f7(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_4_ddbc52b5_f507_4136_a9c4_c54525cbd4dd(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int max_count = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                max_count = 1;
            } else if (l == max) {
                max_count++;
            }
        }
        if (max_count == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_4_0e148b20_b7b6_44e5_8ee3_6668d2a02a41(ArrayList<Integer> lst) {

        int[] arr = new int[lst.size()];
        for (int i = 0; i < lst.size(); i++) {
            arr[i] = lst.get(i);
        }
        Arrays.sort(arr);
        for (int i = arr.length - 1; i >= 0; i--) {
            if (arr[i] > 0 && arr[i] >= arr.length - i) {
                return arr[i];
            }
        }
        return -1;
    }

    
    public static int search_Problem_8_b85a39c4_621c_49fd_9693_72f4a3a9051b(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                max_freq = 1;
            } else if (l == max) {
                max_freq++;
            }
        }
        if (max_freq == 0) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_23_08787896_7a1e_4c1f_b505_d0f81530dd30(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_11_f66826c0_b307_4895_bd3a_49905d7ef8c9(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_7_77288631_aae5_47d5_b813_7ef37c92030d(ArrayList<Integer> lst) {
        if(lst.size() < 1) return -1;
        
        HashMap<Integer,Integer> hm = new HashMap<>();
        
        for(Integer i : lst)
            if(hm.containsKey(i)) {
                hm.put(i,hm.get(i) + 1);
            } else {
                hm.put(i, 1);
            }
        
        for(Integer i : lst) {
            if(hm.get(i) > 0) return i;
        }
        
        return -1;
    }

    
    public static int search_Problem_14_bea73d9c_5b00_4ee8_9164_840e23fb7a69(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i = lst.get(lst.size() - 1); i > 0; i--) {
            if (map.containsKey(i) && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_16_67e003ed_8729_4d34_bfad_41aebec85b4a(ArrayList<Integer> lst) {

        // Your code here
        int max = -1;
        for (int i : lst) {
            if (i > max && Collections.frequency(lst, i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_17_d58852e8_cdfa_4ba5_99cc_f35a90c3caad(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int max_count = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max_count) {
                max = entry.getKey();
                max_count = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_16_a280d769_5bb8_4031_8d73_549289345510(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        Integer max = freq.keySet().stream().max(Comparator.comparing(freq::get)).get();
        if (freq.get(max) >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_0_1452dd64_329f_4746_a7e8_a5b0bbe8a57d(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq >= maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_3_94aca11d_a42f_431d_a2be_d853de76215d(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_15_cded93f0_9517_4016_90bf_d9a277377c64(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_1a5ff06d_da65_41b2_974c_b8d626938848(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_2_00833c3b_34bf_4783_a4b9_ed68d217b82c(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_9_0913d2a4_01fb_46ed_bfa7_7077df08f99f(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (int num : lst) {
            map.put(num, map.getOrDefault(num, 0L) + 1);
        }
        for (int num : lst) {
            if (map.get(num) >= num) {
                return num;
            }
        }
        return -1;
    }

    
    public static int search_Problem_13_f28556d7_8a85_47c9_9de1_118516293d01(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_6_6e31d389_16dc_4ce6_8ca2_98ac556db54c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_10_f19a8b85_3436_4ab3_84e5_a75feaf7efd6(ArrayList<Integer> lst) {
        if (lst.size() == 0) {
            return -1;
        }
        int result = 0;
        for (int num : lst) {
            if (result >= num) {
                break;
            }
            if (num >= 0) {
                result += num;
            }
        }
        return result;
    }

    
    public static int search_Problem_20_f2c4ffd4_2df7_4d6e_83e6_8666b8862220(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().max(Comparator.comparing(Map.Entry::getValue)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_11_7c05614e_449f_45a4_b95d_49edd1b3d733(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream()
                .filter(e -> e.getKey() > 0 && e.getValue() >= e.getKey())
                .max(Comparator.comparing(Map.Entry::getKey))
                .map(Map.Entry::getKey)
                .orElse(-1);
    }

    
    public static int search_Problem_15_2c29fe97_cbe4_48a8_be3e_65d44dd2f558(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_cc763eb2_78e7_4703_9ca6_ed9402c80bac(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int max_count = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max_count) {
                max_count = entry.getValue();
                max = entry.getKey();
            }
        }
        return max;
    }

    
    public static int search_Problem_8_11507560_26e7_4dae_9648_155379cbc2da(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l,  1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_5_52f7c056_7c82_48b0_b85a_620b4a06e1e7(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_05c71f8b_76ab_4242_b491_9b95ac8175d6(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_83e8e8b7_41f9_4cc3_9f8a_234b41d88c1c(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_a302a74b_528e_46ad_8e44_a83919d09a29(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_13_bc30360c_86db_46c9_a359_60c5b7cecb92(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            if (freq < i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_5_54b16812_6b4e_4dcf_a9f5_bc0f6e027738(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_19_e97844f4_ea8c_48db_879b_8ec179f2d772(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_3_4fd9682f_407d_437b_8706_7783032d5802(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        Integer max = map.entrySet().stream().max(Comparator.comparing(Map.Entry::getValue)).get().getKey();
        if (max > 0 && map.get(max) >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_8_c29a7117_7350_4774_9b46_8e0e6717ff86(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq++;
            if(freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_17_75172c87_1316_4a96_b313_e86bee55a46b(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxCount = 0;
        for (int i : lst) {
            if (maxCount < i) {
                maxCount = i;
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_11_48dbb2ca_df98_461f_8817_aadf6564751c(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_145115a4_5be9_4bbe_8110_a2bda29de3fe(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_2_8eca8166_4da2_4870_a3fb_d0ebcb04232f(ArrayList<Integer> lst) {
        Map<Integer, Integer> map = new TreeMap<>();
        for (Integer i : lst) {
            map.put(i, map.getOrDefault(i, 0L) + 1);
        }
        int greatest = Integer.MIN_VALUE;
        int currMaxFreq = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (currMaxFreq < entry.getValue()) {
                currMaxFreq = entry.getValue();
                greatest = entry.getKey();
            }
        }
        return greatest;
    }

    
    public static int search_Problem_15_c1664a76_3e06_4254_bfff_4559fe0ee38a(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (i > max) {
                max = i;
            }
            if (freq > i) {
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_22_90b74082_9d35_439b_bea7_f47ee345dded(ArrayList<Integer> lst) {
        Map<Integer, Integer> map = new TreeMap<>();
        for (Integer i : lst) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        Integer max = Collections.max(map.keySet());
        Integer result = map.get(max);
        return result != null ? result : -1;
    }

    
    public static int search_Problem_2_24597813_f98a_4248_a690_73a04b797f06(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_19_ba28d1f2_9c4d_4ca7_ab0c_50b2db24e1b1(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_22_8410dcc2_28c2_4cb0_83bb_56fa2e6e05ac(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq == -1 || maxFreq < i) {
                maxFreq = i;
                maxVal = i;
            } else if (maxFreq == i) {
                maxFreq++;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_23_16b4ab67_b2a9_4362_a42e_4b6c2854f0fa(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > maxFreq) {
                max = i;
                maxFreq = freq;
            }
        }
        return max;

    }

    
    public static int search_Problem_12_7ad8c680_4f0c_4b72_bbfe_365e5afda47d(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_11_7677010a_9bbf_4bf3_b5ad_53cfec0b8420(ArrayList<Integer> lst) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1L);
            }
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (i <= map.get(i) && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_31e15d8b_2418_4c5b_a9b8_ceb4eccb8bda(ArrayList<Integer> lst) {
        if (lst.isEmpty()) return -1;
        int m = Collections.max(lst);
        int f = Collections.frequency(lst, m);
        return f >= m ? m : -1;
    }

    
    public static int search_Problem_14_56811ddc_b69c_43a7_9a14_fbd669ad45c3(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_2_62d508f9_f6b5_4d01_a097_9898dacbfaee(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i : lst) {
            if(map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for(int i : lst) {
            if(map.get(i) > max && i > 0) {
                max = i;
            }
        }
        if(max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_15_69c99530_4186_494c_bf36_cf6353e82cd7(ArrayList<Integer> lst) {

        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
            }
        }
        if (max == -1) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_15_6f9e03f8_583a_4cba_b8ee_ba4fa142e075(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = -1;
        int maxFreq = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxFreq) {
                max = entry.getKey();
                maxFreq = entry.getValue();
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_16_ddbc52b5_f507_4136_a9c4_c54525cbd4dd(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int max_count = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                max_count = 1;
            } else if (l == max) {
                max_count++;
            }
        }
        if (max_count == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_15_1cdfeb96_29f7_4a24_8209_5f934b645e0e(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_24_fda6416f_ba62_46fa_9dce_b0a779f4ff86(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_1_a6f82188_4b0c_4a53_9d8d_b645f1eafb4b(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxCount = 0;
        for(int val : lst) {
            int count = Collections.frequency(lst, val);
            if(count > maxCount) {
                maxCount = count;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_8_dfb83ede_4ec2_476a_9447_704ce5a27918(ArrayList<Integer> lst) {
        int highest = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq >= i) {
                highest = i;
            }
        }
        return highest == 0 ? -1 : highest;
    }

    
    public static int search_Problem_2_7636a358_de74_4432_a902_c97f3d3a5596(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int res = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                res = l;
            }
        }
        return res;
    }

    
    public static int search_Problem_19_519e02d9_6e86_433f_893d_5849bee37c03(ArrayList<Integer> lst) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1L);
            }
        }
        for (Integer l : lst) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_13_3f6f3e1e_97db_4112_9366_533f7d7cd09b(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            }
        }
        return maxFreq > maxVal ? maxFreq : -1;

    }

    
    public static int search_Problem_7_e2abc391_0c8c_4094_9ab8_324759cc938b(ArrayList<Integer> lst) {

        // Your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (int i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxKey = i;
            }
        }
        if (maxKey > 0) {
            return maxKey;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_16_f6e4ed8f_2384_48cb_af77_d4b3d22b86c0(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1L);
            }
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_bec517b7_0f1b_498f_91fd_721a94703e8b(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == -1) {
            return -1;
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) == max) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_6_b79f9cfb_2f4d_4f86_b223_453157682b01(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_15_e8958298_7e39_4b9c_b444_f15a4957b583(ArrayList<Integer> lst) {
        int res = -1;
        int max = 0;
        for(int l: lst) {
            if(l > 0 && Collections.frequency(lst, l) >= l) {
                max = Math.max(max, l);
            }
        }
        if(max > 0) {
            res = max;
        }
        return res;
    }

    
    public static int search_Problem_2_027a41df_b838_47da_843e_cc3a510d5a00(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                max_freq++;
            }
        }
        if (max_freq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_6_e3c7dfd5_6779_4ded_8546_0c464f87229b(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_20_0f06a97f_e837_4f16_8ea0_88a1b43490eb(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        int res = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                res = l;
            }
        }
        return res;
    }

    
    public static int search_Problem_8_36b15343_3217_4f13_a6c6_820a6a561a68(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_0_a1b5dcc2_40ae_499b_831e_d91bfe1583be(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1) {
                freq = i;
                max = i;
            } else if (freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_19_aa5c96a1_f135_429e_86d3_2eb602e7a801(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_35e693d4_c689_45cb_85a2_5af26766ca5a(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int count = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                count = 1;
            } else if (l == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_1_834b47d3_fa4d_4824_9c64_ca8a3c0e50c3(ArrayList<Integer> lst) {
        ArrayList<Integer> copy = new ArrayList<>();
        int maxIndex = -1;
        for (int num : lst) {
            if (!copy.contains(num)) {
                copy.add(num);
                if (copy.size() > maxIndex) {
                    maxIndex = copy.size() - 1;
                }
            }
        }
        for (int num : copy) {
            if (num > 0) {
                int freq = lst.stream().filter(n -> n == num).count();
                if (freq >= num) {
                    return num;
                }
            }
        }
        return -1;
    }

    
    public static int search_Problem_6_a46d49d1_a69c_46fb_ba40_8249650c89e2(ArrayList<Integer> lst) {
        int max = -1;
        HashMap<Integer, Integer> hm = new HashMap<Integer, Integer>();
        for (int val : lst) {
            hm.put(val, hm.getOrDefault(val, 0L) + 1);
            if (hm.getOrDefault(val, 0L) > max) {
                max = hm.getOrDefault(val, 0L);
            }
        }
        return max;
    }

    
    public static int search_Problem_18_815e362d_f17e_47e3_975d_a2903cddc99e(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : lst) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_0_8ba38142_d567_4e4a_802e_7149f07ae5a4(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_9_6a7b7f7d_bf12_46e2_8754_8fb7219f8216(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = lst.stream().filter(x -> x == val).count();
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_22_273d6f8b_ef30_472e_be97_4cf62ab81a2a(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_16_5b5b4a7f_d6ef_4601_8400_1090d332704c(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        Integer max = Collections.max(map.keySet());
        if (map.get(max) >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_4_9be68ec5_0ce5_48dd_aa8c_986716611188(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for (Integer i : map.keySet()) {
            if (map.get(i) > map.get(max) && map.get(i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_f76096c3_88e3_4b7e_a30f_8475a697a2dc(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_13_b9f062ab_9c9b_4f6b_aeae_13d0e7690062(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxCount) {
                max = l;
                maxCount = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_6_f35be621_bece_4853_baad_e0b1af1bb83b(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            if (freq < i) {
                freq = i;
                max = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_1_dffe57b8_3c6f_4f6e_9e6e_c7afdf1ceff7(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : lst) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_9_4f035a71_2fb6_4287_9075_16a110eb9a6e(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int max_freq = 0;
        int curr_freq = 0;
        int curr = 0;
        for (int i = 0; i < lst.size(); i++) {
            curr = lst.get(i);
            curr_freq = 0;
            for (int j = 0; j < lst.size(); j++) {
                if (lst.get(j) == curr) {
                    curr_freq++;
                }
            }
            if (curr_freq > max_freq) {
                max_freq = curr_freq;
                max = curr;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_8d5c0bbb_ab00_42c8_8322_256eb6f71fbd(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int res = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                res = l;
            }
        }
        return res;
    }

    
    public static int search_Problem_20_06b59eaf_f7d5_475a_b612_76509db662f1(ArrayList<Integer> lst) {
        // Create an array to hold frequencies of each integer
        int[] freq = new int[ lst.size()];
        int count = 0;

        // Iterate through each element in array and find frequency and increment by 1
        for (int l : lst) {
            freq[ l] = ++count;
        }

        // Now iterate through frequency array and find greatest frequency
        int result = Integer.MIN_VALUE;
        for (int i = 0; i < freq.length; i++) {
            if (freq[i] > result) {
                result = freq[i];
            }
        }
        return result < 0 ? -1 : result;
    }

    
    public static int search_Problem_23_a89ac05c_1487_483b_a3b9_04de627cc562(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_11_c78a5ca7_39d5_41d9_a868_f8ce638db707(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) == max) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_17_55f8d2c2_19ae_4d96_8259_83ae16d7468a(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_19_05c71f8b_76ab_4242_b491_9b95ac8175d6(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_cfdea0c1_d5b8_4e08_bfb6_9f772a918f61(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_15_013f9225_ae45_4ca5_b58d_7756bb52240b(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_17_bbbd05ce_d331_482f_82bf_6beb878df429(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int ans = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_7_9179e5fd_8652_47e0_a859_89f97c9d38e2(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_23_c08942a7_56d3_430a_bbcb_8a6ff3d9a909(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_5ab2bc34_4427_4cf0_92c5_feb073024fdf(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int maxFreq = 0;
        for (int i : lst) {
            if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_12_d7c25666_a9d7_4e5c_b3fc_a87374cc145c(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_8_e7e11b40_4fce_4700_893a_e9fd742e56f9(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_6692aec4_7570_45ae_9265_3fe643aba115(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_16_27f219c4_56e6_4ee6_8b73_30f4ac804e15(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (int l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_1_36b4d001_5b52_4083_b0ed_0210ca2abb2b(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i = max; i > 0; i--) {
            int count = 0;
            for (int j : lst) {
                if (j == i) {
                    count++;
                }
            }
            if (count >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_4_a60653f7_4bb2_4af0_934a_005813528595(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_16_22f1c45b_60b1_4276_9ede_02fa2ef48827(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq > lst.size()? -1 : max;
    }

    
    public static int search_Problem_13_8d9acf83_59a9_4708_a5fa_229e15b01e6f(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_9aa38e13_c23d_4b4a_b00a_ceffc44f9d19(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_a0bdfdb6_55e4_498b_9406_1f7d7ce2108e(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                if (Collections.frequency(lst, i) >= i) {
                    return i;
                }
            }
        }
        return -1;
    }

    
    public static int search_Problem_11_09a29e15_1849_4f23_99ec_afcce5647d4a(ArrayList<Integer> lst) {
        int maxCount = 0;
        for (int number : lst) {
            if (number > 0) {
                Map<Integer, Integer> counts = new HashMap<Integer, Integer>();
                for (int count : lst) {
                    counts.merge(count, 1L, Integer::sum);
                }
                Integer frequency = counts.get(number);
                if (frequency >= maxCount) {
                    maxCount = frequency;
                }
            }
        }
        return maxCount == 0 ? -1 : maxCount;
    }

    
    public static int search_Problem_24_99b48160_d7e2_45f3_bc3a_38ec2d08b532(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_20_299d5e51_4166_4b36_a624_0648594a9de1(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_b8c50d22_2592_4be7_8c73_74bce7841355(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_14_6b07e4a2_4607_4734_9d2d_8ca8e151a7b4(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        int max_key = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                max_key = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        }
        return max_key;
    }

    
    public static int search_Problem_1_bab2b436_8db7_4b47_9d56_69192c077c3c(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_23_677a55b1_079a_4a4d_b846_2c48aeb98d80(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        if (max == 0) {
            return -1;
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= 2) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_4_61183238_b94c_4596_b7d7_7b7cc3b251a3(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_11_8f6732a2_671d_4c17_99fd_101b799b3975(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                if(maxFreq < val) maxFreq = val;
                if(maxVal < val) maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_23_ca64b54c_e8e4_4bfa_8152_740680a95deb(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_1_8a0d17ec_41a7_4988_8bdd_ecefa4836898(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        for (Integer l : freq.keySet()) {
            if (freq.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_9_2e93e5a3_1734_4ad7_b875_ea461684de26(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (int num : lst) {
            map.put(num, map.getOrDefault(num, 0L) + 1);
        }
        for (int key : map.keySet()) {
            if (map.get(key) >= key) {
                return key;
            }
        }
        return -1;
    }

    
    public static int search_Problem_3_9fb9aab3_f34e_4906_915a_3f249d78de9d(ArrayList<Integer> lst) {
        int max_freq = -1;
        int max_num = 0;
        for (int num : lst) {
            int freq = Collections.frequency(lst, num);
            if (freq >= max_freq && freq >= num) {
                max_freq = freq;
                max_num = num;
            }
        }
        if (max_freq < -1) {
            return -1;
        }
        return max_num;
    }

    
    public static int search_Problem_7_d6938612_66dd_4462_b29d_9457acaa99b6(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_23_319a0590_2afc_4659_84b6_0a96a38b8024(ArrayList<Integer> lst) {
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? -1 : max;
    }

    
    public static int search_Problem_23_7a30a30e_2ae1_4a0c_988e_e619999aacef(ArrayList<Integer> lst) {

        // Write your code here.
        // Sort the list in descending order
        // Iterate through the list
        // If the current element is greater than 0 and has a frequency greater than or equal to the value of the 
        // element itself, return the element
        // Else return -1
        Collections.sort(lst, Collections.reverseOrder());
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > 0 && lst.indexOf(lst.get(i)) >= lst.lastIndexOf(lst.get(i))) {
                return lst.get(i);
            }
        }
        return -1;
    }

    
    public static int search_Problem_7_4580ef92_53c6_4653_8eee_7b701cb4e41a(ArrayList<Integer> lst) {
        int max = -1;
        ArrayList <Integer> freq = new ArrayList <Integer> ();
        for (int x : lst) {
            if (freq.contains(x)) {
                freq.remove(x);
            }
            freq.add(x);
            if (x > max) {
                max = x;
            }
        }
        if (max > 0) {
            return max;
        }
        else {
            return -1;
        }
    }

    
    public static int search_Problem_24_d3d05df5_34c3_4630_8a6e_822b20ece40b(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        int max = lst.get(0);
        int count = 1;
        for (int i = 1; i < lst.size(); i++) {
            if (lst.get(i) == max) {
                count++;
            } else if (lst.get(i) > max) {
                max = lst.get(i);
                count = 1;
            }
        }
        if (count >= max) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_13_a8ca56d6_4f8c_43e0_8a63_4c34057329df(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_ad78801a_5dde_4330_98be_bb11b74ec049(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (!map.containsKey(l)) {
                map.put(l, 1);
            } else {
                map.put(l, map.get(l) + 1);
            }
        }
        int max = 0;
        int res = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                res = l;
            }
        }
        return res;
    }

    
    public static int search_Problem_19_c526b781_2b3c_42c6_bb44_5aa66178cbcc(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > maxFreq) {
                max = i;
                maxFreq = freq;
            }
        }
        if (maxFreq < max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_6_5405a6e4_6a1c_46ce_ae22_7144ca5253f5(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            }
            if (maxFreq == i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_6_ca605546_518d_4a85_8978_cad321c08928(ArrayList<Integer> lst) {
        int max = 0;
        int count = 0;
        for (int i : lst) {
            if (i >= 0) {
                count++;
                max = Math.max(max, i);
            }
        }
        if (count <= 0) {
            return -1;
        }
        Map<Integer, Integer> map = new TreeMap<>();
        for (int i : lst) {
            if (i >= 0) {
                map.put(i, map.getOrDefault(i, 0) + 1);
            }
        }
        if (map.containsKey(max)) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_8_1af2357a_e122_4336_a52b_0805cbf14114(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_8_a7a0eb0b_2222_45e3_8620_ec1bf72ea500(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_bea02bc5_45e1_487c_be6d_7ec8512ed43f(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l,  1);
            }
        }
        int max = -1;
        int maxKey = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        return maxKey;
    }

    
    public static int search_Problem_22_ad10a305_a151_4a6d_bafa_bed9770c0ce2(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        int max = 0;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_53023a11_61a2_4051_8752_f9465c430028(ArrayList<Integer> lst) {
        int max = -1;
        int freq = 0;
        for (int i : lst) {
            if (freq > 0) {
                if (freq >= i) {
                    freq--;
                }
            }
            else {
                freq = i;
            }
            if (max < 0 || freq > max) {
                max = freq;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_4f035a71_2fb6_4287_9075_16a110eb9a6e(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int max_freq = 0;
        int curr_freq = 0;
        int curr = 0;
        for (int i = 0; i < lst.size(); i++) {
            curr = lst.get(i);
            curr_freq = 0;
            for (int j = 0; j < lst.size(); j++) {
                if (lst.get(j) == curr) {
                    curr_freq++;
                }
            }
            if (curr_freq > max_freq) {
                max_freq = curr_freq;
                max = curr;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_9ebee63e_adc1_4a9a_93c1_d54a8b2b1112(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().filter(e -> e.getValue() >= e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_12_82373d4a_910c_437d_9fc6_2a3e569ad719(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxFreq = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxFreq) {
                max = l;
                maxFreq = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_0_4fd9ef25_b212_4564_a0e8_081b2008394f(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i : lst) {
            if(map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for(int i : map.keySet()) {
            if(map.get(i) > max && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_0a9b58e4_3cd2_4206_bb8b_54de8dfe78fb(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().filter(e -> e.getValue() > e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_21_d64f5498_9be5_49c4_b9cb_42e9cdf9cb16(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && i > max) {
                max = i;
                maxFreq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_8_67449864_e268_40e3_a353_89c002126c1c(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > max_freq) {
                max = i;
                max_freq = freq;
            }
        }
        if (max_freq < max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_20_6a0ce858_cb00_4a00_a7bc_371fefd13857(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? max : -1;
    }

    
    public static int search_Problem_9_3750061a_b5b3_4f8f_a483_167259b4d890(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > max_freq) {
                max = i;
                max_freq = freq;
            }
        }
        if (max_freq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_5_4f2a5a34_8a19_49ab_a793_6f19847907cb(ArrayList<Integer> lst) {

        int max = -1;
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_608f78a5_b021_49a1_881d_21759ac4431a(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_1_5d9995f5_d56e_44bb_b5bd_15cc057242b3(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_3_d6b46695_ae0f_4bf2_89ea_613b8488368d(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_5b0be0c6_7a6a_4f01_ad05_9bcf756c5e97(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? max : -1;
    }

    
    public static int search_Problem_21_588b3590_e974_46f1_8afd_0bd9f58cfe88(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_7_f8c33cc5_7c29_4773_9b27_933f8457cbee(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        int res = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
            if (maxFreq >= lst.size()) {
                res = max;
                break;
            }
        }
        return res;
    }

    
    public static int search_Problem_14_cc763eb2_78e7_4703_9ca6_ed9402c80bac(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int max_count = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max_count) {
                max_count = entry.getValue();
                max = entry.getKey();
            }
        }
        return max;
    }

    
    public static int search_Problem_9_09a29e15_1849_4f23_99ec_afcce5647d4a(ArrayList<Integer> lst) {
        int maxCount = 0;
        for (int number : lst) {
            if (number > 0) {
                Map<Integer, Integer> counts = new HashMap<Integer, Integer>();
                for (int count : lst) {
                    counts.merge(count, 1L, Integer::sum);
                }
                Integer frequency = counts.get(number);
                if (frequency >= maxCount) {
                    maxCount = frequency;
                }
            }
        }
        return maxCount == 0 ? -1 : maxCount;
    }

    
    public static int search_Problem_21_341de019_4f00_4478_b0bd_1911abc4b998(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq++;
            if(freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_11_17ae3662_124b_41f9_a35b_8da829c38f55(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i = lst.size(); i > 0; i--) {
            if (map.containsKey(i) && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_20_44952c7b_653d_4497_8def_543d537e2a5f(ArrayList<Integer> lst) {
        int max = -1;
        int value = -1;
        for (int l : lst) {
            if (max < 0 || l > max) {
                max = l;
                value = -1;
            }
            else if (value >= 0 && l == value) {
                ++value;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_f519dbb0_1c57_49f3_a1ed_c9c73f1c3e92(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_12_d97e020a_b337_4547_8647_344285c6fd00(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_9_d6961b00_c64b_462d_a118_5255b105b2f1(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int res = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                res = l;
            }
        }
        return res;
    }

    
    public static int search_Problem_23_43a6cd90_22f2_4532_b09d_0525caf2078b(ArrayList<Integer> lst) {

        int max = 0;
        for (Integer i : lst) {
            if (i > max) {
                max = i;
            }
        }
        if (max == 0) {
            return -1;
        }
        int count = 0;
        for (Integer i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_0_0b168592_0e15_4f68_a32b_fc8ac1592a3e(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int maxFreq = 0;
        for (int i : lst) {
            if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_22_a593c4c9_7213_4be3_87a3_cf071b849e81(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for (Integer i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) == max) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_15_54960ba7_6f57_429a_8af7_645e1c2cb9df(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_b8b85adb_923a_49af_a4c1_863fc4dfd198(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_17_58ae444a_eb0a_4470_91cc_216135796b77(ArrayList<Integer> lst) {

        if (lst.size() == 0) {
            return -1;
        }
        int max = 0;
        for (Integer i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (Integer i : lst) {
            if (i == max) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_9_459fe921_e172_41b8_8416_3429e9220c4c(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_1361118a_c032_4e42_a50d_810a440eccc7(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i) {
                maxFreq = i;
                maxVal = i;
            } else if (maxFreq == i) {
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_0_44810787_33a6_40bf_b0c6_d09d764c9d51(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        for (int l : map.keySet()) {
            if (map.get(l) >= l && l > max) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_3_caaac0b7_6203_49ec_84c7_d5fa2370acc9(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_5_2ac433cc_9d94_4f88_8207_97bc3d906dad(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        int currFreq = -1;
        for (int val : lst) {
            if (currFreq == -1) {
                currFreq = val;
            } else if (currFreq == val) {
                currFreq++;
            } else {
                if (currFreq > maxFreq) {
                    maxFreq = currFreq;
                    maxVal = val;
                }
                currFreq = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_13_21d52cb1_0804_4f0c_8ccc_fab82aa80fec(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_17_43a6cd90_22f2_4532_b09d_0525caf2078b(ArrayList<Integer> lst) {

        int max = 0;
        for (Integer i : lst) {
            if (i > max) {
                max = i;
            }
        }
        if (max == 0) {
            return -1;
        }
        int count = 0;
        for (Integer i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_5_21d52cb1_0804_4f0c_8ccc_fab82aa80fec(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_9_96ebf8ed_5f02_47e4_863f_1718dbfc739d(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_13_d8cccfd3_5302_4d97_ad7e_2ed482e6875c(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for(int i : lst) {
            freq = Collections.frequency(lst, i);
            if(freq >= 0) {
                if(freq > max) {
                    max = freq;
                }
            }
        }
        return max;

    }

    
    public static int search_Problem_11_910d2de5_22fe_4b1c_b9ef_317e08fb524d(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1L);
            }
        }
        Integer max = -1L;
        for (Integer l : map.keySet()) {
            if (l > 0 && map.get(l) >= l) {
                max = l;
                break;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_ab6384b3_cdb8_42f1_b531_a2752076f8c4(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (Integer i : lst) {
            if (freq == 0 || freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_6_d38b7080_4cc9_4903_a07c_02ff4b364c5e(ArrayList<Integer> lst) {

        int max = -1;
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_19380f62_9c43_4431_b6f9_a012afbe3934(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_388b62f5_0d8d_477e_bd3e_359bed2f3979(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int count = 0;
        for(Integer i : lst){
            if(i > max){
                max = i;
                count = 1;
            }
            else if(i == max){
                count++;
            }
        }
        if(count >= max){
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_7_815e362d_f17e_47e3_975d_a2903cddc99e(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : lst) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_0_47147db5_b999_4d56_8161_698a49d5f0e2(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_19_a32c15c4_fd3a_4fed_9d43_0330149c117b(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_6_2dff4d84_f0aa_471d_8877_8024d58d4241(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_10_c95feff2_fa70_4a44_b10f_6dc0f08ee1aa(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_15_1dcaea22_6357_4eb9_9c5f_5de3c82f6456(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = Integer.MIN_VALUE;
        for (int i : map.keySet()) {
            if (map.get(i) > i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_3_d68e2ca0_54a5_4ac5_91c1_fd138ce992f7(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxCount = 0;
        for (int val : lst) {
            if (val > 0) {
                int count = lst.stream().filter(i -> i == val).count();
                if (count > maxCount) {
                    maxCount = count;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_22_319a0590_2afc_4659_84b6_0a96a38b8024(ArrayList<Integer> lst) {
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? -1 : max;
    }

    
    public static int search_Problem_18_945f3410_f482_44f2_a612_eaf3c7123a66(ArrayList<Integer> lst) {
        int maxVal = lst.get(0);
        int maxFreq = lst.get(0);
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                maxFreq = val;
            } else if (val == maxVal) {
                maxFreq++;
            }
        }
        return maxFreq > lst.size() ? -1 : maxVal;

    }

    
    public static int search_Problem_19_36b15343_3217_4f13_a6c6_820a6a561a68(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_4_8e4345e3_80db_4f39_97e7_3038f94318d5(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_11_f28556d7_8a85_47c9_9de1_118516293d01(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_4_978babc0_0f3a_4bdc_aefb_f018fb981e99(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_d6938612_66dd_4462_b29d_9457acaa99b6(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_1_dac20943_7cfb_4ff8_9b9d_b17254438c6a(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = Collections.frequency(lst, i);
            } else if (i == max) {
                maxFreq = Math.max(maxFreq, Collections.frequency(lst, i));
            }
        }
        return maxFreq >= max ? max : -1;
    }

    
    public static int search_Problem_18_1dcaea22_6357_4eb9_9c5f_5de3c82f6456(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = Integer.MIN_VALUE;
        for (int i : map.keySet()) {
            if (map.get(i) > i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_11_7c3e4115_1f0a_492c_9765_fa9786e27713(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        int maxKey = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                maxKey = l;
            }
        }
        if (max == 0) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_20_8d5c0bbb_ab00_42c8_8322_256eb6f71fbd(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int res = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                res = l;
            }
        }
        return res;
    }

    
    public static int search_Problem_0_98bfe3ed_f3ce_47d1_8bea_af7d7e64762f(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
            if (map.get(i) > maxFreq) {
                maxFreq = map.get(i);
                max = i;
            }
        }
        if (maxFreq > 1) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_11_96e6545a_c7ca_4b85_8e9d_88c70ab6b6f5(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).orElse(-1);
    }

    
    public static int search_Problem_17_c0d50f57_94ca_462d_a296_466600d47992(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxCount = Collections.frequency(lst, i);
            } else if (i == max) {
                maxCount = Math.max(maxCount, Collections.frequency(lst, i));
            }
        }
        return maxCount >= max ? max : -1;
    }

    
    public static int search_Problem_2_6dd02712_1872_4466_bfb8_cb7117c1bf59(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1L);
            }
        }
        Integer max = -1L;
        for (Integer l : map.keySet()) {
            if (l > 0 && map.get(l) >= l) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_7c3e4115_1f0a_492c_9765_fa9786e27713(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        int maxKey = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                maxKey = l;
            }
        }
        if (max == 0) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_2_bf15a6c4_ccb7_413f_a501_795ecf5456d2(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_22_8f4ac413_1655_42ca_9dcf_89fdbb7a8c7c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_7_4d6c4607_7e26_47d4_84b1_6964d67718dd(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        Integer max = -1;
        Integer maxKey = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                maxKey = l;
            }
        }
        if (maxKey == -1) {
            return -1;
        } else {
            return maxKey;
        }
    }

    
    public static int search_Problem_13_a480b873_3bf9_4c72_a871_1305d1b1bd90(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_1_6ea44e65_c02c_44c2_a843_3905ab5cb9c5(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_4_2eabff35_6818_4914_991f_1cc19c72cdd2(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1L);
            }
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == -1) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_2_dddd1869_c12a_4d3f_8dc9_4fc84742ce5d(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        Integer max = freq.entrySet().stream().max((a, b) -> a.getValue().compareTo(b.getValue())).get().getKey();
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_23_132f983a_6c2c_4a1f_a1bc_48685fd7ed8b(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer num : lst) {
            if (map.containsKey(num)) {
                map.put(num, map.get(num) + 1);
            } else {
                map.put(num, 1);
            }
        }
        for (Integer num : map.keySet()) {
            if (map.get(num) >= num) {
                return num;
            }
        }
        return -1;
    }

    
    public static int search_Problem_24_1452dd64_329f_4746_a7e8_a5b0bbe8a57d(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq >= maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_21_53b28bef_a8f2_4527_ab4d_8eb1c3b8b4cf(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
            if (map.get(i) > maxFreq) {
                maxFreq = map.get(i);
                max = i;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_1_fdbdbebd_bc4e_4bf4_9041_aa13dd322cca(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        for (int i : lst) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_18_2b905ee2_606a_4f80_993e_d6e0aa83c847(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_d0653b8e_478d_40cd_a973_21d0d41cd72b(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int maxCount = 0;
        for(int i : lst) {
            if(i > max) {
                max = i;
                maxCount = 1;
            } else if(i == max) {
                maxCount++;
            }
        }
        if(maxCount >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_11_c2921377_348a_4770_ac1a_875547fa11a0(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_8_c8fdcf0a_47af_4343_80f6_8efee4357270(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        int maxKey = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                maxKey = l;
            }
        }
        return maxKey;
    }

    
    public static int search_Problem_4_d7dcf3f3_85ac_4b71_9157_a3c4aa2b8b00(ArrayList<Integer> lst) {
        List<Integer> sortedLst = lst.stream().sorted().collect(Collectors.toList());
        for (int l : sortedLst) {
            int freq = Collections.frequency(lst, l);
            if (freq >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_1_6a0ce858_cb00_4a00_a7bc_371fefd13857(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? max : -1;
    }

    
    public static int search_Problem_13_3aff0de2_262c_411f_92b6_3cfb1d0ed768(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_1_2f2c4628_7c24_4ec4_b67a_72286aac61e9(ArrayList<Integer> lst) {

        // Your code here
        int max = 0;
        int maxFreq = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
            if (map.get(i) > maxFreq) {
                max = i;
                maxFreq = map.get(i);
            }
        }
        return maxFreq > max ? max : -1;
    }

    
    public static int search_Problem_6_53e25d72_6df1_408a_87f9_6da0fd58b7f6(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_16d2ff36_bf2d_4fae_b90d_499157d738b7(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1 || freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_f45920f4_2c88_40a8_a6d6_d5f2669b5d9c(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        int res = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                res = l;
            }
        }
        return res;
    }

    
    public static int search_Problem_17_c08942a7_56d3_430a_bbcb_8a6ff3d9a909(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_0e151b6d_169b_4938_9845_f503f1e62b1b(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_18_53086303_fb1f_4010_b8f0_656c81a56c9c(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_6c88fbf8_e889_476c_888f_cf6605d17058(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_15_4a241e13_f2d7_4f98_bd40_24257933333a(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_10_bca22f92_9217_4891_8acd_25733f5dc8df(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_9_f19581b8_5030_41c1_8586_d2ea96b71250(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_15_4f035a71_2fb6_4287_9075_16a110eb9a6e(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int max_freq = 0;
        int curr_freq = 0;
        int curr = 0;
        for (int i = 0; i < lst.size(); i++) {
            curr = lst.get(i);
            curr_freq = 0;
            for (int j = 0; j < lst.size(); j++) {
                if (lst.get(j) == curr) {
                    curr_freq++;
                }
            }
            if (curr_freq > max_freq) {
                max_freq = curr_freq;
                max = curr;
            }
        }
        return max;
    }

    
    public static int search_Problem_11_53023a11_61a2_4051_8752_f9465c430028(ArrayList<Integer> lst) {
        int max = -1;
        int freq = 0;
        for (int i : lst) {
            if (freq > 0) {
                if (freq >= i) {
                    freq--;
                }
            }
            else {
                freq = i;
            }
            if (max < 0 || freq > max) {
                max = freq;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_e1a89f95_04eb_442d_bdb2_57d7a270efe3(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxCount = 1;
            } else if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_5_afca5e03_617c_43fd_a858_bf5386d3d993(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_9_f9d39d75_6da6_4e72_a313_c13caced7d86(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_24_54491726_f22c_4b3b_b243_a4587726f393(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxCount = 0;
        for (int val : lst) {
            int count = Collections.frequency(lst, val);
            if (count > maxCount) {
                maxCount = count;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_10_f0bb2e09_aba5_4449_908c_19d46f25341e(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_21_0a755a50_3a6b_4701_aeef_43767dd5ca7e(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_3_7834a80d_3a64_4574_a908_cbac98de0244(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            int count = Collections.frequency(lst, i);
            if (count >= i && count > maxFreq) {
                maxFreq = count;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_6_2d2b6741_1865_4bdb_8d23_cf6e7f5a76d7(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (int l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        int maxCount = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxCount) {
                max = entry.getKey();
                maxCount = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_21_354b07bf_12aa_4fe6_b70a_7bb630692b78(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_6_bd36282c_4ea7_4045_8098_f8537fd72fe5(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i = lst.size(); i > 0; i--) {
            if (map.containsKey(i) && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_8_fbcca621_2f12_41de_b783_e88bd2e442c6(ArrayList<Integer> lst) {

        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : freq.keySet()) {
            if (freq.get(l) > max) {
                max = freq.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_14_0eda4a74_83e7_4ce2_9dc9_7aab7dfc1ab6(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_de5d529e_9fdf_46e7_99d6_9cad8e31443d(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        Integer max = 0;
        Integer maxKey = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_22_9db8f2ac_f0b9_4ecb_b90b_80fbc36f7e6a(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_f84d0b1c_409c_4972_af91_44b5946247a2(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_7a30a30e_2ae1_4a0c_988e_e619999aacef(ArrayList<Integer> lst) {

        // Write your code here.
        // Sort the list in descending order
        // Iterate through the list
        // If the current element is greater than 0 and has a frequency greater than or equal to the value of the 
        // element itself, return the element
        // Else return -1
        Collections.sort(lst, Collections.reverseOrder());
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > 0 && lst.indexOf(lst.get(i)) >= lst.lastIndexOf(lst.get(i))) {
                return lst.get(i);
            }
        }
        return -1;
    }

    
    public static int search_Problem_12_ff957fd4_2307_4277_a354_50d1c8f8cf4f(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (maxFreq < val) maxFreq = val;
            if (maxVal < val) maxVal = val;
        }
        return maxVal;

    }

    
    public static int search_Problem_10_2f2c4628_7c24_4ec4_b67a_72286aac61e9(ArrayList<Integer> lst) {

        // Your code here
        int max = 0;
        int maxFreq = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
            if (map.get(i) > maxFreq) {
                max = i;
                maxFreq = map.get(i);
            }
        }
        return maxFreq > max ? max : -1;
    }

    
    public static int search_Problem_8_d41cb9ae_3307_40b3_8618_4339d9893757(ArrayList<Integer> lst) {
        int max = -1;
        for(int i : lst){
            if( i > 0 ){
                if( (i+max) >= 0 && (i+max) >= i ) max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_12236577_0401_436d_b55e_69423b250446(ArrayList<Integer> lst) {

        // write your code here
        int max = 0;
        int count = 0;
        for(Integer l : lst){
            if(l > max){
                max = l;
                count = 1;
            }
            else if(l == max){
                count++;
            }
        }
        if(count >= max){
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_2_0f686455_41c7_4ac5_938e_89e0ee1ea1cc(ArrayList<Integer> lst) {

        int max = 0;
        int max_count = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                max_count = 1;
            } else if (l == max) {
                max_count++;
            }
        }
        if (max_count >= lst.size()) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_4_412f26ba_b641_4334_9bec_0403666425df(ArrayList<Integer> lst) {
        // TODO: write your code here
        int max =  Math.pow(2, lst.size());
        int freq = -1;
        for(int i : lst) {
            if(freq == -1) {
                freq = 1;
                max = i;
            }
            freq += i;
            if(max > freq) {
                freq = max;
            }
        }
        return freq;
    }

    
    public static int search_Problem_6_313d673f_72c9_461b_886e_f2c45414106d(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_8f4ac413_1655_42ca_9dcf_89fdbb7a8c7c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_15_b9cf0650_86b1_4a00_84ce_93cfd4a76ae8(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int res = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                res = l;
            }
        }
        if (max == 0) {
            return -1;
        }
        return res;
    }

    
    public static int search_Problem_13_2eabff35_6818_4914_991f_1cc19c72cdd2(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1L);
            }
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == -1) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_12_f56c86b4_0e85_4370_93bf_f52786f6c000(ArrayList<Integer> lst) {

        int max = -1;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_0_185ac59e_a2b3_4da3_8655_da24d367de87(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_4d6c4607_7e26_47d4_84b1_6964d67718dd(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        Integer max = -1;
        Integer maxKey = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                maxKey = l;
            }
        }
        if (maxKey == -1) {
            return -1;
        } else {
            return maxKey;
        }
    }

    
    public static int search_Problem_4_5c4f9133_d77e_4f34_a7b3_d268945a5a28(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_23_367c1eaa_e59a_47d9_af52_a85bc171d08e(ArrayList<Integer> lst) {

        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_19_96e6545a_c7ca_4b85_8e9d_88c70ab6b6f5(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).orElse(-1);
    }

    
    public static int search_Problem_16_1cdfeb96_29f7_4a24_8209_5f934b645e0e(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_15b6c366_1447_47d0_883f_5b972d52ce5a(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_54bdc5fb_4c9c_4fac_aa26_2ee3e0a8a061(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_24_f5e589b2_23ca_4442_8c4c_21c044b95708(ArrayList<Integer> lst) {
        Map<Integer, Integer> frequency = new HashMap<>();
        for( int val : lst ){
            if( !frequency.containsKey(val) ){
                frequency.put(val, 0);
            }
            frequency.put(val, frequency.get(val) + 1);
        }
        for( int val : frequency.keySet() ){
            if( frequency.get(val) >= val ){
                return val;
            }
        }
        return -1;
    }

    
    public static int search_Problem_24_c6dfa2f1_16ad_4bb5_807d_392cae09cec7(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        int maxVal = 0;
        for (Integer i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxVal = i;
            }
        }
        if (maxVal > 0) {
            return maxVal;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_5_28a66528_b5c5_4a51_b874_82f91607e7e6(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxVal == -1 || maxVal < i) {
                maxVal = i;
                maxFreq = Collections.frequency(lst, i);
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_15_4c5821cc_fc89_4784_b16c_f6ef0fe22166(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_8_7c3f4e0c_66ef_42c5_9c17_f4205c278b73(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (i > max) {
                max = i;
                freq = freq - 1;
            }
        }
        if (freq >= 0) {
            return max;
        }
        return -1;

    }

    
    public static int search_Problem_24_f67ac6c6_c4f6_4428_9f39_b6561862b179(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_1_ba28d1f2_9c4d_4ca7_ab0c_50b2db24e1b1(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_19_d6938612_66dd_4462_b29d_9457acaa99b6(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_24_4d6c4607_7e26_47d4_84b1_6964d67718dd(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        Integer max = -1;
        Integer maxKey = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                maxKey = l;
            }
        }
        if (maxKey == -1) {
            return -1;
        } else {
            return maxKey;
        }
    }

    
    public static int search_Problem_4_b40f3c74_5865_48df_9079_8a432915e798(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        int max = 0;
        int maxFreq = 0;
        for (int i = 0; i < lst.size(); i++) {
            int num = lst.get(i);
            int freq = 0;
            for (int j = 0; j < lst.size(); j++) {
                if (lst.get(j) == num) {
                    freq++;
                }
            }
            if (freq > maxFreq) {
                max = num;
                maxFreq = freq;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_d7584f7e_0aa2_498b_9728_13476dc93a11(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (maxFreq < val && val > 0) {
                maxFreq = val;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_12_d68e2ca0_54a5_4ac5_91c1_fd138ce992f7(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxCount = 0;
        for (int val : lst) {
            if (val > 0) {
                int count = lst.stream().filter(i -> i == val).count();
                if (count > maxCount) {
                    maxCount = count;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_17_41ac9a7b_218b_405a_8e4e_6fb392644202(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i >= max) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_24_46353ace_b544_4908_9e10_eafbf10af0c8(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (int l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_6_390982cc_eec4_4f4d_8452_8fe3c9b8665c(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        int freq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                freq = 1;
            } else if (i == max) {
                freq++;
            }
        }
        for (int i : lst) {
            if (i == max && freq < i) {
                return -1;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_4254be1d_6589_40e3_a9a0_1772474cb79a(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_c1d55cdd_8455_4da2_9ecc_31f775f9df3f(ArrayList<Integer> lst) {

        // Your code here
        int max = 0;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_9_bdf74c1f_88dc_421d_aa44_91c0a325b68c(ArrayList<Integer> lst) {

        int max = 0;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_19_6545e9db_640a_488c_b4bf_1316bc32978f(ArrayList<Integer> lst) {

        if (lst.size() == 0) {
            return -1;
        }
        int max = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_12236577_0401_436d_b55e_69423b250446(ArrayList<Integer> lst) {

        // write your code here
        int max = 0;
        int count = 0;
        for(Integer l : lst){
            if(l > max){
                max = l;
                count = 1;
            }
            else if(l == max){
                count++;
            }
        }
        if(count >= max){
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_2_2c864c4e_50fc_4ebc_b82d_1d840682f41d(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_0_05c71f8b_76ab_4242_b491_9b95ac8175d6(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_4c5821cc_fc89_4784_b16c_f6ef0fe22166(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_19_4ca050f1_5ae0_4732_a5e3_1a14ae559b28(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_17_c77cfee3_6d22_4b95_913c_974ec2e13eda(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        for (int i = 1; i <= lst.size(); i++) {
            if (map.containsKey(i) && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_16_b690b259_44f3_4fe9_b126_59426e36c954(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        Integer max = -1;
        Integer maxKey = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (maxKey > 0) {
            return maxKey;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_17_7679f6a5_cb5e_4cfe_ad77_2ef6b274fa98(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_9_8857856d_c9b5_4b25_8555_51827fd92012(ArrayList<Integer> lst) {

        // your code here
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        int max = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                max = Math.max(max, entry.getKey());
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_5_fc1eef5c_8903_400d_905f_cceeaa48630d(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxCount) {
                max = entry.getKey();
                maxCount = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_2_d38b7080_4cc9_4903_a07c_02ff4b364c5e(ArrayList<Integer> lst) {

        int max = -1;
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_8a510569_dac3_4dbe_8a22_4a0c8d2600c7(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int max_key = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                max_key = entry.getKey();
            }
        }
        if (max_key > 0) {
            return max_key;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_18_54dc6b84_d8d9_4aac_8a46_3a5c10b331d4(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i : lst) {
            if(map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for(int i : lst) {
            if(map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_18_422e1132_c7ac_4fe5_9b07_0f4373bb5e3c(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (int l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxCount) {
                max = entry.getKey();
                maxCount = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_23_746cd7ab_88fb_4275_8a8f_3c1208aaaa9c(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_22_1a3be9ba_44a0_4a67_8fab_1c4ba2360e24(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l,  1);
            }
        }
        Integer max = Collections.max(map.keySet());
        if (map.get(max) >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_5_9fb9aab3_f34e_4906_915a_3f249d78de9d(ArrayList<Integer> lst) {
        int max_freq = -1;
        int max_num = 0;
        for (int num : lst) {
            int freq = Collections.frequency(lst, num);
            if (freq >= max_freq && freq >= num) {
                max_freq = freq;
                max_num = num;
            }
        }
        if (max_freq < -1) {
            return -1;
        }
        return max_num;
    }

    
    public static int search_Problem_14_192e4f75_0973_4e99_b0b5_5fae962de673(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i) {
                maxFreq = i;
                maxVal = i;
            } else if (maxFreq == i) {
                maxVal = Math.max(maxVal, i);
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_3_2d386dcc_4ac9_4f9c_91b1_47f8240ed7a9(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_3_a46d49d1_a69c_46fb_ba40_8249650c89e2(ArrayList<Integer> lst) {
        int max = -1;
        HashMap<Integer, Integer> hm = new HashMap<Integer, Integer>();
        for (int val : lst) {
            hm.put(val, hm.getOrDefault(val, 0L) + 1);
            if (hm.getOrDefault(val, 0L) > max) {
                max = hm.getOrDefault(val, 0L);
            }
        }
        return max;
    }

    
    public static int search_Problem_22_6669a8e6_6402_406c_ae72_2ade63dc4fa7(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_23_6f20ffa2_c6bb_4b6e_bb19_ae5f09986472(ArrayList<Integer> lst) {
        int max = 0;
        Map<Integer, Integer> freqs = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (freqs.get(i) == null) {
                freqs.put(i, 1);
            } else {
                freqs.put(i, freqs.get(i) + 1);
            }
        }
        for (Map.Entry<Integer, Integer> e : freqs.entrySet()) {
            if (e.getValue() >= max) {
                max = e.getValue();
            }
        }
        return max == 0 ? -1 :  max;
    }

    
    public static int search_Problem_1_608f78a5_b021_49a1_881d_21759ac4431a(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_17_f7998e71_317b_452d_871a_99ace61717ce(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i : lst) {
            if(map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            }
            else {
                map.put(i, 1);
            }
        }
        int max = -1;
        for(int i : map.keySet()) {
            if(map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_8_56d90851_d68a_4c47_8785_1555308d7b2f(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (int num : lst) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        int max = -1;
        int maxFreq = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxFreq) {
                max = entry.getKey();
                maxFreq = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_10_dc2bc2a5_5125_4c8d_bbca_0ec45772525f(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > maxFreq) {
                maxFreq = freq;
                max = i;
            }
        }
        return maxFreq >= max ? max : -1;
    }

    
    public static int search_Problem_22_45153bea_20d3_4db7_8c17_0fcc1584ea03(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_1_9a161387_41dd_41fd_b585_2a4a8861a587(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        for(Integer l : lst){
            if(l > max){
                max = l;
            }
        }
        if(max == -1){
            return -1;
        }
        int count = 0;
        for(Integer l : lst){
            if(l == max){
                count++;
            }
        }
        if(count >= 2){
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_0_38bc859c_559e_4d2a_8067_106d9fead4d3(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_41e4c49c_1032_475d_8e45_74d98e9a71cb(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_10_6a2f4881_96de_4b2b_a147_43d27bd07968(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_3750061a_b5b3_4f8f_a483_167259b4d890(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > max_freq) {
                max = i;
                max_freq = freq;
            }
        }
        if (max_freq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_2_77c5e688_8d9f_4446_b71f_afad034036e8(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) == max) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_9_5a42e005_9770_4c26_a831_409bacb4429c(ArrayList<Integer> lst) {

        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_2_079e386e_2d6e_4e3a_8f2a_d76ecdc65225(ArrayList<Integer> lst) {
        int maxValue = -1;
        int maxCount = 0;
        for (Integer l : lst) {
            int count = Collections.frequency(lst, l);
            if (count > maxCount) {
                maxCount = count;
                maxValue = l;
            }
        }
        return maxValue;
    }

    
    public static int search_Problem_4_79265086_4662_4c32_b662_d8abff490dd1(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_10_f5b8baa5_499d_4aa3_b66e_5d771b7ec197(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= lst.size()) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_10_24597813_f98a_4248_a690_73a04b797f06(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_12_d9347604_7ae9_4699_a95b_5e3d35df81d8(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int max_freq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                max_freq = 1;
            } else if (l == max) {
                max_freq++;
            }
        }
        if (max_freq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_4_736ea214_2690_4314_8172_0156d2213870(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_6_3595d5e4_acfb_45db_9df4_69276cd8efad(ArrayList<Integer> lst) {
        int maxVal = -1;
        int freq = -1;
        for(Integer val : lst) {
            freq = Collections.frequency(lst, val);
            if(freq >= val) break;
            maxVal = val;
        }
        return maxVal;
    }

    
    public static int search_Problem_24_c0194ba9_53fd_4b61_8da6_90f2239abcac(ArrayList<Integer> lst) {
        int max = 0;
        int maxFreq = -1;
        for(int i : lst) {
            if(i>0) {
                int freq = Collections.frequency(lst, i);
                if(freq>maxFreq) {
                    max = i;
                    maxFreq = freq;
                }
            }
        }
        return max;

    }

    
    public static int search_Problem_19_a480b873_3bf9_4c72_a871_1305d1b1bd90(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_0_80e3429c_b409_45a0_90a7_5d40bdfee02e(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                return entry.getKey();
            }
        }
        return -1;
    }

    
    public static int search_Problem_5_5c4f9133_d77e_4f34_a7b3_d268945a5a28(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_19_62558c05_9e82_4250_891f_058187f4ccde(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer num : lst) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        return map.entrySet().stream().filter(entry -> entry.getValue() >= entry.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_6_9e0198d7_112c_4157_83be_870f9b2ad740(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                if (maxFreq < val) maxFreq = val;
                if (maxVal < val) maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_2_c865a948_8909_46e9_8310_d5d8f06486a3(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_10_878dbdd9_26ab_4d52_9fb8_9097d5bcf531(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        for (Integer i : lst) {
            if (i > 0 && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_19_2ca09ad9_5ad0_43fa_8c36_3fa1b0d12fef(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int max_count = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max_count) {
                max_count = entry.getValue();
                max = entry.getKey();
            }
        }
        if (max_count < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_0_cc5099b2_2c32_4401_a38a_5a5f1068c6c8(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_15_23904fa1_cbc0_49f0_aec8_239992259324(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_22_366bb190_a667_41ed_8fde_ef13418ad335(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_9_c5bf7352_d040_485f_91c1_f2424e572a04(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_23_e1ec3170_86ec_4e3a_be5d_be7a685191d5(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_19_d16fe193_2bac_48c5_b013_bdd4c58c3ca2(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_e7e11b40_4fce_4700_893a_e9fd742e56f9(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_194f5d5c_8c22_4f43_8bc6_850907224acc(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_10_5cabecc6_e1f8_4e9f_a3c7_4d270c96f3a2(ArrayList<Integer> lst) {
        int result = 0;
        int max;
        int temp;
        for(int i : lst) {
            temp = i;
            max = i;
            for(int j : lst) {
                if(j == temp) {
                    max = j;
                    break;
                }
            }
            if(!lst.contains(max)) {
                result = -1;
                break;
            }
        }
        if(result > 0 && !lst.contains(result)) {
            result = -1;
        }
        return result;
    }

    
    public static int search_Problem_15_d7584f7e_0aa2_498b_9728_13476dc93a11(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (maxFreq < val && val > 0) {
                maxFreq = val;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_20_3c16cef9_2632_4ab9_8c7d_9d122965ee4b(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_8_b2b1bb5c_bf69_482f_a80b_8181c34c8f78(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_d0b72e0e_b8cc_469a_bd7d_e3828549eee5(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_8_c27b58dc_18ab_4bb5_86d7_119a78520ce9(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_13_caaac0b7_6203_49ec_84c7_d5fa2370acc9(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_4_2752fbb0_4e01_4dfd_8201_2909f9da3e11(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_9_7f684e03_d035_4e49_941c_27089ee59d2e(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxCount) {
                max = entry.getKey();
                maxCount = entry.getValue();
            }
        }
        if (maxCount >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_7_f3bf964c_cac9_460b_9d06_bfbec1ea90c1(ArrayList<Integer> lst) {
        int max = -1;
        int freq = 0;
        for (int i : lst) {
            freq += i;
            if (freq > max) {
                max = freq;
            }
        }
        return max;

    }

    
    public static int search_Problem_2_f28556d7_8a85_47c9_9de1_118516293d01(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_24_d022dfc3_9c28_4c13_bf21_c4120b93fae8(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        int maxVal = 0;
        for (int l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
                maxVal = l;
            } else if (l == max) {
                maxFreq++;
                if (maxFreq > maxFreq) {
                    maxVal = l;
                }
            }
        }
        if (maxVal == 0) {
            return -1;
        }
        return maxVal;
    }

    
    public static int search_Problem_20_ddbc52b5_f507_4136_a9c4_c54525cbd4dd(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int max_count = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                max_count = 1;
            } else if (l == max) {
                max_count++;
            }
        }
        if (max_count == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_12_8545fe00_41f8_4560_840f_e2742e79c4ad(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        if (max == -1) {
            return -1;
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_4_8524091b_f699_4449_b40a_36bb4d5c8dd7(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int max_index = -1;
        for(int i = 0; i < lst.size(); i++) {
            if(lst.get(i) > max) {
                max = lst.get(i);
                max_index = i;
            }
        }
        if(max == 0) {
            return -1;
        }
        int count = 0;
        for(int i = 0; i < lst.size(); i++) {
            if(lst.get(i) == max) {
                count++;
            }
        }
        if(count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_21_f33ca2cc_cee3_402e_9ae1_c7f309b495ae(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_d659f39c_3515_446a_9f0c_821823a200c3(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            if (freq == 0 || freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_10_b2c715bc_b0ad_47ae_956b_20bf9af1a071(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_8fd5f2c1_4b9a_443c_a21b_071e2fdc5825(ArrayList<Integer> lst) {
        int val = -1;
        int maxV = -1;
        for (int num : lst) {
            if (num < val) val = num;
            else if (num > maxV) maxV = num;
        }
        return maxV;
    }

    
    public static int search_Problem_2_608f78a5_b021_49a1_881d_21759ac4431a(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_19_3e8a3c5d_b761_4e5f_9f95_58f9f48f65a3(ArrayList<Integer> lst) {
        List<Integer> sortedLst = lst.stream().sorted().collect(Collectors.toList());
        
        int first = sortedLst.get(0); // first value
        int max = first;
        int cnt = 0;
        
        for (int i = 0; i < sortedLst.size(); i++) {
            if (sortedLst.get(i) > 0 && sortedLst.get(i) <= max) {
                cnt++;
                max = sortedLst.get(i);
            }
        }
        
        if (cnt >= sortedLst.size() || max <= 0) {
            return -1L;
        }
        
        for (int i = 0; i < sortedLst.size(); i++) {
            if (sortedLst.get(i) > 0 && sortedLst.get(i) == max) {
                return i;
            }
        }
        
        return -1L;
    }

    
    public static int search_Problem_1_c1d55cdd_8455_4da2_9ecc_31f775f9df3f(ArrayList<Integer> lst) {

        // Your code here
        int max = 0;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_20_ac3743e7_7b1e_4cd8_8ee7_c64471278284(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_13_6a2f4881_96de_4b2b_a147_43d27bd07968(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_11_7518e306_e88f_42ff_9f68_0aa5e40e4f97(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer i : lst) {
            if (i > max) {
                max = i;
            }
            if (lst.stream().filter(j -> j == i).count() > maxFreq) {
                maxFreq = lst.stream().filter(j -> j == i).count();
            }
        }
        if (maxFreq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_11_b3d5d24f_a7dd_4d6e_a2c3_ae058ab213ce(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_9_99109fd8_3926_4101_afdf_e5eb40128a46(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                return entry.getKey();
            }
        }
        return -1;
    }

    
    public static int search_Problem_24_f3bf964c_cac9_460b_9d06_bfbec1ea90c1(ArrayList<Integer> lst) {
        int max = -1;
        int freq = 0;
        for (int i : lst) {
            freq += i;
            if (freq > max) {
                max = freq;
            }
        }
        return max;

    }

    
    public static int search_Problem_0_5dda8a0c_d94d_4ca0_ad8a_7bece12d2252(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = lst.stream().filter(x -> x == val).count();
                if(freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_17_fbdd92d5_720e_4f1f_a89c_c4e966cc0d82(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_7_1579013d_1449_480c_b590_98ba4e590b58(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_8_3473c74f_3484_4b8b_a0b6_2e82f068dbd0(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxCount) {
                max = l;
                maxCount = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_1_96e6545a_c7ca_4b85_8e9d_88c70ab6b6f5(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).orElse(-1);
    }

    
    public static int search_Problem_16_f37189de_7136_4551_8cb2_958a01e2665e(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_15_6f0f7490_0928_4f6a_a70e_b21ecf33d90e(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_11_ab154e07_a3f7_48f9_8248_adddb4b64591(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int i : lst) {
            int freq = Collections.frequency(lst, i);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_24_262273fd_c4df_45c9_b386_3c421d4cc978(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        int max = 0;
        int count = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > max) {
                max = lst.get(i);
                count = 1;
            } else if (lst.get(i) == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_23_1ade8355_3cd2_43be_92de_9052d03c4317(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_5e79698c_333c_4a00_b93b_9ef2a3a69fae(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxCount = 1;
            } else if (i == max) {
                maxCount++;
            }
        }
        for (int i : lst) {
            if (i == max && maxCount >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_23_9be68ec5_0ce5_48dd_aa8c_986716611188(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for (Integer i : map.keySet()) {
            if (map.get(i) > map.get(max) && map.get(i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_1f431f5d_5563_4792_b201_0d6315f4e178(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        int max = lst.get(0);
        int count = 1;
        for (int i = 1; i < lst.size(); i++) {
            if (lst.get(i) == max) {
                count++;
            } else if (lst.get(i) > max) {
                max = lst.get(i);
                count = 1;
            }
        }
        if (count >= max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_22_a80b8f07_834d_488c_9342_d6198b7f2ec3(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) == max) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_20_0928bed2_55d8_4a21_97ea_a31884b3df5e(ArrayList<Integer> lst) {

        // Your code here
        int max = 0;
        int maxFreq = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for(int i : lst) {
            if(map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
            if(map.get(i) > maxFreq) {
                maxFreq = map.get(i);
                max = i;
            }
        }
        if(maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_24_2dff4d84_f0aa_471d_8877_8024d58d4241(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_20_5a25abac_0d57_498a_bcb7_de0ced493309(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_fae87fdf_e03d_43b2_bc85_48a054a4ea1f(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq == i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq > i && maxVal == i) {
                maxFreq = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_2_287a1721_1bbd_4c4f_940f_ec6d0a18802e(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i = 1; i < lst.size(); i++) {
            if (map.containsKey(i) && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_7_3c2ba5d8_6a7b_44b2_a0f3_a751277ac805(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                if(val > maxVal) {
                    maxVal = val;
                    maxFreq = lst.get(lst.indexOf(val));
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_11_f7939473_4d73_4065_bbe6_b70b5b23a22e(ArrayList<Integer> lst) {

        int max = -1;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_21_9e47b236_3907_4993_94f8_33e8a1a1b8a4(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_c158e614_67ca_4230_8a79_fa034e92e59d(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            if (freq.containsKey(l)) {
                freq.put(l, freq.get(l) + 1);
            } else {
                freq.put(l, 1);
            }
        }
        int max = -1;
        int maxFreq = 0;
        for (Integer l : freq.keySet()) {
            if (freq.get(l) > maxFreq) {
                max = l;
                maxFreq = freq.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_14_4bfc7632_cf07_47a2_a833_34ea7fcdc216(ArrayList<Integer> lst) {

        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                max = entry.getKey();
            }
        }
        return max;
    }

    
    public static int search_Problem_7_c77cfee3_6d22_4b95_913c_974ec2e13eda(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        for (int i = 1; i <= lst.size(); i++) {
            if (map.containsKey(i) && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_21_e47cdf1d_a36e_4e85_9ce8_24b6f4c99cd3(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int max_count = 0;
        for(int i=0;i<lst.size();i++){
            if(lst.get(i)>max){
                max = lst.get(i);
                max_count = 1;
            }
            else if(lst.get(i)==max){
                max_count++;
            }
        }
        if(max_count>=max){
            return max;
        }
        else{
            return -1;
        }
    }

    
    public static int search_Problem_19_b03c9704_2c46_4a30_935a_372035d3d771(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? max : -1;
    }

    
    public static int search_Problem_1_49578c7a_cf0c_4faa_83f9_8018efa6c347(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_10_d16fe193_2bac_48c5_b013_bdd4c58c3ca2(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_3_de5d529e_9fdf_46e7_99d6_9cad8e31443d(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        Integer max = 0;
        Integer maxKey = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_8_d640f288_1b3e_4d66_a7b2_62d7422e430f(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        Integer max = freq.keySet().stream().max(Comparator.comparing(freq::get)).get();
        if (freq.get(max) >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_16_184d9555_b5dd_4c06_8fab_80a84f3de604(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > max_freq) {
                max = i;
                max_freq = freq;
            }
        }
        return max_freq >= max ? max : -1;
    }

    
    public static int search_Problem_21_815e362d_f17e_47e3_975d_a2903cddc99e(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : lst) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_18_1a5ff06d_da65_41b2_974c_b8d626938848(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_17_102b8167_0e69_44a5_ac61_670403b60de3(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxCount = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxCount = 1;
            } else if (l == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_4_dbfe8fe3_bac5_4c59_9bf2_1867501e2092(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_20_6db59539_cc6e_404b_8c07_7dff820f79e0(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (max < 0 || maxFreq < 0 || i < 0 || i > max) {
                max = i;
                maxFreq = 1;
            } else if (maxFreq < i) {
                max = i;
                maxFreq = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_18_b4d18c45_b4ac_4bd4_a8d0_0ecc5ea17e8a(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq += i;
            if(freq > max) {
                max = freq;
            }
        }
        return max;

    }

    
    public static int search_Problem_24_24fa5aa5_b2b3_4381_b653_f344fdc9f3f6(ArrayList<Integer> lst) {
        Map<Integer, Integer> map = new TreeMap<>();
        lst.stream().forEach(e -> map.put(new Integer(e), map.getOrDefault(new Integer(e), 0) + 1));
        boolean exists = False;
        for (Integer e : map.keySet()) {
            if (map.get(e) >= map.get(new Integer(e))) {
                exists = True;
                return e;
            }
        }
        if (exists) {
            return -1;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_14_553b982f_e39f_4f57_b88f_9e717eb4d935(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            int count = Collections.frequency(lst, i);
            if (count > maxCount) {
                max = i;
                maxCount = count;
            }
        }
        return maxCount >= max ? max : -1;
    }

    
    public static int search_Problem_9_ade86f90_b9c2_4b6d_9224_67a74f52122d(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_e7c3b5fc_af5a_4acb_83c0_939b0750ecc4(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? max : -1;
    }

    
    public static int search_Problem_0_63c7680d_63d9_4547_a71d_d1febfcfacf8(ArrayList<Integer> lst) {
        // Your code here
        return -1;
    }

    
    public static int search_Problem_2_d74d9d4c_bc0f_41f9_9439_b2fc86955ad1(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_8_d9f285b2_0c8b_4bef_bb15_908ddbce7c24(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                max_freq = Collections.frequency(lst, i);
            }
        }
        if (max_freq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_21_36c780b1_f15c_4cbd_9600_95a55bd48700(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq++;
            if(freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_11_1f415932_de75_4114_8174_9fdb4e47e66e(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        if (max == 0) {
            return -1;
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= 2) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_19_ca9955dc_12ef_47d5_b925_57e4b26296f1(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            Integer count = map.get(l);
            if (count == null) {
                map.put(l, 1);
            } else {
                map.put(l, count + 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_3_12f8fb30_1b07_49d7_b530_622e50ce2cea(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_21_11507560_26e7_4dae_9648_155379cbc2da(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l,  1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_24_6a2f4881_96de_4b2b_a147_43d27bd07968(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_dbd11b32_c28c_4414_b698_92c09a768095(ArrayList<Integer> lst) {
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? -1 : max;
    }

    
    public static int search_Problem_23_f1a3ffbb_3efd_406b_8e9e_575b480d42b7(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_16_33109515_e93c_4c5d_b0a1_c3a2dbf94bbb(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_10_366bb190_a667_41ed_8fde_ef13418ad335(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_95fe7d72_5b98_4a2d_8a79_885f491b2be5(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_17_ab04337d_dbed_4239_85ca_813baa73e62f(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_7_efcf3711_4144_4d55_be5b_c59cef68a378(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (int l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        for (int l : lst) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_6_53023a11_61a2_4051_8752_f9465c430028(ArrayList<Integer> lst) {
        int max = -1;
        int freq = 0;
        for (int i : lst) {
            if (freq > 0) {
                if (freq >= i) {
                    freq--;
                }
            }
            else {
                freq = i;
            }
            if (max < 0 || freq > max) {
                max = freq;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_4f170531_8429_4e57_bbf9_26df9c2060c9(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxKey = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                maxKey = l;
            }
        }
        return maxKey;
    }

    
    public static int search_Problem_7_c9a58673_1552_4dbb_aa35_e50239d00268(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_bfb2dd93_f2c0_4c9a_b17b_08f27ce15dcc(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max && Collections.frequency(lst, i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_f77b1e34_3bbb_4322_8a73_5d2b63878856(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        int maxKey = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                maxKey = l;
            }
        }
        return maxKey;
    }

    
    public static int search_Problem_0_2c362672_7c03_4111_be79_40c6adbf5391(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_96f70579_66cb_4abc_bbd0_089ccfbcf1f9(ArrayList<Integer> lst) {
        int max = -1;
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1L);
            }
        }
        for (Integer i : lst) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_d0653b8e_478d_40cd_a973_21d0d41cd72b(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int maxCount = 0;
        for(int i : lst) {
            if(i > max) {
                max = i;
                maxCount = 1;
            } else if(i == max) {
                maxCount++;
            }
        }
        if(maxCount >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_21_8d669a90_440d_4a83_a3bb_96c55d024d8e(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                return entry.getKey();
            }
        }
        return -1;
    }

    
    public static int search_Problem_13_ca9955dc_12ef_47d5_b925_57e4b26296f1(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            Integer count = map.get(l);
            if (count == null) {
                map.put(l, 1);
            } else {
                map.put(l, count + 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_6_651d625e_3138_47fb_8d7c_84cd129d98e2(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (lst.stream().filter(x -> x == i).count() >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_8_53e384db_a8a8_4e20_afed_2f0f70a452c8(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        int currFreq = 0;
        int curr = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                currFreq = 1;
            } else if (l == max) {
                currFreq++;
            }
            if (currFreq > maxFreq) {
                maxFreq = currFreq;
                curr = max;
            }
        }
        return curr;
    }

    
    public static int search_Problem_6_d640f288_1b3e_4d66_a7b2_62d7422e430f(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        Integer max = freq.keySet().stream().max(Comparator.comparing(freq::get)).get();
        if (freq.get(max) >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_1_4a241e13_f2d7_4f98_bd40_24257933333a(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_8_a569d824_7d7b_4532_bd11_1d608635859d(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max && Collections.frequency(lst, i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_fae87fdf_e03d_43b2_bc85_48a054a4ea1f(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq == i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq > i && maxVal == i) {
                maxFreq = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_3_083749b3_cdff_4705_b138_b3f0fbfa82ee(ArrayList<Integer> lst) {
        Integer max = -1;
        int counter = 0;
        for (Integer value : lst) {
            if (value > max) {
                counter = 0;
                max = value;
            }
            else if (value == max) {
                counter++;
            }
            else if (counter > 0) {
                return -1;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_77288631_aae5_47d5_b813_7ef37c92030d(ArrayList<Integer> lst) {
        if(lst.size() < 1) return -1;
        
        HashMap<Integer,Integer> hm = new HashMap<>();
        
        for(Integer i : lst)
            if(hm.containsKey(i)) {
                hm.put(i,hm.get(i) + 1);
            } else {
                hm.put(i, 1);
            }
        
        for(Integer i : lst) {
            if(hm.get(i) > 0) return i;
        }
        
        return -1;
    }

    
    public static int search_Problem_16_9d19affd_f562_4c99_bd6b_aa43ff22cd58(ArrayList<Integer> lst) {
        if (lst.size() == 0) {
            return -1;
        }
        Collections.sort(lst);
        int result = lst.get(0);
        int max = lst.get(0);
        for (int i : lst) {
            if (i > max) {
                max = i;
                result = i;
            } else if (i > result) {
                result = i;
            }
        }
        return result;
    }

    
    public static int search_Problem_1_a280d769_5bb8_4031_8d73_549289345510(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        Integer max = freq.keySet().stream().max(Comparator.comparing(freq::get)).get();
        if (freq.get(max) >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_9_3c2ba5d8_6a7b_44b2_a0f3_a751277ac805(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                if(val > maxVal) {
                    maxVal = val;
                    maxFreq = lst.get(lst.indexOf(val));
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_6_6152d800_ef67_4e73_85cf_28fb6323eb1b(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq += i;
            if (freq > max) {
                max = freq;
            }
        }
        return max > 0 ? max : -1;

    }

    
    public static int search_Problem_12_764d7356_6adf_4f0c_ab90_498c24c6df0f(ArrayList<Integer> lst) {
        int max = -1;
        int freq = 0;
        for (int i : lst) {
            freq += i;
            if (freq > max) {
                max = freq;
            }
        }
        return max;

    }

    
    public static int search_Problem_21_42efd88d_655d_4cad_b068_88364e957026(ArrayList<Integer> lst) {
        // Your code here
        return -1;
    }

    
    public static int search_Problem_9_7c3e4115_1f0a_492c_9765_fa9786e27713(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        int maxKey = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                maxKey = l;
            }
        }
        if (max == 0) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_21_256d22df_0c9f_4262_85be_ca79310258aa(ArrayList<Integer> lst) {

        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_244060d3_5b78_4d86_8687_f275f392833c(ArrayList<Integer> lst) {
        if (lst.isEmpty()) return -1; // no such value
        int maxVal = -1;
        int curVal = lst.get(0);
        int maxCount = 0;
        for (int i = 1; i < lst.size(); i++) {
            curVal = lst.get(i);
            if (curVal == -1) return -1; // no such value
            int cnt = lst.get(i).intValue();
            if (cnt > maxCount) {
                maxVal = curVal;
                maxCount = cnt;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_2_c6dfa2f1_16ad_4bb5_807d_392cae09cec7(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        int maxVal = 0;
        for (Integer i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxVal = i;
            }
        }
        if (maxVal > 0) {
            return maxVal;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_9_422e1132_c7ac_4fe5_9b07_0f4373bb5e3c(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (int l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxCount) {
                max = entry.getKey();
                maxCount = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_4_2d4e15bd_de63_41b2_98fa_b8f75008eb08(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_c1d55cdd_8455_4da2_9ecc_31f775f9df3f(ArrayList<Integer> lst) {

        // Your code here
        int max = 0;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_10_ddbc52b5_f507_4136_a9c4_c54525cbd4dd(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int max_count = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                max_count = 1;
            } else if (l == max) {
                max_count++;
            }
        }
        if (max_count == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_17_44952c7b_653d_4497_8def_543d537e2a5f(ArrayList<Integer> lst) {
        int max = -1;
        int value = -1;
        for (int l : lst) {
            if (max < 0 || l > max) {
                max = l;
                value = -1;
            }
            else if (value >= 0 && l == value) {
                ++value;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_a151f385_30cd_432c_97ba_ed2840ab3a90(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_3d553226_340e_43b5_bb76_5dc107e7af12(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_18_8f4ac413_1655_42ca_9dcf_89fdbb7a8c7c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_21_41e230b5_604b_466d_9588_bd307b47ae71(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            } else if (val == maxVal) {
                maxFreq++;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_20_6114915a_0349_43b3_8277_0048ad384ca0(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            if (freq > i) {
                max = i;
                freq = i;
            } else if (freq == i) {
                freq++;
            }
        }
        return max;

    }

    
    public static int search_Problem_4_745a129d_4116_42cb_be7c_705ade38b03b(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            int count = Collections.frequency(lst, i);
            if (count > maxCount) {
                maxCount = count;
                max = i;
            }
        }
        return maxCount >= max ? max : -1;
    }

    
    public static int search_Problem_12_fcc329f8_7439_4278_9c33_485314603d7e(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_16_b1d41f5c_1f82_4bbb_a4d0_633c3dc854f3(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_b3dcaee2_f724_43ee_b51e_3512c16eef53(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_13_54dc6b84_d8d9_4aac_8a46_3a5c10b331d4(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i : lst) {
            if(map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for(int i : lst) {
            if(map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_a003edd3_51c6_44a9_b2ce_4dee2c07da85(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = lst.stream().filter(v -> v == val).count();
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_23_75172c87_1316_4a96_b313_e86bee55a46b(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxCount = 0;
        for (int i : lst) {
            if (maxCount < i) {
                maxCount = i;
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_16_1a629829_e4f4_400f_b412_b3d43d8cc4b2(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max == 0 ? -1 : max;
    }

    
    public static int search_Problem_21_6322ca9f_e758_4f31_94fd_59ebf71029e4(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for(int i : lst) {
            if(i > max) {
                max = i;
                maxFreq = 1;
            } else if(i == max) {
                maxFreq++;
            }
        }
        if(maxFreq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_13_38b6050a_75f1_491e_83ff_1ca314d3e5c6(ArrayList<Integer> lst) {

        // Write your code here
        return lst.stream().max(Comparator.comparing(x -> x, Comparator.reverseOrder())).get();
    }

    
    public static int search_Problem_13_1903709f_5399_4830_9bfc_4562468ceeb1(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_2ff1c5cb_53fa_418a_9d36_0392ef6a6cae(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            int freq = lst.stream().filter(j -> j == i).count();
            if (freq >= maxFreq) {
                max = i;
                maxFreq = freq;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_d0b72e0e_b8cc_469a_bd7d_e3828549eee5(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_cac4025d_fb2c_48fc_a932_7be72feec2ad(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_43fed902_f4ad_42a6_b935_82237ff13d35(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_2_6322ca9f_e758_4f31_94fd_59ebf71029e4(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for(int i : lst) {
            if(i > max) {
                max = i;
                maxFreq = 1;
            } else if(i == max) {
                maxFreq++;
            }
        }
        if(maxFreq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_12_24c5dd80_8386_4ee1_9f6f_454049e7515f(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : freq.keySet()) {
            if (freq.get(l) > max) {
                max = freq.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_1_bda330ec_6b9c_46de_83a9_3eb0b47139f1(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i : lst) {
            if(map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = -1;
        for(int i : map.keySet()) {
            if(map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_4f2a5a34_8a19_49ab_a793_6f19847907cb(ArrayList<Integer> lst) {

        int max = -1;
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_81e33176_a77a_48db_988f_f28998296c9e(ArrayList<Integer> lst) {
        int max = 0; // The greatest value that appears in the array
        int maxFreq = Integer.MIN_VALUE; // The frequency of the max value
        for (Integer val: lst) {
            int freq = lst.indexOf(val); // Get the frequency of the value
            if (freq > maxFreq) {
                max = val;
                maxFreq = freq;
            } else if (freq == maxFreq) {
                max = Math.max(max, val);
            }
        }
        return max;
    }

    
    public static int search_Problem_22_23c11b38_721e_4ceb_88c0_448d8c1ece27(ArrayList<Integer> lst) {

        // Write your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int l : lst) {
            if(map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for(int l : map.keySet()) {
            if(l > max && map.get(l) >= l) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_5d9995f5_d56e_44bb_b5bd_15cc057242b3(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_834b47d3_fa4d_4824_9c64_ca8a3c0e50c3(ArrayList<Integer> lst) {
        ArrayList<Integer> copy = new ArrayList<>();
        int maxIndex = -1;
        for (int num : lst) {
            if (!copy.contains(num)) {
                copy.add(num);
                if (copy.size() > maxIndex) {
                    maxIndex = copy.size() - 1;
                }
            }
        }
        for (int num : copy) {
            if (num > 0) {
                int freq = lst.stream().filter(n -> n == num).count();
                if (freq >= num) {
                    return num;
                }
            }
        }
        return -1;
    }

    
    public static int search_Problem_2_229a13bd_7617_43eb_a6a2_e1acc26f4b49(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_81197c84_773c_42d8_bbd5_0f9988bb0255(ArrayList<Integer> lst) {
        ArrayList<Integer> newList = new ArrayList<Integer>(lst);
        if (newList.size() == 0) {
            return -1;
        }
        Set<Integer> unique = new HashSet<Integer>(newList);
        unique.remove(-1);
        if (unique.size() > 1) {
            return -1;
        }
        return newList.get(0);
    }

    
    public static int search_Problem_8_1e3145ff_a160_4db6_863b_c8053b5983b0(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxVal == -1 || maxFreq < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq == i) {
                maxFreq++;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_20_1e3145ff_a160_4db6_863b_c8053b5983b0(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxVal == -1 || maxFreq < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq == i) {
                maxFreq++;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_9_db03fc5f_cfd1_448d_91aa_d15a80adf926(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        int currFreq = -1;
        for (int val : lst) {
            currFreq = Collections.frequency(lst, val);
            if (currFreq > maxFreq) {
                maxFreq = currFreq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_20_b03c9704_2c46_4a30_935a_372035d3d771(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? max : -1;
    }

    
    public static int search_Problem_12_f28556d7_8a85_47c9_9de1_118516293d01(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_2_4e6eba07_392e_4e3e_aec0_886279fdd256(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                if (maxVal < 0 || maxVal > val) {
                    maxVal = val;
                    maxFreq = val;
                }
                else {
                    maxFreq++;
                }
            }
        }
        return maxFreq > maxVal ? maxVal : -1;

    }

    
    public static int search_Problem_5_cfc5e22a_afec_432c_86bd_b5f973ccd322(ArrayList<Integer> lst) {

        int max = 0;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_21_28a66528_b5c5_4a51_b874_82f91607e7e6(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxVal == -1 || maxVal < i) {
                maxVal = i;
                maxFreq = Collections.frequency(lst, i);
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_24_16c89da2_7185_424f_8dd3_37721556e448(ArrayList<Integer> lst) {

        // Write your code here.
        // return -1;
        return lst.stream().max(Comparator.comparing(x -> x, Comparator.reverseOrder())).get();
    }

    
    public static int search_Problem_5_b4654604_7861_4661_8201_d0bef279bea5(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (i > max) {
                max = i;
                freq = freq - 1;
            }
        }
        if (freq >= 0) {
            return max;
        } else {
            return -1;
        }

    }

    
    public static int search_Problem_22_b19e6896_f369_47ef_ad10_7511d9a1c04a(ArrayList<Integer> lst) {

        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_9_3d845f12_60c1_403c_936e_36676a67b2a1(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1 || freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_24_666acf8f_6c87_422c_9773_34b934e4ee35(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == -1) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_23_c77cfee3_6d22_4b95_913c_974ec2e13eda(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        for (int i = 1; i <= lst.size(); i++) {
            if (map.containsKey(i) && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_22_ae104091_9cb6_42d6_955b_af81059a964c(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_22f1c45b_60b1_4276_9ede_02fa2ef48827(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq > lst.size()? -1 : max;
    }

    
    public static int search_Problem_23_afca5e03_617c_43fd_a858_bf5386d3d993(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_17_ba418f86_5ea9_4b98_8f34_a7ca21e10d9b(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_7_1d604aa0_198b_424d_97cf_314dbaf8e7d5(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_5d9995f5_d56e_44bb_b5bd_15cc057242b3(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_eedb0bf0_8312_4959_97f0_1f9d9b01ba99(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max && Collections.frequency(lst, i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_c35640fa_aa3f_48d6_a057_91adab4104c2(ArrayList<Integer> lst) {

        if (lst.size() == 0) return -1;
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (int i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxKey = i;
            }
        }
        return maxKey;
    }

    
    public static int search_Problem_6_28ccfdc0_cef2_41d6_9ccb_fac153b98d80(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for(int i : lst) {
            if(map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for(int i : map.keySet()) {
            if(map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_162f887c_88b0_4c32_84a5_fba020d0563e(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_9_319a0590_2afc_4659_84b6_0a96a38b8024(ArrayList<Integer> lst) {
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? -1 : max;
    }

    
    public static int search_Problem_23_9a161387_41dd_41fd_b585_2a4a8861a587(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        for(Integer l : lst){
            if(l > max){
                max = l;
            }
        }
        if(max == -1){
            return -1;
        }
        int count = 0;
        for(Integer l : lst){
            if(l == max){
                count++;
            }
        }
        if(count >= 2){
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_18_20ad7ae4_679a_4195_85ed_7a85a89f1389(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        if (max == -1) {
            return -1;
        }
        int freq = 0;
        for (int i : lst) {
            if (i == max) {
                freq++;
            }
        }
        if (freq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_11_f9a91ea7_0ded_49d6_a51c_77226db305cc(ArrayList<Integer> lst) {
        int mostFrequent = lst.get(0); // start at the first element
        int frequencyOfMostFrequent = 1;
        for (Integer l : lst) {
            if (l == mostFrequent) frequencyOfMostFrequent++;
            else {
                if (frequencyOfMostFrequent > 1) return -1;
                if (frequencyOfMostFrequent == 1) { // found a match
                    if (l > mostFrequent) mostFrequent = l;
                    frequencyOfMostFrequent = 1;
                }
            }
        }
        return mostFrequent;
    }

    
    public static int search_Problem_12_c1d55cdd_8455_4da2_9ecc_31f775f9df3f(ArrayList<Integer> lst) {

        // Your code here
        int max = 0;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_3_614bbaac_06cb_4461_a4c8_c881c380bbb9(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            if (freq.containsKey(l)) {
                freq.put(l, freq.get(l) + 1);
            } else {
                freq.put(l, 1);
            }
        }
        int max = -1;
        int maxFreq = -1;
        for (Integer l : freq.keySet()) {
            if (freq.get(l) > maxFreq) {
                max = l;
                maxFreq = freq.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_18_fea40a69_10c9_411a_89e6_d1d55b1638c2(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_13_42025dce_f4d4_499c_a20a_61336bb28c7d(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_1_a78bc9be_2c3d_4c8c_98cb_90ec5d6c68d6(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
            if (count > maxCount) {
                maxCount = count;
            }
        }
        if (maxCount >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_23_e47f8fb2_1b80_499e_bdd5_eaa88ee7013a(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            }
        }
        return maxFreq > maxVal ? maxFreq : -1;

    }

    
    public static int search_Problem_20_4d4d0372_fa58_4e8c_94e4_d4c15db2ddb2(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        if (max == 0) {
            return -1;
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_21_579d2ac8_eda9_4327_a7a4_b30927f58a2c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i) {
                maxFreq = i;
                maxVal = i;
            } else if (maxFreq == i) {
                maxVal = Math.max(maxVal, i);
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_9_e693b02b_4ea6_4fc4_bb6f_ca03ba1c1d29(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_3_d6961b00_c64b_462d_a118_5255b105b2f1(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int res = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                res = l;
            }
        }
        return res;
    }

    
    public static int search_Problem_14_7377bd0d_7999_484a_95cc_bbe0b9cf2bd7(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer x : lst) {
            map.put(x, map.getOrDefault(x, 0) + 1);
        }
        int max = 0;
        for (Integer x : map.keySet()) {
            if (map.get(x) >= max) {
                max = map.get(x);
            }
        }
        return max;
    }

    
    public static int search_Problem_17_e8958298_7e39_4b9c_b444_f15a4957b583(ArrayList<Integer> lst) {
        int res = -1;
        int max = 0;
        for(int l: lst) {
            if(l > 0 && Collections.frequency(lst, l) >= l) {
                max = Math.max(max, l);
            }
        }
        if(max > 0) {
            res = max;
        }
        return res;
    }

    
    public static int search_Problem_13_7b048d01_8f4f_42e3_9610_a45be340d098(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_11_2a04be34_387d_46ee_8621_644f439d461e(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            if (freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_3_2a04be34_387d_46ee_8621_644f439d461e(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            if (freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_5_5f421520_cc72_4859_9ab6_b84342ae0e6d(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxCount) {
                max = l;
                maxCount = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_19_2a302c69_6936_40c8_a52a_59baf7d5a8ec(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer i : lst) {
            if (i > max) {
                max = i;
            }
            if (lst.stream().filter(j -> j == i).count() > maxFreq) {
                maxFreq = lst.stream().filter(j -> j == i).count();
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_20_8ae1e2dd_99cb_41a9_a70b_53fe862d7c84(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_13_c1c4dae2_44d9_4a8b_8ad3_8871ae72fd9f(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().filter(e -> e.getKey() > 0 && e.getValue() >= e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_10_66da8dc7_ae30_47a7_a1ec_32410dd2aa2a(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_19_dc2bc2a5_5125_4c8d_bbca_0ec45772525f(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > maxFreq) {
                maxFreq = freq;
                max = i;
            }
        }
        return maxFreq >= max ? max : -1;
    }

    
    public static int search_Problem_21_f236915b_8ada_4658_8a03_99f6fa08b578(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (int i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxKey = i;
            }
        }
        if (maxKey == 0) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_4_c27b58dc_18ab_4bb5_86d7_119a78520ce9(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_16_74c6d266_8b0c_481c_a3b2_0c818252626e(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (maxVal == -1 || maxVal < val) {
                maxVal = val;
                maxFreq = val;
            } else if (maxFreq >= val) {
                maxFreq = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_19_23904fa1_cbc0_49f0_aec8_239992259324(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_15_c7320494_cbba_4c8a_8d6e_af6dfe839cc4(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > max_freq) {
                max = i;
                max_freq = freq;
            }
        }
        if (max_freq < max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_21_c452ebd9_937e_4b2e_98e1_f68737417556(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_16_fcc329f8_7439_4278_9c33_485314603d7e(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_14_9a226586_8b69_4e7c_a963_61a23b0f6092(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxCount) {
                maxCount = map.get(l);
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_54960ba7_6f57_429a_8af7_645e1c2cb9df(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_780b7289_75d6_46cb_8921_cf7353c10850(ArrayList<Integer> lst) {

        // Your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_24_b79abc39_c36a_40d5_96b8_35ecd4b18bea(ArrayList<Integer> lst) {
        int max = -1;
        int freq = 0;
        for (int i : lst) {
            freq += i;
            if (freq > max) {
                max = freq;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_7524d6ff_4304_4581_b760_bcb1b7bdb987(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_7_16b4ab67_b2a9_4362_a42e_4b6c2854f0fa(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > maxFreq) {
                max = i;
                maxFreq = freq;
            }
        }
        return max;

    }

    
    public static int search_Problem_11_acafe13a_fba9_476e_be33_4e939418f3d4(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_24_5b5b4a7f_d6ef_4601_8400_1090d332704c(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        Integer max = Collections.max(map.keySet());
        if (map.get(max) >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_10_ff79d7a1_77fb_4df5_aa41_6b440c3af591(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_9_bf82e2fd_c86b_434f_b026_02eecc0cafac(ArrayList<Integer> lst) {
        if (lst.isEmpty()) return -1L;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < lst.size(); i++) {
            int val = lst.get(i);
            if (map.containsKey(val)) {
                map.put(val, map.get(val) + 1);
            } else {
                map.put(val, 1L);
            }
        }
        for (Map.Entry<Integer, Integer> e : map.entrySet()) {
            if (e.getValue() >= e.getKey() && e.getKey() > 0) {
                return e.getKey();
            }
        }
        return -1L;
    }

    
    public static int search_Problem_23_cc30f95d_1381_4df1_b156_f6f71aaefb57(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_22_b22b8e31_3f57_4873_be23_315951e8679a(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == -1) {
            return -1;
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) == max) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_0_18bcda2e_2d7c_4d1b_9f10_0692e9aa33b7(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : lst) {
            if (l > 0 && map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_17_bab97e06_2cc2_4b9d_95bf_331e4fbdd529(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_2_33109515_e93c_4c5d_b0a1_c3a2dbf94bbb(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_8_5af4b9a6_2dd0_41e9_9ff3_f88d7d0876fd(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_12_84326018_879d_4065_b29e_6bf6aea359f7(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > max_freq) {
                max_freq = freq;
                max = i;
            }
        }
        if (max_freq < max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_18_b2d61701_8b21_4928_9f53_36bcfb52af5e(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_10_f19f832d_de50_4df9_a93a_36176a1b5999(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return max > 0? max : -1;
    }

    
    public static int search_Problem_9_1d924b13_2fe8_47ca_a5e6_fd942aa040bb(ArrayList<Integer> lst) {

        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                max = entry.getKey();
            }
        }
        return max;
    }

    
    public static int search_Problem_15_59a441f8_50e6_4041_bf26_4f6157dca69d(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for(int i : lst) {
            if(i > max) {
                max = i;
            }
            if(lst.stream().filter(x -> x == i).count() > maxFreq) {
                maxFreq = lst.stream().filter(x -> x == i).count();
            }
        }
        if(maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_8_fa40bb23_2f84_492f_989a_1dbd14ed45a2(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_17_9e0198d7_112c_4157_83be_870f9b2ad740(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                if (maxFreq < val) maxFreq = val;
                if (maxVal < val) maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_6_1d604aa0_198b_424d_97cf_314dbaf8e7d5(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_f519dbb0_1c57_49f3_a1ed_c9c73f1c3e92(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_11_6bc78077_bfe1_4592_b06e_4f9c92a6af06(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_7_8fd5f2c1_4b9a_443c_a21b_071e2fdc5825(ArrayList<Integer> lst) {
        int val = -1;
        int maxV = -1;
        for (int num : lst) {
            if (num < val) val = num;
            else if (num > maxV) maxV = num;
        }
        return maxV;
    }

    
    public static int search_Problem_15_dbfe8fe3_bac5_4c59_9bf2_1867501e2092(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_9_a7e4be8e_87a3_427a_91b0_d5c547a82c36(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_986759fb_82e4_41fd_9935_119147e4310b(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_f8c33cc5_7c29_4773_9b27_933f8457cbee(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        int res = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
            if (maxFreq >= lst.size()) {
                res = max;
                break;
            }
        }
        return res;
    }

    
    public static int search_Problem_5_a1cf6b7c_9fbb_4409_9039_60f09919eb1f(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_6_8f4ac413_1655_42ca_9dcf_89fdbb7a8c7c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_17_bd9edacb_cf59_4d9c_8f1a_8f7a06adb94c(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (int num : lst) {
            map.put(num, map.getOrDefault(num, 0L) + 1);
        }
        for (int num : lst) {
            if (map.get(num) >= num) {
                return num;
            }
        }
        return -1;
    }

    
    public static int search_Problem_22_4de34714_b2e9_454c_b0a5_511556d4ecf3(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i) {
                maxFreq = i;
                maxVal = i;
            } else if (maxFreq == i) {
                maxVal = Math.max(maxVal, i);
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_13_2f589fc6_ffd4_482f_9f55_63630e529816(ArrayList<Integer> lst) {
        int max = -1;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (freq > max) {
                max = freq;
            }
            if (freq == i) {
                freq++;
            }
        }
        return max;

    }

    
    public static int search_Problem_4_63c138e5_6e50_4b85_8bde_b122cb996044(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_4_0a755a50_3a6b_4701_aeef_43767dd5ca7e(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_b8b18924_9876_4f90_95c7_3fe4ea3c855b(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_15_224ad458_0762_4df1_9c98_d4a61448bb59(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (int l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        int maxFreq = 0;
        for (int l : freq.keySet()) {
            if (freq.get(l) > maxFreq) {
                max = l;
                maxFreq = freq.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_4_0eda4a74_83e7_4ce2_9dc9_7aab7dfc1ab6(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_17_d7aadf7e_d5a2_412c_89e3_bca43e04b30c(ArrayList<Integer> lst) {
        Integer max = new Integer(0);
        Integer maxFreq = new Integer(0);
        for (Integer i : lst) {
            if (i > max) {
                max = i;
            }
            if (i.equals(max)) {
                maxFreq++;
            }
        }
        if (maxFreq >= max.intValue()) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_14_3fba11a1_0357_4142_8079_b51667a0dc84(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (lst.stream().filter(x -> x == i).count() > lst.stream().filter(x -> x == i).max(Comparator.comparing(Integer::valueOf)).get()) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_73664696_3f2e_4032_9acd_3d66865fb09a(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            map.put(i, map.getOrDefault(i, 0L) + 1);
        }
        for (int i = lst.size(); i > 0; i--) {
            if (map.getOrDefault(i, 0L) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_20_66da8dc7_ae30_47a7_a1ec_32410dd2aa2a(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_4_a31c7a81_db5c_467a_af53_51f20788bc26(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_462b6cce_8427_49a4_9375_083f5433641a(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_5_33109515_e93c_4c5d_b0a1_c3a2dbf94bbb(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_10_17ae3662_124b_41f9_a35b_8da829c38f55(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i = lst.size(); i > 0; i--) {
            if (map.containsKey(i) && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_14_62558c05_9e82_4250_891f_058187f4ccde(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer num : lst) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        return map.entrySet().stream().filter(entry -> entry.getValue() >= entry.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_18_b55f0202_e7b2_449f_b990_46a90a94e562(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq < max) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_22_59a441f8_50e6_4041_bf26_4f6157dca69d(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for(int i : lst) {
            if(i > max) {
                max = i;
            }
            if(lst.stream().filter(x -> x == i).count() > maxFreq) {
                maxFreq = lst.stream().filter(x -> x == i).count();
            }
        }
        if(maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_14_32cacc0f_97d1_4927_81dc_09801955e817(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            } else if (val == maxVal) {
                maxFreq++;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_20_d9f084cb_c24b_414a_b5f9_9b52bade21e0(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_18_b9663e76_b45a_47bb_939f_3791547e761e(ArrayList<Integer> lst) {

        // write your code in Java SE 8
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_22_45c9e6c5_98c9_437c_8d64_afcd4802d532(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_4_7d663b95_95d0_4178_8f3a_961cf16ed7b1(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_14_c2f8dc3a_3c9a_40f5_9ea3_e0742192c0e8(ArrayList<Integer> lst) {
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? -1 : max;
    }

    
    public static int search_Problem_1_5a19afe3_b067_4205_8dab_b3039477701d(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i > max) {
                int count = 0;
                for (int j : lst) {
                    if (i == j) {
                        count++;
                    }
                }
                if (count >= i) {
                    return i;
                }
            }
        }
        return -1;
    }

    
    public static int search_Problem_18_50ab1adb_6c22_471c_919a_db9f06ab6c99(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_ce173da5_5189_4260_b53e_8b817c89c31e(ArrayList<Integer> lst) {
        int largest = -1;
        int frequency = 0;
        for (Integer i : lst)
            if (i >= frequency) {
                frequency = i;
                largest = i;
            }
        return largest;
    }

    
    public static int search_Problem_18_1c3abb21_9ccf_4a1d_8533_03935e1e4355(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                if (lst.stream().filter(x -> x == i).count() >= i) {
                    return i;
                }
            }
        }
        return -1;
    }

    
    public static int search_Problem_4_1452dd64_329f_4746_a7e8_a5b0bbe8a57d(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq >= maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_14_c0088b1b_e2e2_43a5_af31_ae6b084f6e88(ArrayList<Integer> lst) {
        // Write your code here
        int n = lst.size();
        Map<Integer, Integer> m = new HashMap<>();
        for (int i = 0; i < n; i++) {
            if (m.containsKey(lst.get(i))) {
                m.merge(lst.get(i), lst.get(i), Integer::sum);
            } else {
                m.put(lst.get(i), 1);
            }
        }
        if (m.isEmpty()) {
            return -1;
        }
        for (Map.Entry<Integer, Integer> entry : m.entrySet()) {
            if (entry.getValue() > lst.size() * 1.0 / n) {
                return -1;
            }
        }
        int max = Integer.MIN_VALUE;
        for (Map.Entry<Integer, Integer> entry : m.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_20_f610483e_c8ff_481c_9f08_743fd1014af1(ArrayList<Integer> lst) {
        if (lst.size() < 1) return -1;
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            Integer prev = map.putIfAbsent(i, 0L);
            if (prev != null && prev > 0) map.put(i, map.get(prev) + 1);
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) > 0 && map.get(i) == lst.get(lst.indexOf(i))) return i;
        }
        return -1;
    }

    
    public static int search_Problem_20_dab9a6fb_f59b_4bdc_9e57_d09da6935045(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_dfb83ede_4ec2_476a_9447_704ce5a27918(ArrayList<Integer> lst) {
        int highest = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq >= i) {
                highest = i;
            }
        }
        return highest == 0 ? -1 : highest;
    }

    
    public static int search_Problem_6_68dae0e5_fd37_446e_a42c_ee625b2062c5(ArrayList<Integer> lst) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1L);
            }
        }
        int max = -1;
        for (Integer i : map.keySet()) {
            if (i <= map.get(i) && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_11_59f8f807_7899_4efc_a0f0_cf34881d7d55(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        Integer max = 0;
        Integer maxKey = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_1_0a9b58e4_3cd2_4206_bb8b_54de8dfe78fb(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().filter(e -> e.getValue() > e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_11_742b0d3e_587f_4174_ac50_39fddb83699f(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        Integer max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = l;
            }
        }
        if (max == -1) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_21_51e99419_dbd9_4c2b_8ceb_a33dd64f333d(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1 || freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_be5ce68f_1788_44fc_aae3_ff6cd6438bfd(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxVal == -1 || maxFreq < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq == i) {
                maxFreq++;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_16_c98aa025_cbe3_4a8e_85ea_dae95b2133e3(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_6_6f69e21c_5be0_4954_94db_763cde3389c7(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        int max = 0;
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        if (max == 0) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_19_fb888065_b76e_458d_8ed0_4d472efe76fb(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<Integer, Integer>();
        for (int l : lst) {
            if (freq.containsKey(l)) {
                freq.put(l, freq.get(l) + 1);
            } else {
                freq.put(l, 1);
            }
        }
        int max = -1;
        int maxFreq = -1;
        for (int l : freq.keySet()) {
            if (freq.get(l) > maxFreq) {
                max = l;
                maxFreq = freq.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_20_f28556d7_8a85_47c9_9de1_118516293d01(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_2_dc20ce87_32d8_4664_bf5f_f3f428ebe301(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_17_99109fd8_3926_4101_afdf_e5eb40128a46(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                return entry.getKey();
            }
        }
        return -1;
    }

    
    public static int search_Problem_19_8fd5f2c1_4b9a_443c_a21b_071e2fdc5825(ArrayList<Integer> lst) {
        int val = -1;
        int maxV = -1;
        for (int num : lst) {
            if (num < val) val = num;
            else if (num > maxV) maxV = num;
        }
        return maxV;
    }

    
    public static int search_Problem_23_8ba8e236_8895_4c97_90a7_112bad88532e(ArrayList<Integer> lst) {
        int maxFreq = 0;
        int maxVal = 0;

        List<Integer> list = lst.stream().distinct().sorted(Comparator.reverseOrder()).collect(Collectors.toList());
        Collections.sort(list);

        for (int i : list) {
            int freq = list.stream().filter(j -> j == i).count();
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = i;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_11_74168a89_fbd1_4f68_84a1_e17e4d8cd544(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_15_1bdc2693_ab39_48e9_8c4c_af49d12409ed(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (int i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxKey = i;
            }
        }
        if (maxKey > 0) {
            return maxKey;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_0_f84d0b1c_409c_4972_af91_44b5946247a2(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_8567573e_f173_4377_9a1a_64ba32f854ef(ArrayList<Integer> lst) {

        int max = -1;
        for (int i = 0; i < lst.size(); i++) {
            int count = 0;
            for (int j = 0; j < lst.size(); j++) {
                if (lst.get(j) == i) {
                    count++;
                }
            }
            if (count > i && count > max) {
                max = count;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_bb79bed0_63c7_46e7_a794_fef6d5a21d44(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_0_41e230b5_604b_466d_9588_bd307b47ae71(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            } else if (val == maxVal) {
                maxFreq++;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_19_f7c3e795_3f8a_4957_ad85_82fb83bc5805(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_10_64e868ac_f600_4e4e_8917_40cab66a699e(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_3473c74f_3484_4b8b_a0b6_2e82f068dbd0(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxCount) {
                max = l;
                maxCount = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_18_711f4351_c248_412a_a2c3_aa186b45f8ad(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > max_freq) {
                max_freq = freq;
                max = i;
            }
        }
        if (max_freq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_10_c78a5ca7_39d5_41d9_a868_f8ce638db707(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) == max) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_15_c8ed70b1_f901_4acf_9a46_375c80804d8a(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_6_3d845f12_60c1_403c_936e_36676a67b2a1(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1 || freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_11_64bb5a71_f594_4231_b72b_f2acb008abe8(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq++;
            if(freq > max) {
                max = freq;
            }
            if(i == 0) {
                freq--;
            }
        }
        return max;

    }

    
    public static int search_Problem_8_37b5f594_f270_4ef5_b9e6_ad08f05ad08d(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_21_9d19affd_f562_4c99_bd6b_aa43ff22cd58(ArrayList<Integer> lst) {
        if (lst.size() == 0) {
            return -1;
        }
        Collections.sort(lst);
        int result = lst.get(0);
        int max = lst.get(0);
        for (int i : lst) {
            if (i > max) {
                max = i;
                result = i;
            } else if (i > result) {
                result = i;
            }
        }
        return result;
    }

    
    public static int search_Problem_2_fcf44e66_d2b1_49ef_a59c_7ff506c9d5d5(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        int freq = 0;
        for (int l : lst) {
            if (l > max) {
                max = l;
                maxFreq = freq;
            }
            if (l == max) {
                maxFreq = Math.max(maxFreq, freq);
            }
            freq++;
        }
        return maxFreq == 0 ? -1 : max;
    }

    
    public static int search_Problem_10_32cf49dd_c306_489c_a08c_237166bf8e0d(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_41ac9a7b_218b_405a_8e4e_6fb392644202(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i >= max) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_10_b9f062ab_9c9b_4f6b_aeae_13d0e7690062(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxCount) {
                max = l;
                maxCount = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_8_69821cd1_6f4d_467e_89f7_a1be0b852e7c(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? max : -1;
    }

    
    public static int search_Problem_9_67309070_6704_47a8_8051_304324cf6ed1(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxCount) {
                max = l;
                maxCount = map.get(l);
            }
        }
        if (maxCount < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_14_414f58ac_13b1_4db9_b734_ebba7537f8af(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_18_4e6eba07_392e_4e3e_aec0_886279fdd256(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                if (maxVal < 0 || maxVal > val) {
                    maxVal = val;
                    maxFreq = val;
                }
                else {
                    maxFreq++;
                }
            }
        }
        return maxFreq > maxVal ? maxVal : -1;

    }

    
    public static int search_Problem_10_0bd0e132_c8bc_47ea_89f4_39a6754afc1b(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_4859b23b_9104_4da6_8ba9_99338acf5c2f(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        int res = -1;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > max) {
                max = lst.get(i);
                maxFreq = 1;
            } else if (lst.get(i) == max) {
                maxFreq++;
            }
            if (maxFreq > res) {
                res = maxFreq;
            }
        }
        return res == 0 ? -1 : max;
    }

    
    public static int search_Problem_21_145115a4_5be9_4bbe_8110_a2bda29de3fe(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_0_e2ad134d_7a16_45ee_bed0_b39a3642e191(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_20_6cabdea2_5db4_4dea_8122_d6053a66ae06(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_24_2c29fe97_cbe4_48a8_be3e_65d44dd2f558(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_f058ba41_e5a0_4800_9b6e_ef0c19812839(ArrayList<Integer> lst) {
        return lst.stream().filter(i -> Collections.frequency(lst, i) >= i).max(Comparator.naturalOrder()).orElse(-1);
    }

    
    public static int search_Problem_13_a998ee89_8e9a_428d_ba35_3d2ad868b4c0(ArrayList<Integer> lst) {

        int max = -1;
        int maxCount = -1;
        for (int i = 1; i < 1000000000; i++) {
            int count = 0;
            for (Integer l : lst) {
                if (l == i) {
                    count++;
                }
            }
            if (count >= i && maxCount < count) {
                max = i;
                maxCount = count;
            }
        }
        if (maxCount >= 1) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_7_5dda8a0c_d94d_4ca0_ad8a_7bece12d2252(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = lst.stream().filter(x -> x == val).count();
                if(freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_16_d97e020a_b337_4547_8647_344285c6fd00(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_4d6c4607_7e26_47d4_84b1_6964d67718dd(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        Integer max = -1;
        Integer maxKey = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                maxKey = l;
            }
        }
        if (maxKey == -1) {
            return -1;
        } else {
            return maxKey;
        }
    }

    
    public static int search_Problem_7_888e5da3_8912_47e2_8fab_e2d35337f456(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_0913d2a4_01fb_46ed_bfa7_7077df08f99f(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (int num : lst) {
            map.put(num, map.getOrDefault(num, 0L) + 1);
        }
        for (int num : lst) {
            if (map.get(num) >= num) {
                return num;
            }
        }
        return -1;
    }

    
    public static int search_Problem_22_91e81e14_9184_427b_b595_8cc448bad5f8(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        Integer max = freq.keySet().stream().max(Comparator.comparing(freq::get)).get();
        if (freq.get(max) >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_8_ee14dc35_0105_4691_8614_eb0bcf8c3e00(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            } else if (val == maxVal) {
                if (val > maxFreq) {
                    maxFreq = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_12_214c41c5_c843_456e_936a_0b8ae9406677(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max && Collections.frequency(lst, i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_fe4c43d2_bf90_483d_a3d7_ced4bd7a4cf5(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_11_3c16cef9_2632_4ab9_8c7d_9d122965ee4b(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_17_61108b23_27b0_4fec_975b_51b698f8343c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i) {
                maxFreq = i;
                maxVal = i;
            } else if (maxFreq == i) {
                maxVal = Math.max(maxVal, i);
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_22_86f7fa98_e158_4c3a_8c06_e59526e3ace8(ArrayList<Integer> lst) {
        int result = -1;
        for (int num : lst) {
            if (num > 0) {
                int freq = lst
                        .stream()
                        .filter(x -> x == num)
                        .count();
                if (freq >= num) {
                    result = num;
                }
            }
        }
        return result;
    }

    
    public static int search_Problem_23_b79f9cfb_2f4d_4f86_b223_453157682b01(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_9_a580bb2b_de95_48d9_875c_a0615ef1bbe1(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max && Collections.frequency(lst, i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_82303970_a201_46e1_80c9_bdd05ff9cc1b(ArrayList<Integer> lst) {
        Map<Integer, Integer> m = new HashMap<>();
        for(Integer l : lst) {
            Integer i = m.get(l);
            if(i == null) {
                m.put(l, 1);
            } else {
                m.put(l, i+1);
            }
        }
        int max = 0;
        for(Integer l : m.keySet()) {
            if(m.get(l) > max) {
                max = m.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_10_2785d7f6_7671_4320_888d_ca98d7cdc09a(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : lst) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_13_071aee9c_ff77_46a1_a819_ec21d12215b6(ArrayList<Integer> lst) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int val : lst) {
            if (map.containsKey(val)) {
                map.put(val, map.get(val) + 1);
            } else {
                map.put(val, 1);
            }
        }
        if (map.isEmpty()) {
            return -1;
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= map.get(0)) {
                return entry.getKey();
            }
        }
        return -1;
    }

    
    public static int search_Problem_8_d0c0aa67_6e55_46b5_89de_39afff21347b(ArrayList<Integer> lst) {

        // write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) == max) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_4_3d67b149_fd39_485d_a5a1_b49a57eb908f(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq += i;
            if (freq > max) {
                max = freq;
            }
        }
        return max;

    }

    
    public static int search_Problem_8_b4654604_7861_4661_8201_d0bef279bea5(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (i > max) {
                max = i;
                freq = freq - 1;
            }
        }
        if (freq >= 0) {
            return max;
        } else {
            return -1;
        }

    }

    
    public static int search_Problem_5_c740e4a4_54cd_4bf8_8060_fccabe2a3d6d(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        int currFreq = 0;
        int curr = 0;
        for (int i : lst) {
            currFreq = lst.stream().filter(x -> x == i).count();
            if (currFreq > maxFreq) {
                maxFreq = currFreq;
                curr = i;
            }
        }
        return curr;
    }

    
    public static int search_Problem_16_7aa0a066_cba4_4099_880c_997219e72721(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_21_00833c3b_34bf_4783_a4b9_ed68d217b82c(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_22_89d04c64_ebc5_4f2d_9a94_82e2c53aed9e(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_12_fa76f9e5_baf8_4aa7_9825_f26a8973e5f4(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_20_8be40d32_07ac_49a1_95b3_dee65efcc156(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_2_33039bb6_d7a0_4504_a080_5900bcfb3092(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_3_f7adaaaa_e4ce_448f_b4da_6b1fc7c4bd59(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxFreq = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxFreq) {
                max = l;
                maxFreq = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_14_a003edd3_51c6_44a9_b2ce_4dee2c07da85(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = lst.stream().filter(v -> v == val).count();
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_21_677a55b1_079a_4a4d_b846_2c48aeb98d80(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        if (max == 0) {
            return -1;
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= 2) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_11_4fc37822_a3ee_4c05_8b43_25404803aec2(ArrayList<Integer> lst) {

        int max = 0;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_3_0c64acff_0724_4f7b_b47d_7ed6095be1c3(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i) {
                max = Math.max(max, i);
            }
        }
        return max;
    }

    
    public static int search_Problem_24_a228bb3c_35d7_4556_9005_c63a201b0fe7(ArrayList<Integer> lst) {

        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_3_02da4b23_c23e_4dd3_944d_f0b9de1786f4(ArrayList<Integer> lst) {
        ArrayList<Integer> freq = new ArrayList<>();
        int maxFreq = -1;
        int maxVal = -1;
        for (int val : lst) {
            if (freq.stream().filter(f -> f == val).count() == 0) {
                freq.add(val);
                if (val > maxVal) {
                    maxFreq = maxVal;
                    maxVal = val;
                } else if (val == maxVal) {
                    maxFreq = val;
                }
            }
        }
        return maxFreq == -1 ? -1 : maxVal;
    }

    
    public static int search_Problem_5_414f58ac_13b1_4db9_b734_ebba7537f8af(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_7_4f170531_8429_4e57_bbf9_26df9c2060c9(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxKey = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                maxKey = l;
            }
        }
        return maxKey;
    }

    
    public static int search_Problem_17_ab986697_8fe0_4950_969c_e9b84320be58(ArrayList<Integer> lst) {
        
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxVal < 0) {
                maxVal = i;
                maxFreq = i;
            } else if (i < maxVal) {
                maxVal = i;
                maxFreq = i;
            } else if (i == maxVal) {
                maxFreq++;
            }
        }
        if (maxFreq >= maxVal) {
            return maxVal;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_21_993b4d49_8f8e_4e34_bafd_1e320789d4ff(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_1a5ff06d_da65_41b2_974c_b8d626938848(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_13_083749b3_cdff_4705_b138_b3f0fbfa82ee(ArrayList<Integer> lst) {
        Integer max = -1;
        int counter = 0;
        for (Integer value : lst) {
            if (value > max) {
                counter = 0;
                max = value;
            }
            else if (value == max) {
                counter++;
            }
            else if (counter > 0) {
                return -1;
            }
        }
        return max;
    }

    
    public static int search_Problem_3_1d1ff811_3a4f_43a5_819f_3023d6dd2755(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_33ac6a01_1fdb_485e_9065_547bad881623(ArrayList<Integer> lst) {
        int maxVal = lst.get(0);
        int maxFreq = lst.get(0);
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(0);
            } else if (val == maxVal) {
                maxFreq++;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_2_33a538c0_8cc6_47db_b492_2e541664a911(ArrayList<Integer> lst) {

        int max = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_1_ba418f86_5ea9_4b98_8f34_a7ca21e10d9b(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_21_c95feff2_fa70_4a44_b10f_6dc0f08ee1aa(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_3_bcf7fec0_d3a1_4cd8_91b0_9a71b3784aa2(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1) {
                freq = i;
                max = i;
            } else if (freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_24_9ddaa53e_211e_44fc_80d0_8586daeabb49(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l,  1);
            }
        }
        int max = -1;
        int max_key = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                max_key = entry.getKey();
            }
        }
        if (max_key > 0) {
            return max_key;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_12_c5bf7352_d040_485f_91c1_f2424e572a04(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_4_2a81176e_fb0c_4e42_8ee9_ac6aec8e46bd(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_14_4232c5c2_ad1b_4687_8c66_1cbdda5ae8d6(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_22_ef7da592_afdb_4a85_9fbb_8948e1a8acfb(ArrayList<Integer> lst) {

        int greatest = 0;
        for (int i : lst) {
            if (lst.stream().filter(x -> x == i).count() > lst.stream().filter(x -> x == i).mapToInteger(x -> x).max().getAsInteger()) {
                greatest = i;
            }
        }
        return greatest;
    }

    
    public static int search_Problem_19_a3c9ee5d_33c4_4255_a477_0de937e59d5e(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        Integer max = Collections.max(map.keySet());
        if (map.get(max) >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_2_ad5a0fa8_01a2_49c8_bb2f_a4ab42a11cc4(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (freq.containsKey(i)) {
                freq.put(i, freq.get(i) + 1);
            } else {
                freq.put(i, 1);
            }
        }
        Integer max = freq.entrySet().stream().max(Map.Entry.comparingByValue()).get().getKey();
        if (freq.get(max) >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_24_668e2531_7fc0_4f69_b0b7_5bafec63be61(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && max < i) {
                max = i;
                maxFreq = i;
            } else if (maxFreq == i) {
                maxFreq++;
            }
        }
        return max;

    }

    
    public static int search_Problem_11_53b28bef_a8f2_4527_ab4d_8eb1c3b8b4cf(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
            if (map.get(i) > maxFreq) {
                maxFreq = map.get(i);
                max = i;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_3_05c833a1_8b87_4462_9611_b86f099518c7(ArrayList<Integer> lst) {
        if (lst.isEmpty()) {
            return -1;
        }
        int maxVal = lst.get(0);
        int maxCount = 0;
        for (Integer val : lst) {
            if (maxCount >= maxVal) {
                return -1;
            }
            if (maxVal != val && maxCount >= val) {
                return -1;
            }
            maxCount = maxCount + val;
            maxVal = maxVal;
        }
        return maxVal;
    }

    
    public static int search_Problem_4_e1ec3170_86ec_4e3a_be5d_be7a685191d5(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_14_6f60d3cf_0320_4744_9bc1_9b32d36631a8(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_24_45153bea_20d3_4db7_8c17_0fcc1584ea03(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_17_341de019_4f00_4478_b0bd_1911abc4b998(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq++;
            if(freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_0_90cbed25_000a_4152_9f93_05f8382e80d7(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq == -1 || maxFreq > i) {
                maxFreq = i;
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_17_67309070_6704_47a8_8051_304324cf6ed1(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxCount) {
                max = l;
                maxCount = map.get(l);
            }
        }
        if (maxCount < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_21_05c833a1_8b87_4462_9611_b86f099518c7(ArrayList<Integer> lst) {
        if (lst.isEmpty()) {
            return -1;
        }
        int maxVal = lst.get(0);
        int maxCount = 0;
        for (Integer val : lst) {
            if (maxCount >= maxVal) {
                return -1;
            }
            if (maxVal != val && maxCount >= val) {
                return -1;
            }
            maxCount = maxCount + val;
            maxVal = maxVal;
        }
        return maxVal;
    }

    
    public static int search_Problem_22_3e8a3c5d_b761_4e5f_9f95_58f9f48f65a3(ArrayList<Integer> lst) {
        List<Integer> sortedLst = lst.stream().sorted().collect(Collectors.toList());
        
        int first = sortedLst.get(0); // first value
        int max = first;
        int cnt = 0;
        
        for (int i = 0; i < sortedLst.size(); i++) {
            if (sortedLst.get(i) > 0 && sortedLst.get(i) <= max) {
                cnt++;
                max = sortedLst.get(i);
            }
        }
        
        if (cnt >= sortedLst.size() || max <= 0) {
            return -1L;
        }
        
        for (int i = 0; i < sortedLst.size(); i++) {
            if (sortedLst.get(i) > 0 && sortedLst.get(i) == max) {
                return i;
            }
        }
        
        return -1L;
    }

    
    public static int search_Problem_17_c94db12a_23e1_4ddd_b6bd_ae2a0fe2db14(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxCount = 0;
        for (int val : lst) {
            int count = Collections.frequency(lst, val);
            if (count > maxCount) {
                maxCount = count;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_10_f6e4ed8f_2384_48cb_af77_d4b3d22b86c0(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1L);
            }
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_7cc6fea7_f06a_4a19_98d4_0c33335b5c2d(ArrayList<Integer> lst) {

        int max = 0;
        for (Integer i : lst) {
            if (i > max) {
                max = i;
            }
        }
        if (max == 0) {
            return -1;
        }
        int count = 0;
        for (Integer i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_11_5e79698c_333c_4a00_b93b_9ef2a3a69fae(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxCount = 1;
            } else if (i == max) {
                maxCount++;
            }
        }
        for (int i : lst) {
            if (i == max && maxCount >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_19_7834a80d_3a64_4574_a908_cbac98de0244(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            int count = Collections.frequency(lst, i);
            if (count >= i && count > maxFreq) {
                maxFreq = count;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_17_bbe47d47_26f0_4719_8639_03179a454ac6(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i = lst.size(); i > 0; i--) {
            if (map.containsKey(i) && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_12_3e8a3c5d_b761_4e5f_9f95_58f9f48f65a3(ArrayList<Integer> lst) {
        List<Integer> sortedLst = lst.stream().sorted().collect(Collectors.toList());
        
        int first = sortedLst.get(0); // first value
        int max = first;
        int cnt = 0;
        
        for (int i = 0; i < sortedLst.size(); i++) {
            if (sortedLst.get(i) > 0 && sortedLst.get(i) <= max) {
                cnt++;
                max = sortedLst.get(i);
            }
        }
        
        if (cnt >= sortedLst.size() || max <= 0) {
            return -1L;
        }
        
        for (int i = 0; i < sortedLst.size(); i++) {
            if (sortedLst.get(i) > 0 && sortedLst.get(i) == max) {
                return i;
            }
        }
        
        return -1L;
    }

    
    public static int search_Problem_20_0b3f9131_7548_4898_b0d8_40b106853377(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        Integer max = -1;
        Integer maxFreq = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxFreq) {
                max = l;
                maxFreq = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_19_d97e020a_b337_4547_8647_344285c6fd00(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_f610483e_c8ff_481c_9f08_743fd1014af1(ArrayList<Integer> lst) {
        if (lst.size() < 1) return -1;
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            Integer prev = map.putIfAbsent(i, 0L);
            if (prev != null && prev > 0) map.put(i, map.get(prev) + 1);
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) > 0 && map.get(i) == lst.get(lst.indexOf(i))) return i;
        }
        return -1;
    }

    
    public static int search_Problem_22_3d7c9371_4714_48c9_8316_65b752e41fe9(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for(int i : lst) {
            freq++;
            if(freq > max) {
                max = freq;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_78ad8ef9_2073_4f95_9a1d_301eb4cc3cc9(ArrayList<Integer> lst) {

        // Write your code here.
        // return -1;
        // return lst.stream().max(Comparator.comparing(x -> x)).get();
        // return lst.stream().max(Comparator.comparing(x -> x, Comparator.reverseOrder())).get();
        // return lst.stream().max(Comparator.comparing(x -> x, Comparator.reverseOrder())).orElse(-1);
        // return lst.stream().max(Comparator.comparing(x -> x, Comparator.reverseOrder())).orElseGet(() -> -1);
        return lst.stream().max(Comparator.comparing(x -> x, Comparator.reverseOrder())).orElseThrow(() -> new NoSuchElementException("No such element"));
    }

    
    public static int search_Problem_21_c0cdea2e_2c78_4088_bf35_adb09df5421b(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_4eafeff0_9439_44da_8512_5406235cd6c1(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_3_b14887cd_3c83_4345_8b49_46a294d0bc5a(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
            if (count > maxCount) {
                maxCount = count;
            }
        }
        if (maxCount >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_13_27f219c4_56e6_4ee6_8b73_30f4ac804e15(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (int l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_21_0c1472b4_4123_4385_8e5c_95435dde6fde(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int max_count = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max_count) {
                max = l;
                max_count = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_4_695e06d8_357a_4ae7_8a5a_1efb7ea02767(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        Integer max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_5c4f9133_d77e_4f34_a7b3_d268945a5a28(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_19_10ddea85_ab3c_4e2a_b241_c845e57298d2(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq == i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            } else if (maxFreq > i && maxVal == i) {
                maxFreq = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_15_c7310735_6be8_4b9c_b10c_ea2ed58299c1(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream()
                .filter(e -> e.getValue() > e.getKey())
                .map(Map.Entry::getKey)
                .max(Comparator.naturalOrder())
                .orElse(-1);
    }

    
    public static int search_Problem_8_cea1a008_461d_4c1c_8dc8_ed931aeec6cc(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_0a9b58e4_3cd2_4206_bb8b_54de8dfe78fb(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().filter(e -> e.getValue() > e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_17_134fdf93_a76e_4d33_9346_0091bd6132fa(ArrayList<Integer> lst) {

        // Create a map to store the frequency of each element
        Map<Integer, Integer> freqMap = new HashMap<>();
        for (int num : lst) {
            freqMap.put(num, freqMap.getOrDefault(num, 0L) + 1);
        }
        // Iterate through the map to find the greatest integer that satisfies the condition
        for (int num : freqMap.keySet()) {
            if (freqMap.get(num) >= num) {
                return num;
            }
        }
        // If no such integer exists, return -1
        return -1;
    }

    
    public static int search_Problem_8_73664696_3f2e_4032_9acd_3d66865fb09a(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            map.put(i, map.getOrDefault(i, 0L) + 1);
        }
        for (int i = lst.size(); i > 0; i--) {
            if (map.getOrDefault(i, 0L) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_7_7f72f684_8d04_4768_909c_3e6d6b1c0c54(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i = lst.size(); i > 0; i--) {
            if (map.containsKey(i) && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_9_d926941a_1712_4ea6_be1e_e7e62ba4272c(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                max_freq++;
            }
        }
        if (max_freq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_16_6b3d4312_dd5e_4239_a5d6_c352dad46557(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        int max = 0;
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_11_6fb711bd_597d_462c_9e6d_6115fdf55fc4(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int i : lst) {
            if(i == 0) continue;
            int freq = Collections.frequency(lst, i);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_8_2ac433cc_9d94_4f88_8207_97bc3d906dad(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        int currFreq = -1;
        for (int val : lst) {
            if (currFreq == -1) {
                currFreq = val;
            } else if (currFreq == val) {
                currFreq++;
            } else {
                if (currFreq > maxFreq) {
                    maxFreq = currFreq;
                    maxVal = val;
                }
                currFreq = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_13_4e6eba07_392e_4e3e_aec0_886279fdd256(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                if (maxVal < 0 || maxVal > val) {
                    maxVal = val;
                    maxFreq = val;
                }
                else {
                    maxFreq++;
                }
            }
        }
        return maxFreq > maxVal ? maxVal : -1;

    }

    
    public static int search_Problem_24_f4f3949a_931b_48cb_a00a_a8c35e54c114(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for(Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        
        int max = 0;
        int freq = 0;
        for(Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if(entry.getValue() > freq) {
                max = entry.getKey();
                freq = entry.getValue();
            }
        }
        
        return freq >= max ? max : -1;
    }

    
    public static int search_Problem_5_5c8f93bf_b7e1_4d97_829d_332fb402f805(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1L);
            }
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_825af927_179a_48fb_a505_2903eae30155(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream()
                .filter(e -> e.getValue() > e.getKey())
                .map(Map.Entry::getKey)
                .max(Comparator.naturalOrder())
                .orElse(-1);
    }

    
    public static int search_Problem_3_8545fe00_41f8_4560_840f_e2742e79c4ad(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        if (max == -1) {
            return -1;
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_24_51e99419_dbd9_4c2b_8ceb_a33dd64f333d(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1 || freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_1463fc04_d824_4055_8b21_7d5d3308fa12(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        int maxFreq = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxFreq) {
                max = entry.getKey();
                maxFreq = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_18_b690b259_44f3_4fe9_b126_59426e36c954(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        Integer max = -1;
        Integer maxKey = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                maxKey = entry.getKey();
            }
        }
        if (maxKey > 0) {
            return maxKey;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_20_9cb17680_3432_4520_8741_64ca626f7700(ArrayList<Integer> lst) {
        // Write your code here
        // To print results to the standard output you can use System.out.println()
        // Example: System.out.println("Hello world!");
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1L);
            }
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l && l > max) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_5c36d46f_4b03_412f_a09f_ebb1b9ee8a35(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_19380f62_9c43_4431_b6f9_a012afbe3934(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_4d6c4607_7e26_47d4_84b1_6964d67718dd(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        Integer max = -1;
        Integer maxKey = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                maxKey = l;
            }
        }
        if (maxKey == -1) {
            return -1;
        } else {
            return maxKey;
        }
    }

    
    public static int search_Problem_18_91294ef0_e8b4_4761_8b52_2ded61334f94(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_10_f28556d7_8a85_47c9_9de1_118516293d01(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_7_06b59eaf_f7d5_475a_b612_76509db662f1(ArrayList<Integer> lst) {
        // Create an array to hold frequencies of each integer
        int[] freq = new int[ lst.size()];
        int count = 0;

        // Iterate through each element in array and find frequency and increment by 1
        for (int l : lst) {
            freq[ l] = ++count;
        }

        // Now iterate through frequency array and find greatest frequency
        int result = Integer.MIN_VALUE;
        for (int i = 0; i < freq.length; i++) {
            if (freq[i] > result) {
                result = freq[i];
            }
        }
        return result < 0 ? -1 : result;
    }

    
    public static int search_Problem_14_d97e020a_b337_4547_8647_344285c6fd00(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_a4ab28e5_f9ed_407c_aa2c_62e8c848c0f4(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            map.put(i, map.getOrDefault(i, 0L) + 1);
        }
        for (Integer i : lst) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_12_89ea4055_5129_4aee_9e9c_4979a2bc2bcc(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_99e0d385_35f3_4758_b1f9_60a80d9fa5c6(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_5a588fa0_a8cc_425d_9a2b_f68a732aac65(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (int l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int max_count = 0;
        for (int l : map.keySet()) {
            if (map.get(l) > max_count) {
                max = l;
                max_count = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_13_6545e9db_640a_488c_b4bf_1316bc32978f(ArrayList<Integer> lst) {

        if (lst.size() == 0) {
            return -1;
        }
        int max = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_11_e6c03dbd_5698_4564_8f1b_1da318148a1f(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_17_487a9b77_bb2b_4906_8950_e76938681839(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_4_54dc6b84_d8d9_4aac_8a46_3a5c10b331d4(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i : lst) {
            if(map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for(int i : lst) {
            if(map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_35b71884_52a9_45c1_b8aa_38b151fbfe80(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_8_d9347604_7ae9_4699_a95b_5e3d35df81d8(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int max_freq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                max_freq = 1;
            } else if (l == max) {
                max_freq++;
            }
        }
        if (max_freq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_8_079e386e_2d6e_4e3a_8f2a_d76ecdc65225(ArrayList<Integer> lst) {
        int maxValue = -1;
        int maxCount = 0;
        for (Integer l : lst) {
            int count = Collections.frequency(lst, l);
            if (count > maxCount) {
                maxCount = count;
                maxValue = l;
            }
        }
        return maxValue;
    }

    
    public static int search_Problem_11_42efd88d_655d_4cad_b068_88364e957026(ArrayList<Integer> lst) {
        // Your code here
        return -1;
    }

    
    public static int search_Problem_17_78fba301_a269_4638_8e03_6ed10f2315f8(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_63c7680d_63d9_4547_a71d_d1febfcfacf8(ArrayList<Integer> lst) {
        // Your code here
        return -1;
    }

    
    public static int search_Problem_17_d33105fd_ae82_483d_8aec_d798583c84af(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_23_e41f95f8_35bf_4b22_baf9_f7dd84e04de5(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        for (Integer l : freq.keySet()) {
            if (freq.get(l) > max && l > 0) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_2ed0fa47_7c0a_4e2d_a206_eb63c3c8ec2a(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            if (freq == 0 || freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_16_1ade8355_3cd2_43be_92de_9052d03c4317(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_f33ca2cc_cee3_402e_9ae1_c7f309b495ae(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_17_73361bd0_0385_456d_bfc6_c35cd881f987(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq += i;
            if (freq > max) {
                max = freq;
            }
        }
        return max > 0 ? max : -1;
    }

    
    public static int search_Problem_16_cc5099b2_2c32_4401_a38a_5a5f1068c6c8(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_14_313d673f_72c9_461b_886e_f2c45414106d(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_16c89da2_7185_424f_8dd3_37721556e448(ArrayList<Integer> lst) {

        // Write your code here.
        // return -1;
        return lst.stream().max(Comparator.comparing(x -> x, Comparator.reverseOrder())).get();
    }

    
    public static int search_Problem_8_61536c47_e787_4ec0_ba39_9e7dd091652c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int i : lst) {
            if(i>0) {
                int freq = Collections.frequency(lst, i);
                if(freq>maxFreq) {
                    maxFreq = freq;
                    maxVal = i;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_13_1579013d_1449_480c_b590_98ba4e590b58(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_11_9b835a56_29f7_47ad_84b4_913706bf910f(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1 || freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_707b2625_500e_4722_86c2_23df7a9249e1(ArrayList<Integer> lst) {

        // your code here
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : lst) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_16_c9b94f5e_1c41_4254_9925_eeeaf62e67d2(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == -1) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_17_a5016074_e132_4000_9a85_0d6f58366b59(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_22_8d9acf83_59a9_4708_a5fa_229e15b01e6f(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_92fb837c_81a6_47a8_b0b7_03823f0559a3(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (int l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getKey() < entry.getValue() && entry.getKey() > max) {
                max = entry.getKey();
            }
        }
        return max;
    }

    
    public static int search_Problem_8_a87503d9_88b9_4c86_a40b_0f310e3d9040(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > max) {
                max = lst.get(i);
                maxFreq = 1;
            } else if (lst.get(i) == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_1_1efe6143_4ecc_4bce_a638_14b0252b8dcc(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = -1;
        int maxKey = -1;
        for (Integer i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxKey = i;
            }
        }
        if (maxKey == -1) {
            return -1;
        } else {
            return maxKey;
        }
    }

    
    public static int search_Problem_15_874b6e7e_c5ca_4364_9f07_386e22fb3ead(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (Integer i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxKey = i;
            }
        }
        if (max == 1) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_0_6114915a_0349_43b3_8277_0048ad384ca0(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            if (freq > i) {
                max = i;
                freq = i;
            } else if (freq == i) {
                freq++;
            }
        }
        return max;

    }

    
    public static int search_Problem_7_9d0b23d7_d309_4965_b633_533f51e72bb8(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq++;
            if(freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_20_f0bb2e09_aba5_4449_908c_19d46f25341e(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_18_57b3c05a_484e_4b8d_a2fa_599f6271d319(ArrayList<Integer> lst) {

        // your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        for (int l : map.keySet()) {
            if (map.get(l) >= l && l > max) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_5d509a83_b434_4710_808a_22a9e5cc1930(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_8_f76096c3_88e3_4b7e_a30f_8475a697a2dc(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_10_01ef0a80_621a_425c_8647_805f30677432(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().filter(e -> e.getKey() > 0 && e.getValue() >= e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_23_f67ac6c6_c4f6_4428_9f39_b6561862b179(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_23_61536c47_e787_4ec0_ba39_9e7dd091652c(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int i : lst) {
            if(i>0) {
                int freq = Collections.frequency(lst, i);
                if(freq>maxFreq) {
                    maxFreq = freq;
                    maxVal = i;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_1_8daa32b0_a742_41c7_8e7e_00da5e9460a3(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_77288631_aae5_47d5_b813_7ef37c92030d(ArrayList<Integer> lst) {
        if(lst.size() < 1) return -1;
        
        HashMap<Integer,Integer> hm = new HashMap<>();
        
        for(Integer i : lst)
            if(hm.containsKey(i)) {
                hm.put(i,hm.get(i) + 1);
            } else {
                hm.put(i, 1);
            }
        
        for(Integer i : lst) {
            if(hm.get(i) > 0) return i;
        }
        
        return -1;
    }

    
    public static int search_Problem_5_53ff8c35_e836_4e04_a369_bd8fa29213b8(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (int l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().filter(e -> e.getValue() > e.getKey()).max(Comparator.comparing(Map.Entry::getKey)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_23_083749b3_cdff_4705_b138_b3f0fbfa82ee(ArrayList<Integer> lst) {
        Integer max = -1;
        int counter = 0;
        for (Integer value : lst) {
            if (value > max) {
                counter = 0;
                max = value;
            }
            else if (value == max) {
                counter++;
            }
            else if (counter > 0) {
                return -1;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_8d669a90_440d_4a83_a3bb_96c55d024d8e(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                return entry.getKey();
            }
        }
        return -1;
    }

    
    public static int search_Problem_3_4d60ff40_b3e1_4eef_b7e2_7e2886d542f0(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_20_eb916da8_6f93_4acb_961d_f35cccf6daf6(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : lst) {
            if (map.get(i) >= i && i > 0) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_13_ed2334df_ad99_4d61_b70b_484bcc080d85(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            map.put(i, map.getOrDefault(i, 0L) + 1);
        }
        for (int i = lst.size(); i > 0; i--) {
            if (map.getOrDefault(i, 0L) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_19_553b982f_e39f_4f57_b88f_9e717eb4d935(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            int count = Collections.frequency(lst, i);
            if (count > maxCount) {
                max = i;
                maxCount = count;
            }
        }
        return maxCount >= max ? max : -1;
    }

    
    public static int search_Problem_13_edbc8149_405c_4540_8114_81429cb34261(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_20_354ecf8d_4879_4b4f_8d71_3add97b6560c(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxCount = 1;
            } else if (i == max) {
                maxCount++;
            }
        }
        if (maxCount < max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_24_5dda8a0c_d94d_4ca0_ad8a_7bece12d2252(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = lst.stream().filter(x -> x == val).count();
                if(freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_24_45c9e6c5_98c9_437c_8d64_afcd4802d532(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_15_711f4351_c248_412a_a2c3_aa186b45f8ad(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > max_freq) {
                max_freq = freq;
                max = i;
            }
        }
        if (max_freq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_1_77c5e688_8d9f_4446_b71f_afad034036e8(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) == max) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_9_7420df8f_2a31_4167_bf05_badb6587b9a5(ArrayList<Integer> lst) {
        int maxVal = Integer.MIN_VALUE, maxFreq = Integer.MIN_VALUE;
        for (Integer val : lst) {
            if (val > maxVal) {
                maxVal = val;
            }
            if (val > maxFreq) {
                maxFreq = val;
            }
        }
        return maxVal > 0 ? maxVal : -1;
    }

    
    public static int search_Problem_0_bab97e06_2cc2_4b9d_95bf_331e4fbdd529(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_23_7fe02556_39eb_4dc9_963d_b2775886e7df(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_36a76ad6_fd99_4034_a81f_dfd88e879ac5(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            if (freq == i) {
                freq++;
            } else {
                freq = 1;
            }
            if (max < freq) {
                max = freq;
            }
        }
        return max;

    }

    
    public static int search_Problem_2_225c38f8_d7ef_4736_93c3_24d79881f2d3(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0L) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) == max) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_17_2f2c4628_7c24_4ec4_b67a_72286aac61e9(ArrayList<Integer> lst) {

        // Your code here
        int max = 0;
        int maxFreq = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
            if (map.get(i) > maxFreq) {
                max = i;
                maxFreq = map.get(i);
            }
        }
        return maxFreq > max ? max : -1;
    }

    
    public static int search_Problem_3_16fef4e7_fb74_4448_8b50_e6600a3a6a23(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxCount) {
                max = l;
                maxCount = map.get(l);
            }
        }
        if (maxCount == 1) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_19_ccae73c1_f65b_4b68_87fe_917e032a2589(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_6972ecf1_53fd_404e_817b_0416e98a2a8b(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i) {
                maxFreq = i;
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_3_4ceaf7a9_4bfc_4add_b4f0_c0f6b3abf303(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_19_132f983a_6c2c_4a1f_a1bc_48685fd7ed8b(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer num : lst) {
            if (map.containsKey(num)) {
                map.put(num, map.get(num) + 1);
            } else {
                map.put(num, 1);
            }
        }
        for (Integer num : map.keySet()) {
            if (map.get(num) >= num) {
                return num;
            }
        }
        return -1;
    }

    
    public static int search_Problem_19_ed2334df_ad99_4d61_b70b_484bcc080d85(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            map.put(i, map.getOrDefault(i, 0L) + 1);
        }
        for (int i = lst.size(); i > 0; i--) {
            if (map.getOrDefault(i, 0L) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_19_c44b5dc4_ad4b_4230_ac68_a4b56f43f8d7(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_24_986759fb_82e4_41fd_9935_119147e4310b(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_e1aa36e8_b670_467d_8ba1_abbfab213111(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxCount = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxCount) {
                max = entry.getKey();
                maxCount = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_9_c3b13b72_a153_49c4_b23f_d7effdd8c367(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_44a9f443_fc83_40f9_9036_8ab92cba5e6c(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_0b8ccd56_1c29_4f85_9c0f_9206c0e83a61(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int max_count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                max_count = 1;
            } else if (i == max) {
                max_count++;
            }
        }
        if (max_count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_14_7524d6ff_4304_4581_b760_bcb1b7bdb987(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_19_4fd9ef25_b212_4564_a0e8_081b2008394f(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i : lst) {
            if(map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for(int i : map.keySet()) {
            if(map.get(i) > max && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_a60653f7_4bb2_4af0_934a_005813528595(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_11_0de85f8b_acfd_4c00_b2d4_f77363c0777f(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_14_54bdc5fb_4c9c_4fac_aa26_2ee3e0a8a061(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        int count = 0;
        for (int i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_23_b6a4fe3c_e799_49c3_955b_7473ff4e27ec(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i : lst) {
            if (i > 0 && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_1_b1d41f5c_1f82_4bbb_a4d0_633c3dc854f3(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_11_98770eb3_7c2a_4828_9969_7d2cd7e09286(ArrayList<Integer> lst) {
        int mostFrequent = -1;
        for (int l : lst) {
            int frequency = lst.stream().filter(x -> x == l).count();
            if (frequency >= mostFrequent) {
                mostFrequent = l;
            } else if (frequency < mostFrequent) {
                return -1;
            }
        }
        return mostFrequent;
    }

    
    public static int search_Problem_0_57f18433_187e_4649_991e_f4a5a0ff1a10(ArrayList<Integer> lst) {
        // BEGIN
            Map<Integer, Integer> dictionary = new HashMap<Integer, Integer>();
            for (int el : lst) {
                if (dictionary.containsKey(el)) {
                    dictionary.put(el, dictionary.get(el) + 1);
                } else {
                    dictionary.put(el, 1);
                }
            }
            int max = -1;
            for (int key : dictionary.keySet()) {
                if (key >= dictionary.get(key) && key > max) {
                    max = key;
                }
            }
            return max;
        // END
    }

    
    public static int search_Problem_2_86b212c1_2474_4c36_aa95_a72ba990a3e5(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_17_a30e2ddc_8ca9_4bb3_aafc_37fb6c1416c9(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l,  1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > entry.getKey()) {
                return entry.getKey();
            }
        }
        return -1;
    }

    
    public static int search_Problem_16_67b6b72c_b9ae_4569_b45e_303baa0345af(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_910d2de5_22fe_4b1c_b9ef_317e08fb524d(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1L);
            }
        }
        Integer max = -1L;
        for (Integer l : map.keySet()) {
            if (l > 0 && map.get(l) >= l) {
                max = l;
                break;
            }
        }
        return max;
    }

    
    public static int search_Problem_15_6fb711bd_597d_462c_9e6d_6115fdf55fc4(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int i : lst) {
            if(i == 0) continue;
            int freq = Collections.frequency(lst, i);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_12_d5787934_3bb2_4433_9d85_c748cc6374db(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_20_fe0ba967_2d87_4e9a_9910_12affbaf7abb(ArrayList<Integer> lst) {

        // Write your code here
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_17_28084cab_464b_408e_b679_c23d56f0a015(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_9_c13d803b_d252_49d8_8325_b8a077cc7935(ArrayList<Integer> lst) {
        int greatestVal = -1;
        int greatestFreq = 0;
        for (int e : lst) {
            if (e > 0 && e >= greatestFreq) {
                greatestVal = e;
                greatestFreq = e;
            } else if (e > 0 && e < greatestFreq) {
                greatestFreq = e;
            }
        }
        if (greatestVal != -1) {
            return greatestVal;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_22_f35be621_bece_4853_baad_e0b1af1bb83b(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            if (freq < i) {
                freq = i;
                max = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_12_002cfffd_dea8_4915_9550_b5e8caf67023(ArrayList<Integer> lst) {

        int max = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_4_b2c715bc_b0ad_47ae_956b_20bf9af1a071(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_2ac433cc_9d94_4f88_8207_97bc3d906dad(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        int currFreq = -1;
        for (int val : lst) {
            if (currFreq == -1) {
                currFreq = val;
            } else if (currFreq == val) {
                currFreq++;
            } else {
                if (currFreq > maxFreq) {
                    maxFreq = currFreq;
                    maxVal = val;
                }
                currFreq = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_5_8ba8e236_8895_4c97_90a7_112bad88532e(ArrayList<Integer> lst) {
        int maxFreq = 0;
        int maxVal = 0;

        List<Integer> list = lst.stream().distinct().sorted(Comparator.reverseOrder()).collect(Collectors.toList());
        Collections.sort(list);

        for (int i : list) {
            int freq = list.stream().filter(j -> j == i).count();
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = i;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_5_d149f240_5861_48fa_a65e_b9ccaebdb446(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxFreq = 0;
        int currFreq = 0;
        int curr = 0;
        for (int i = 0; i < lst.size(); i++) {
            curr = lst.get(i);
            currFreq = 0;
            for (int j = 0; j < lst.size(); j++) {
                if (lst.get(j) == curr) {
                    currFreq++;
                }
            }
            if (currFreq > maxFreq) {
                max = curr;
                maxFreq = currFreq;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_21_e87ee65d_2432_4cd6_9fa7_1245a67fd8b2(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_3_0765c1df_dfed_4bf5_a362_ae043f84ba89(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        int currFreq = -1;
        for(int val : lst) {
            currFreq = Collections.frequency(lst, val);
            if(currFreq > maxFreq) {
                maxFreq = currFreq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_12_57f18433_187e_4649_991e_f4a5a0ff1a10(ArrayList<Integer> lst) {
        // BEGIN
            Map<Integer, Integer> dictionary = new HashMap<Integer, Integer>();
            for (int el : lst) {
                if (dictionary.containsKey(el)) {
                    dictionary.put(el, dictionary.get(el) + 1);
                } else {
                    dictionary.put(el, 1);
                }
            }
            int max = -1;
            for (int key : dictionary.keySet()) {
                if (key >= dictionary.get(key) && key > max) {
                    max = key;
                }
            }
            return max;
        // END
    }

    
    public static int search_Problem_4_c4c6af8e_3dcb_436d_b32a_b0a995bcfe2a(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                max_freq = Collections.frequency(lst, i);
            }
        }
        if (max_freq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_2_a003edd3_51c6_44a9_b2ce_4dee2c07da85(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = lst.stream().filter(v -> v == val).count();
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_2_d3d9dbfc_1722_4c1d_90d3_dce4e5a084d6(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_9_afc0f7ec_bfe5_4707_9919_7e615d90612f(ArrayList<Integer> lst) {

        int greatest = 0;
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > greatest) {
                greatest = i;
            }
        }
        return greatest;
    }

    
    public static int search_Problem_20_fa12ac0f_d032_44a7_a218_2040f7ef6790(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                max_freq = Collections.frequency(lst, i);
            }
        }
        if (max_freq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_2_56e4132f_3c41_4286_bf8a_2fe3f4cddd95(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                max = Math.max(max, entry.getKey());
            }
        }
        return max;
    }

    
    public static int search_Problem_15_597e05cb_850b_49fb_afe3_18bc354dd74a(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1) {
                freq = i;
                max = i;
            } else if (freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_16_745a129d_4116_42cb_be7c_705ade38b03b(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            int count = Collections.frequency(lst, i);
            if (count > maxCount) {
                maxCount = count;
                max = i;
            }
        }
        return maxCount >= max ? max : -1;
    }

    
    public static int search_Problem_6_8d5ccef5_0a87_4e3d_b458_c901f3828dd1(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_5_b9dd5313_3e83_4a6b_90dd_75ad2556173b(ArrayList<Integer> lst) {

        int max = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
            }
        }
        if (max == 0) {
            return -1;
        }
        int count = 0;
        for (Integer l : lst) {
            if (l == max) {
                count++;
            }
        }
        if (count >= 2) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_8_082237b1_df40_428a_93c7_cab6c457b0c4(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        int max = 0;
        for (int i : lst) {
            if (map.get(i) > i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_9_a5016074_e132_4000_9a85_0d6f58366b59(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_16_88912f6e_0791_44e6_a710_88218b3f3050(ArrayList<Integer> lst) {
        // Your code here
        return -1;
    }

    
    public static int search_Problem_12_5e79698c_333c_4a00_b93b_9ef2a3a69fae(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxCount = 1;
            } else if (i == max) {
                maxCount++;
            }
        }
        for (int i : lst) {
            if (i == max && maxCount >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_12_0cf73034_0194_4606_967f_b4c030af213f(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_17_56e4132f_3c41_4286_bf8a_2fe3f4cddd95(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                max = Math.max(max, entry.getKey());
            }
        }
        return max;
    }

    
    public static int search_Problem_3_fda6416f_ba62_46fa_9dce_b0a779f4ff86(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_4_c08942a7_56d3_430a_bbcb_8a6ff3d9a909(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_0cf9d3b9_cf12_40f0_a2b9_3e695d6c3b2d(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_bb502059_8a6a_400a_9795_c5c21efdd979(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : lst) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_15_075e7772_e3eb_4e09_bf27_b7364f3adadb(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                maxKey = l;
            }
        }
        if (max == 1) {
            return -1;
        }
        return maxKey;
    }

    
    public static int search_Problem_23_4e2a0a04_f9a9_49f5_8974_f8303201d523(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_888e5da3_8912_47e2_8fab_e2d35337f456(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_3c7429de_ef0b_4943_9311_e2ba85e27244(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1) {
                freq = i;
                max = i;
            } else if (freq > i) {
                freq = i;
                max = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_12_9db8f2ac_f0b9_4ecb_b90b_80fbc36f7e6a(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_f286a023_c84a_4cb4_a764_c8843e21a3c8(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_23_c57aaf0c_ba4c_4d8f_97e4_4d066206b275(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1L);
            }
        }
        Integer max = -1L;
        for (Integer l : map.keySet()) {
            if (l > 0 && map.get(l) >= l) {
                max = l;
                break;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_bca22f92_9217_4891_8acd_25733f5dc8df(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_5a5558b1_8e8b_4383_9295_ff23f6fb764a(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > maxFreq) {
                max = i;
                maxFreq = freq;
            }
        }
        if (maxFreq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_12_a2f389cd_288a_4986_be0f_5cedd3c57758(ArrayList<Integer> lst) {
        if (lst.isEmpty()) {
            return -1;
        }
        Map<Integer, Integer> freq = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        Integer max = null;
        for (Integer l : freq.keySet()) {
            if (freq.containsKey(max) && freq.containsKey(l)) {
                continue;
            }
            if (freq.containsKey(max) && freq.get(l) >= freq.get(max)) {
                continue;
            }
            max = l;
        }
        return max;
    }

    
    public static int search_Problem_16_0b430c68_e358_4349_96ce_58d60529d961(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_3_d3d9dbfc_1722_4c1d_90d3_dce4e5a084d6(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_b71e261f_c776_4411_a685_746f0de9c888(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_ff957fd4_2307_4277_a354_50d1c8f8cf4f(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (maxFreq < val) maxFreq = val;
            if (maxVal < val) maxVal = val;
        }
        return maxVal;

    }

    
    public static int search_Problem_16_1dfd4fcf_42c9_4cae_8e26_ff239a13c4fa(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_18_6fb711bd_597d_462c_9e6d_6115fdf55fc4(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int i : lst) {
            if(i == 0) continue;
            int freq = Collections.frequency(lst, i);
            if(freq > maxFreq) {
                maxFreq = freq;
                maxVal = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_8_22f1c45b_60b1_4276_9ede_02fa2ef48827(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq > lst.size()? -1 : max;
    }

    
    public static int search_Problem_15_2f34c11d_7b90_4415_aab8_b0719ee95756(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_f8d913c4_b7aa_4790_bb0f_186ab8f79c81(ArrayList<Integer> lst) {
        int result = -1;
        int max = -1;
        for(int i : lst) {
            if(i>0) {
                max = Math.max(max, i);
            }
        }
        if(max>0) {
            int freq = Collections.frequency(lst, max);
            if(freq>=max) {
                result = max;
            }
        }
        return result;
    }

    
    public static int search_Problem_10_88e50df2_32d5_4664_97b1_89118495e0bf(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for(Integer l : lst) {
            if(map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for(Integer l : map.keySet()) {
            if(map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_9_fa12ac0f_d032_44a7_a218_2040f7ef6790(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                max_freq = Collections.frequency(lst, i);
            }
        }
        if (max_freq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_20_32cf49dd_c306_489c_a08c_237166bf8e0d(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_4ca050f1_5ae0_4732_a5e3_1a14ae559b28(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_4_4fd9ef25_b212_4564_a0e8_081b2008394f(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i : lst) {
            if(map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for(int i : map.keySet()) {
            if(map.get(i) > max && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_35eb9028_5680_43ad_882f_ff56830995fd(ArrayList<Integer> lst) {
        int max = -1;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (freq > max) {
                max = freq;
            }
            if (i == 0) {
                freq--;
            }
        }
        return max;

    }

    
    public static int search_Problem_6_d74d9d4c_bc0f_41f9_9439_b2fc86955ad1(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_367c1eaa_e59a_47d9_af52_a85bc171d08e(ArrayList<Integer> lst) {

        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_9_f7adaaaa_e4ce_448f_b4da_6b1fc7c4bd59(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxFreq = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > maxFreq) {
                max = l;
                maxFreq = map.get(l);
            }
        }
        return max;
    }

    
    public static int search_Problem_21_b8d98c6c_f366_4331_b9d7_e5aee0966a87(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == -1) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_10_392bbd95_1e25_4d49_a296_dca3ccc152a9(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_11_3595d5e4_acfb_45db_9df4_69276cd8efad(ArrayList<Integer> lst) {
        int maxVal = -1;
        int freq = -1;
        for(Integer val : lst) {
            freq = Collections.frequency(lst, val);
            if(freq >= val) break;
            maxVal = val;
        }
        return maxVal;
    }

    
    public static int search_Problem_4_a1432b05_9540_4065_983f_1e332aa25d48(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_17_496aa325_e913_485d_af8c_d6fe3b24c3b8(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > maxFreq) {
                maxFreq = freq;
                max = i;
            }
        }
        if (maxFreq < max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_21_7ad8c680_4f0c_4b72_bbfe_365e5afda47d(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_11_b7346ad9_9a36_48c1_ac46_8418d02671ac(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max && Collections.frequency(lst, i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_8_fe7c3daa_1130_4549_8c1a_d21aaaa3a96a(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int maxFreq = -1;
        for (int num : lst) {
            if (num > max) {
                max = num;
                maxFreq = 1;
            } else if (num == max) {
                maxFreq++;
            }
        }
        return maxFreq >= max ? max : -1;
    }

    
    public static int search_Problem_9_56baaa71_8093_4ef3_ae80_83e3e388a438(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_18_bf00fd1b_1787_4a90_a8fd_74c344291848(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_14_dffe57b8_3c6f_4f6e_9e6e_c7afdf1ceff7(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : lst) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_13_7aeb0d9c_ace9_42c1_b172_f9328170aa2e(ArrayList<Integer> lst) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1L);
            }
        }
        int max = -1;
        for (Integer i : map.keySet()) {
            if (i <= map.get(i) && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_134fdf93_a76e_4d33_9346_0091bd6132fa(ArrayList<Integer> lst) {

        // Create a map to store the frequency of each element
        Map<Integer, Integer> freqMap = new HashMap<>();
        for (int num : lst) {
            freqMap.put(num, freqMap.getOrDefault(num, 0L) + 1);
        }
        // Iterate through the map to find the greatest integer that satisfies the condition
        for (int num : freqMap.keySet()) {
            if (freqMap.get(num) >= num) {
                return num;
            }
        }
        // If no such integer exists, return -1
        return -1;
    }

    
    public static int search_Problem_16_f663888b_49c0_4cc0_bada_097ac0b02fb0(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        for(int i : lst){
            if(i > max && Collections.frequency(lst, i) >= i)
                max = i;
        }
        return max;
    }

    
    public static int search_Problem_18_9ddaa53e_211e_44fc_80d0_8586daeabb49(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l,  1);
            }
        }
        int max = -1;
        int max_key = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                max_key = entry.getKey();
            }
        }
        if (max_key > 0) {
            return max_key;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_12_f7998e71_317b_452d_871a_99ace61717ce(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i : lst) {
            if(map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            }
            else {
                map.put(i, 1);
            }
        }
        int max = -1;
        for(int i : map.keySet()) {
            if(map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_222294e4_a374_4689_bd58_3e0772d942f4(ArrayList<Integer> lst) {
        Collections.sort(lst);
        for (int x : lst) {
            if (x > 0) return x;
        }
        return -1;
    }

    
    public static int search_Problem_6_24c5dd80_8386_4ee1_9f6f_454049e7515f(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : freq.keySet()) {
            if (freq.get(l) > max) {
                max = freq.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_0_6ab494e2_4f2d_4c8a_86c3_d3d367fec4dc(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            if (freq.containsKey(l)) {
                freq.put(l, freq.get(l) + 1);
            } else {
                freq.put(l, 1);
            }
        }
        int max = 0;
        int max_val = 0;
        for (Integer l : freq.keySet()) {
            if (freq.get(l) > max) {
                max = freq.get(l);
                max_val = l;
            }
        }
        if (max == 0) {
            return -1;
        }
        return max_val;
    }

    
    public static int search_Problem_20_496aa325_e913_485d_af8c_d6fe3b24c3b8(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > maxFreq) {
                maxFreq = freq;
                max = i;
            }
        }
        if (maxFreq < max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_7_35e693d4_c689_45cb_85a2_5af26766ca5a(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        int count = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                count = 1;
            } else if (l == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_10_48dbb2ca_df98_461f_8817_aadf6564751c(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_9be68ec5_0ce5_48dd_aa8c_986716611188(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for (Integer i : map.keySet()) {
            if (map.get(i) > map.get(max) && map.get(i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_b4d18c45_b4ac_4bd4_a8d0_0ecc5ea17e8a(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq += i;
            if(freq > max) {
                max = freq;
            }
        }
        return max;

    }

    
    public static int search_Problem_18_8e08dcff_7f3f_4331_8395_c0270c342337(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxCount = 0;
        for (int val : lst) {
            int count = Collections.frequency(lst, val);
            if (count > maxCount) {
                maxCount = count;
                maxVal = val;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_15_12f8fb30_1b07_49d7_b530_622e50ce2cea(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_13_a26930f1_6ac9_49cc_9e8b_2b0bb79b3aa8(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_5_79f3fcb8_0b1c_4b43_a282_5affeed2d1fa(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_17_f28556d7_8a85_47c9_9de1_118516293d01(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq < 2) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_17_c57aaf0c_ba4c_4d8f_97e4_4d066206b275(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1L);
            }
        }
        Integer max = -1L;
        for (Integer l : map.keySet()) {
            if (l > 0 && map.get(l) >= l) {
                max = l;
                break;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_ee846170_4308_42c2_8091_d199abe733d3(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_1_28ccfdc0_cef2_41d6_9ccb_fac153b98d80(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for(int i : lst) {
            if(map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for(int i : map.keySet()) {
            if(map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_0689962a_1a77_4b98_bd8e_3354bbafc106(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                max_freq = 1;
            } else if (l == max) {
                max_freq++;
            }
        }
        if (max_freq == 0) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_21_d2bfefac_a1c1_4075_b9b0_2e8e83c57da9(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_17_2504374f_70da_4de9_91c9_b5fe595c524a(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (int l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int max_count = -1;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max_count) {
                max = entry.getKey();
                max_count = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_5_5f3e9c8d_974f_4ced_8c7a_7d862358da27(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_7_41912114_448d_4efd_898f_5af1f815e85f(ArrayList<Integer> lst) {

        int max = -1;
        int maxCount = 0;
        for (int i : lst) {
            int count = Collections.frequency(lst, i);
            if (i > max && count >= i) {
                max = i;
                maxCount = count;
            }
        }
        return maxCount >= max ? max : -1;
    }

    
    public static int search_Problem_14_b2626fec_e3dc_4183_9c8d_94e52e63ead5(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        } else {
            return max;
        }
    }

    
    public static int search_Problem_18_f058ba41_e5a0_4800_9b6e_ef0c19812839(ArrayList<Integer> lst) {
        return lst.stream().filter(i -> Collections.frequency(lst, i) >= i).max(Comparator.naturalOrder()).orElse(-1);
    }

    
    public static int search_Problem_15_8e4345e3_80db_4f39_97e7_3038f94318d5(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_2_db03fc5f_cfd1_448d_91aa_d15a80adf926(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        int currFreq = -1;
        for (int val : lst) {
            currFreq = Collections.frequency(lst, val);
            if (currFreq > maxFreq) {
                maxFreq = currFreq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_8_7135436b_b56f_4caa_ab64_f95e389e0db0(ArrayList<Integer> lst) {

        // Write your code here.
        int max = 0;
        int max_count = 0;
        for (int i = 0; i < lst.size(); i++) {
            int count = 0;
            for (int j = 0; j < lst.size(); j++) {
                if (lst.get(j) == lst.get(i)) {
                    count++;
                }
            }
            if (count > max_count) {
                max = lst.get(i);
                max_count = count;
            }
        }
        if (max_count == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_6_a3e98018_5032_4202_b6c3_0635ed1bb511(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_8f6da157_fc0d_4a27_a67a_1314b5ed76f0(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            int freq = Collections.frequency(lst, val);
            if(freq >= maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_24_749134b5_07b8_46a7_9feb_5b2448fed9cb(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_18_ed62a033_a5ba_4ea8_8039_16d86be09ee2(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = -1;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > maxFreq) {
                max = i;
                maxFreq = freq;
            }
        }
        return max;
    }

    
    public static int search_Problem_11_4fd882ea_b6c5_4c08_9588_69d197f81ab3(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_21_2c864c4e_50fc_4ebc_b82d_1d840682f41d(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_19_3c16cef9_2632_4ab9_8c7d_9d122965ee4b(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_5_477dc8ce_181c_494b_a11d_8facc9eacc21(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_3_8d65d1f5_05ea_4fda_947b_7c21602c76a0(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > 0) {
                int freq = Collections.frequency(lst, val);
                if(freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_16_2e6b3252_abe4_4c1b_9aeb_7badccaf75da(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_22_33109515_e93c_4c5d_b0a1_c3a2dbf94bbb(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_16_c13d803b_d252_49d8_8325_b8a077cc7935(ArrayList<Integer> lst) {
        int greatestVal = -1;
        int greatestFreq = 0;
        for (int e : lst) {
            if (e > 0 && e >= greatestFreq) {
                greatestVal = e;
                greatestFreq = e;
            } else if (e > 0 && e < greatestFreq) {
                greatestFreq = e;
            }
        }
        if (greatestVal != -1) {
            return greatestVal;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_5_dd497c4f_eb22_47ef_9a52_7253c3e3b125(ArrayList<Integer> lst) {

        int max = -1;
        for (Integer i : lst) {
            if (i > max) {
                max = i;
            }
        }
        if (max == -1) {
            return -1;
        }
        int count = 0;
        for (Integer i : lst) {
            if (i == max) {
                count++;
            }
        }
        if (count >= 2) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_11_35eb9028_5680_43ad_882f_ff56830995fd(ArrayList<Integer> lst) {
        int max = -1;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (freq > max) {
                max = freq;
            }
            if (i == 0) {
                freq--;
            }
        }
        return max;

    }

    
    public static int search_Problem_1_2d4e15bd_de63_41b2_98fa_b8f75008eb08(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_17_8264ad36_a4e9_4c73_9fde_0abbda91b569(ArrayList<Integer> lst) {

        if (lst.size() == 0) {
            return -1;
        }
        int max = 0;
        int count = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > max) {
                max = lst.get(i);
                count = 1;
            } else if (lst.get(i) == max) {
                count++;
            }
        }
        if (count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_5_214c41c5_c843_456e_936a_0b8ae9406677(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max && Collections.frequency(lst, i) >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_fdbdbebd_bc4e_4bf4_9041_aa13dd322cca(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        for (int i : lst) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_12_438549b7_92be_43b1_abd7_13aa5470ec3b(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_3_79caf2ef_647d_44fe_95d9_29a20c8e4884(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_24_0cf73034_0194_4606_967f_b4c030af213f(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = -1;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_11_b03c9704_2c46_4a30_935a_372035d3d771(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? max : -1;
    }

    
    public static int search_Problem_14_ee846170_4308_42c2_8091_d199abe733d3(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_10_f286a023_c84a_4cb4_a764_c8843e21a3c8(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (Integer l : lst) {
            if (l > max) {
                max = l;
                maxFreq = 1;
            } else if (l == max) {
                maxFreq++;
            }
        }
        if (maxFreq == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_16_040d945a_b0fc_40b8_8f9a_acdf6a3d6eab(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream()
                .filter(e -> e.getValue() > e.getKey())
                .max(Comparator.comparing(Map.Entry::getKey))
                .map(Map.Entry::getKey)
                .orElse(-1);
    }

    
    public static int search_Problem_8_00833c3b_34bf_4783_a4b9_ed68d217b82c(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_10_f407d1cf_803c_474f_82e7_c2e8e3d9d3c5(ArrayList<Integer> lst) {
        int ans = -1;
        Collections.sort(lst);
        System.out.println(lst);
        
        for(Integer value : lst) {
            if(value >= 0 && ans > value) {
                ans = value;
            }
        }
        
        return ans;
    }

    
    public static int search_Problem_19_45c9e6c5_98c9_437c_8d64_afcd4802d532(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        int ans = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                ans = l;
            }
        }
        return ans;
    }

    
    public static int search_Problem_13_4fd9ef25_b212_4564_a0e8_081b2008394f(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i : lst) {
            if(map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for(int i : map.keySet()) {
            if(map.get(i) > max && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_002cfffd_dea8_4915_9550_b5e8caf67023(ArrayList<Integer> lst) {

        int max = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_13_dc7acd40_8182_4bc2_9ca8_d6779a0ee2bf(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_28a66528_b5c5_4a51_b874_82f91607e7e6(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxVal == -1 || maxVal < i) {
                maxVal = i;
                maxFreq = Collections.frequency(lst, i);
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_13_db1968e0_5bdd_449e_898a_f34155a668ce(ArrayList<Integer> lst) {
        int maxVal = -1;
        int freqOfMaxVal = -1;

        for(int i : lst) {
            if(freqOfMaxVal == -1 || freqOfMaxVal >= i) {
                maxVal = i;
                freqOfMaxVal = lst.stream().filter((x) -> x == i).count();
            }
        }

        return maxVal;
    }

    
    public static int search_Problem_14_59babbb8_8050_47af_8779_41cb22b79572(ArrayList<Integer> lst) {
        int max = -1;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        return maxFreq >= lst.size()? max : -1;
    }

    
    public static int search_Problem_3_3aff0de2_262c_411f_92b6_3cfb1d0ed768(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_17_bbee6bf9_e7e1_4e4f_a296_691214b73bcf(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        int maxCount = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxCount) {
                max = entry.getKey();
                maxCount = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_3_e39f3662_998c_4232_a338_1769da571e6e(ArrayList<Integer> lst) {
        int max = 0;
        int count = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                count = 1;
            } else if (i == max) {
                count++;
            }
        }
        if (count < lst.size()) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_0_e3c5540d_4395_440e_8d1d_c33aa55084ae(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_bbee6bf9_e7e1_4e4f_a296_691214b73bcf(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = -1;
        int maxCount = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > maxCount) {
                max = entry.getKey();
                maxCount = entry.getValue();
            }
        }
        return max;
    }

    
    public static int search_Problem_3_56811ddc_b69c_43a7_9a14_fbd669ad45c3(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_5_8f8c6c16_4160_4918_9a98_39990f17f21a(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_ee1f8dd3_3e0d_402d_981b_b84335ae5ded(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq >= maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_6_0bd0e132_c8bc_47ea_89f4_39a6754afc1b(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_18_33109515_e93c_4c5d_b0a1_c3a2dbf94bbb(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                maxCount++;
            }
        }
        if (maxCount >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_23_5aa3fa29_a18e_427a_89f7_ce7b6ec148bc(ArrayList<Integer> lst) {
        int frequency = lst.stream().filter(l -> l > 0).count();
        return frequency > lst.stream().filter(l -> l == frequency).findFirst().get() ? frequency : -1;
    }

    
    public static int search_Problem_5_ad571352_2353_415a_9c1f_511eea418187(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (int i : lst) {
            freq.put(i, freq.getOrDefault(i, 0) + 1);
        }
        int max = 0;
        int max_key = 0;
        for (Map.Entry<Integer, Integer> entry : freq.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                max_key = entry.getKey();
            }
        }
        if (max == 0) {
            return -1;
        }
        return max_key;
    }

    
    public static int search_Problem_24_e10d3f24_ad6a_4675_9848_4f6816faf14b(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq++;
            if(freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_0_ee9f81bc_5517_4132_a194_b1703219898b(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l,  1);
            }
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l && l > max) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_a072df67_4de4_4a90_989e_31fa6738d407(ArrayList<Integer> lst) {

        // Write your code here
        int max = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_15_459fe921_e172_41b8_8416_3429e9220c4c(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_22_d790ed4c_cb48_43e0_9783_f65d6b5e8c63(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_36b4d001_5b52_4083_b0ed_0210ca2abb2b(ArrayList<Integer> lst) {

        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i = max; i > 0; i--) {
            int count = 0;
            for (int j : lst) {
                if (j == i) {
                    count++;
                }
            }
            if (count >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_13_28ccfdc0_cef2_41d6_9ccb_fac153b98d80(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for(int i : lst) {
            if(map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for(int i : map.keySet()) {
            if(map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_4e2a0a04_f9a9_49f5_8974_f8303201d523(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_11_926dce09_9027_41e0_8c00_dcea5875b3ec(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1L);
            }
        }
        int max = 0;
        int maxKey = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                maxKey = l;
            }
        }
        return maxKey;
    }

    
    public static int search_Problem_1_50c5acab_3864_45c4_a006_57a226b152fc(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i) {
                maxFreq = i;
                maxVal = i;
            } else if (maxFreq == i) {
                maxVal = Math.max(maxVal, i);
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_3_1f431f5d_5563_4792_b201_0d6315f4e178(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        int max = lst.get(0);
        int count = 1;
        for (int i = 1; i < lst.size(); i++) {
            if (lst.get(i) == max) {
                count++;
            } else if (lst.get(i) > max) {
                max = lst.get(i);
                count = 1;
            }
        }
        if (count >= max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_8_9fd98f2f_8343_4bb2_917f_3fc201287b67(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int maxFreq = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
                maxFreq = 1;
            } else if (i == max) {
                maxFreq++;
            }
        }
        if (maxFreq < max) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_1_20ad7ae4_679a_4195_85ed_7a85a89f1389(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        if (max == -1) {
            return -1;
        }
        int freq = 0;
        for (int i : lst) {
            if (i == max) {
                freq++;
            }
        }
        if (freq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_1_77288631_aae5_47d5_b813_7ef37c92030d(ArrayList<Integer> lst) {
        if(lst.size() < 1) return -1;
        
        HashMap<Integer,Integer> hm = new HashMap<>();
        
        for(Integer i : lst)
            if(hm.containsKey(i)) {
                hm.put(i,hm.get(i) + 1);
            } else {
                hm.put(i, 1);
            }
        
        for(Integer i : lst) {
            if(hm.get(i) > 0) return i;
        }
        
        return -1;
    }

    
    public static int search_Problem_6_0c910242_f1ce_4ba0_98fd_4ee16ebc5a8e(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        for(int i : lst){
            if(lst.stream().filter(x -> x == i).count() >= i){
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_17_9e47b236_3907_4993_94f8_33e8a1a1b8a4(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_5f85706c_d5e2_45f8_a076_be1f06d10a8f(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxCount = 0;
        for (int val : lst) {
            if (val == 0)
                continue;
            if (maxVal == -1 || val > maxVal) {
                maxVal = val;
                maxCount = 0;
            } else {
                ++maxCount;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_20_c740e4a4_54cd_4bf8_8060_fccabe2a3d6d(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        int currFreq = 0;
        int curr = 0;
        for (int i : lst) {
            currFreq = lst.stream().filter(x -> x == i).count();
            if (currFreq > maxFreq) {
                maxFreq = currFreq;
                curr = i;
            }
        }
        return curr;
    }

    
    public static int search_Problem_20_f0c2bec4_b033_48c0_99d7_eb8bc3d12b50(ArrayList<Integer> lst) {

        // Write your code here.
        int max = -1;
        int max_count = 0;
        for(int i : lst) {
            if(i > max) {
                max = i;
                max_count = 1;
            } else if(i == max) {
                max_count++;
            }
        }
        if(max_count >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_10_a593c4c9_7213_4be3_87a3_cf071b849e81(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        int max = 0;
        for (Integer i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
            }
        }
        for (Integer i : map.keySet()) {
            if (map.get(i) == max) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_24_88e50df2_32d5_4664_97b1_89118495e0bf(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for(Integer l : lst) {
            if(map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for(Integer l : map.keySet()) {
            if(map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_17_fe08d895_fc1e_485c_80bd_def6dd00410f(ArrayList<Integer> lst) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        int max = 0;
        for (int i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_5a19afe3_b067_4205_8dab_b3039477701d(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i > max) {
                int count = 0;
                for (int j : lst) {
                    if (i == j) {
                        count++;
                    }
                }
                if (count >= i) {
                    return i;
                }
            }
        }
        return -1;
    }

    
    public static int search_Problem_1_553b982f_e39f_4f57_b88f_9e717eb4d935(ArrayList<Integer> lst) {

        int max = 0;
        int maxCount = 0;
        for (int i : lst) {
            int count = Collections.frequency(lst, i);
            if (count > maxCount) {
                max = i;
                maxCount = count;
            }
        }
        return maxCount >= max ? max : -1;
    }

    
    public static int search_Problem_8_8d669a90_440d_4a83_a3bb_96c55d024d8e(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                return entry.getKey();
            }
        }
        return -1;
    }

    
    public static int search_Problem_22_4f170531_8429_4e57_bbf9_26df9c2060c9(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        int maxKey = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
                maxKey = l;
            }
        }
        return maxKey;
    }

    
    public static int search_Problem_8_12072b01_a004_4701_aa1d_c19533c9faac(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_c57aaf0c_ba4c_4d8f_97e4_4d066206b275(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1L);
            }
        }
        Integer max = -1L;
        for (Integer l : map.keySet()) {
            if (l > 0 && map.get(l) >= l) {
                max = l;
                break;
            }
        }
        return max;
    }

    
    public static int search_Problem_19_60dfd769_2160_4c21_9271_c907999e1afa(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_20ad7ae4_679a_4195_85ed_7a85a89f1389(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        if (max == -1) {
            return -1;
        }
        int freq = 0;
        for (int i : lst) {
            if (i == max) {
                freq++;
            }
        }
        if (freq >= max) {
            return max;
        }
        return -1;
    }

    
    public static int search_Problem_22_09a29e15_1849_4f23_99ec_afcce5647d4a(ArrayList<Integer> lst) {
        int maxCount = 0;
        for (int number : lst) {
            if (number > 0) {
                Map<Integer, Integer> counts = new HashMap<Integer, Integer>();
                for (int count : lst) {
                    counts.merge(count, 1L, Integer::sum);
                }
                Integer frequency = counts.get(number);
                if (frequency >= maxCount) {
                    maxCount = frequency;
                }
            }
        }
        return maxCount == 0 ? -1 : maxCount;
    }

    
    public static int search_Problem_0_f06e3308_90d0_40c3_b4a5_0197f2d925f9(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            int freq = Collections.frequency(lst, val);
            if (freq > maxFreq) {
                maxFreq = freq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_1_bab97e06_2cc2_4b9d_95bf_331e4fbdd529(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_2_164c6e1a_91e2_4038_b15f_5c15235e981d(ArrayList<Integer> lst) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        for (int i : map.keySet()) {
            if (i > 0 && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_4_db03fc5f_cfd1_448d_91aa_d15a80adf926(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        int currFreq = -1;
        for (int val : lst) {
            currFreq = Collections.frequency(lst, val);
            if (currFreq > maxFreq) {
                maxFreq = currFreq;
                maxVal = val;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_5_f058ba41_e5a0_4800_9b6e_ef0c19812839(ArrayList<Integer> lst) {
        return lst.stream().filter(i -> Collections.frequency(lst, i) >= i).max(Comparator.naturalOrder()).orElse(-1);
    }

    
    public static int search_Problem_20_7a30a30e_2ae1_4a0c_988e_e619999aacef(ArrayList<Integer> lst) {

        // Write your code here.
        // Sort the list in descending order
        // Iterate through the list
        // If the current element is greater than 0 and has a frequency greater than or equal to the value of the 
        // element itself, return the element
        // Else return -1
        Collections.sort(lst, Collections.reverseOrder());
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) > 0 && lst.indexOf(lst.get(i)) >= lst.lastIndexOf(lst.get(i))) {
                return lst.get(i);
            }
        }
        return -1;
    }

    
    public static int search_Problem_7_9df21133_2f1a_4653_b91c_63dc2efee9a3(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for(int i : lst) {
            freq++;
            if(freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;

    }

    
    public static int search_Problem_24_96ebf8ed_5f02_47e4_863f_1718dbfc739d(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_15_d74d9d4c_bc0f_41f9_9439_b2fc86955ad1(ArrayList<Integer> lst) {
        int max = 0;
        int freq = 0;
        for (int i : lst) {
            freq++;
            if (freq > i) {
                max = i;
                freq = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_23_23904fa1_cbc0_49f0_aec8_239992259324(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x)).get();
    }

    
    public static int search_Problem_3_395d84c6_0b2d_4c08_b46b_f197d2664903(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_41ac9a7b_218b_405a_8e4e_6fb392644202(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i >= max) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_2_0b05cc89_e346_4a9b_9b03_7142fcf49fdd(ArrayList<Integer> lst) {

        // Write your code here.
        return lst.stream().max(Comparator.comparing(x -> x, Comparator.reverseOrder())).get();
    }

    
    public static int search_Problem_14_15ac33c0_ed98_4bf7_ba18_94155cc5e4a4(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == -1) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_3_b40f3c74_5865_48df_9079_8a432915e798(ArrayList<Integer> lst) {

        // Write your code here
        if (lst.size() == 0) {
            return -1;
        }
        int max = 0;
        int maxFreq = 0;
        for (int i = 0; i < lst.size(); i++) {
            int num = lst.get(i);
            int freq = 0;
            for (int j = 0; j < lst.size(); j++) {
                if (lst.get(j) == num) {
                    freq++;
                }
            }
            if (freq > maxFreq) {
                max = num;
                maxFreq = freq;
            }
        }
        return max;
    }

    
    public static int search_Problem_6_443c4e41_1bdd_41ce_85de_619ea96542f6(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = -1;
        for (Integer l : map.keySet()) {
            if (map.get(l) >= l) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_39c6be5c_f181_4018_bbaf_f92b1fed4793(ArrayList<Integer> lst) {

        int max = 0;
        int maxFreq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > maxFreq) {
                maxFreq = freq;
                max = i;
            }
        }
        return maxFreq >= max ? max : -1;
    }

    
    public static int search_Problem_24_f577e1b9_a3ac_4b9c_b602_b1c97ca515b0(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_3d6b7caf_58e4_44eb_aa58_9099afa0f421(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (int i : lst) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        int max = 0;
        int maxVal = 0;
        for (int i : map.keySet()) {
            if (map.get(i) > max) {
                max = map.get(i);
                maxVal = i;
            }
        }
        return maxVal;
    }

    
    public static int search_Problem_12_13675c88_f236_4cd4_9bb6_298fb65efd7f(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i) {
                maxFreq = i;
                maxVal = i;
            } else if (maxFreq == i) {
                maxVal = Math.max(maxVal, i);
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_4_5f2ff085_40ce_4474_9e49_88d5a60dfc27(ArrayList<Integer> lst) {
        int maxVal = lst.get(0);
        int maxFreq = lst.get(0);
        for (int val : lst) {
            if (val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(0);
            }
            if (val == maxVal) {
                maxFreq++;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_7_a3c9ee5d_33c4_4255_a477_0de937e59d5e(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        Integer max = Collections.max(map.keySet());
        if (map.get(max) >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_3_459fe921_e172_41b8_8416_3429e9220c4c(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_dd073c41_43a8_4990_97b1_d6939f72a52a(ArrayList<Integer> lst) {

        // Your code here
        int max = 0;
        int count = 0;
        for(int i : lst) {
            if(lst.contains(i)) {
                if(i > max) {
                    max = i;
                    count = 1;
                }
                else if(i == max) {
                    count++;
                }
            }
        }
        if(count >= max) {
            return -1;
        }
        else {
            return max;
        }
    }

    
    public static int search_Problem_4_229a13bd_7617_43eb_a6a2_e1acc26f4b49(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_0_2e6b3252_abe4_4c1b_9aeb_7badccaf75da(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_17_f2c4ffd4_2df7_4d6e_83e6_8666b8862220(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> freq = new HashMap<>();
        for (Integer l : lst) {
            freq.put(l, freq.getOrDefault(l, 0) + 1);
        }
        return freq.entrySet().stream().max(Comparator.comparing(Map.Entry::getValue)).map(Map.Entry::getKey).orElse(-1);
    }

    
    public static int search_Problem_24_0192f9f5_ffcc_4467_9317_99a81a0c3b69(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for (int i : lst) {
            if (freq == -1) {
                freq = i;
                max = i;
            } else if (freq >= i) {
                freq = i;
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_21_1579013d_1449_480c_b590_98ba4e590b58(ArrayList<Integer> lst) {

        int max = -1;
        for (int i : lst) {
            if (Collections.frequency(lst, i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_7_afca5e03_617c_43fd_a858_bf5386d3d993(ArrayList<Integer> lst) {

        // Write your code here.
        return -1;
    }

    
    public static int search_Problem_23_4fd882ea_b6c5_4c08_9588_69d197f81ab3(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        if (max == 0) {
            return -1;
        }
        return max;
    }

    
    public static int search_Problem_1_a053c6f8_5aad_407e_b7df_7cb234345f03(ArrayList<Integer> lst) {
        int max = -1;
        int freq = -1;
        for(int i : lst) {
            freq++;
            if(freq > max) {
                max = freq;
            }
        }
        return max;
    }

    
    public static int search_Problem_13_8ba38142_d567_4e4a_802e_7149f07ae5a4(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_20_3f6f3e1e_97db_4112_9366_533f7d7cd09b(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for(int val : lst) {
            if(val > maxVal) {
                maxVal = val;
                maxFreq = lst.get(lst.indexOf(val));
            }
        }
        return maxFreq > maxVal ? maxFreq : -1;

    }

    
    public static int search_Problem_24_815e362d_f17e_47e3_975d_a2903cddc99e(ArrayList<Integer> lst) {

        // Write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Integer l : lst) {
            if (map.get(l) >= l) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_0_1c1e1e99_1ce3_43c4_9874_77ad7dcd845b(ArrayList<Integer> lst) {

        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() >= entry.getKey()) {
                return entry.getKey();
            }
        }
        return -1;
    }

    
    public static int search_Problem_14_57b3c05a_484e_4b8d_a2fa_599f6271d319(ArrayList<Integer> lst) {

        // your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            if (map.containsKey(l)) {
                map.put(l, map.get(l) + 1);
            } else {
                map.put(l, 1);
            }
        }
        int max = 0;
        for (int l : map.keySet()) {
            if (map.get(l) >= l && l > max) {
                max = l;
            }
        }
        return max;
    }

    
    public static int search_Problem_5_f19581b8_5030_41c1_8586_d2ea96b71250(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int val : lst) {
            if (val > 0) {
                int freq = Collections.frequency(lst, val);
                if (freq > maxFreq) {
                    maxFreq = freq;
                    maxVal = val;
                }
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_21_1cdfeb96_29f7_4a24_8209_5f934b645e0e(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_12_84eae471_b4ad_4d30_96fd_dad761e01628(ArrayList<Integer> lst) {
        Integer greatestInteger = null;
        Set<Integer> unique = new HashSet<Integer>();
        for (Integer i : lst) {
            if (!unique.add(i)) {
                unique.add(i);
                if (greatestInteger == null || i > greatestInteger) {
                    greatestInteger = i;
                }
            }
        }
        return unique.contains(greatestInteger) ? greatestInteger : -1;
    }

    
    public static int search_Problem_23_7d7ed025_55c2_4ff1_836d_2858f5c1f32d(ArrayList<Integer> lst) {
        int n = lst.size();
        if(n==0)
            return -1;
        int max = -1;
        for(int i = 0; i < n; i++) {
            if(lst.contains(i))
                if(lst.size()>1) {
                    int temp = 1;
                    for(int j = 0; j < i; j++)
                        temp *= lst.size();
                    if(temp>max)
                        max = temp;
                }
                else
                    max = i;
        }
        return max;
    }

    
    public static int search_Problem_19_225c38f8_d7ef_4736_93c3_24d79881f2d3(ArrayList<Integer> lst) {

        // Write your code here.
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer l : lst) {
            map.put(l, map.getOrDefault(l, 0L) + 1);
        }
        int max = 0;
        for (Integer l : map.keySet()) {
            if (map.get(l) > max) {
                max = map.get(l);
            }
        }
        for (Integer l : map.keySet()) {
            if (map.get(l) == max) {
                return l;
            }
        }
        return -1;
    }

    
    public static int search_Problem_18_a0d66240_ab0c_446a_916c_f45bb76f9eee(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_8_711f4351_c248_412a_a2c3_aa186b45f8ad(ArrayList<Integer> lst) {

        int max = 0;
        int max_freq = 0;
        for (int i : lst) {
            int freq = Collections.frequency(lst, i);
            if (freq > max_freq) {
                max_freq = freq;
                max = i;
            }
        }
        if (max_freq >= max) {
            return max;
        } else {
            return -1;
        }
    }

    
    public static int search_Problem_2_df030546_8c46_43f9_a1ef_4a381fb709b6(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_16_26ac39da_6cb9_464a_af24_a2edcf907444(ArrayList<Integer> lst) {

        // Write your code here
        int max = -1;
        for (int i : lst) {
            if (lst.stream().filter(x -> x == i).count() >= i) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_9_f577e1b9_a3ac_4b9c_b602_b1c97ca515b0(ArrayList<Integer> lst) {
        int max = -1;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_9_a098d62a_a553_4ade_9a75_79535ff3a62b(ArrayList<Integer> lst) {

        // write your code here
        Map<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (Integer i : lst) {
            if (map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

    
    public static int search_Problem_12_c650ad03_0902_45c9_b9ed_21712b038040(ArrayList<Integer> lst) {
        int max = 0;
        for (int i : lst) {
            if (i > max) {
                max = i;
            }
        }
        for (int i : lst) {
            if (i == max) {
                return max;
            }
        }
        return -1;
    }

    
    public static int search_Problem_17_33039bb6_d7a0_4504_a080_5900bcfb3092(ArrayList<Integer> lst) {
        int maxVal = -1;
        int maxFreq = -1;
        for (int i : lst) {
            if (maxFreq < i && maxVal < i) {
                maxVal = i;
                maxFreq = i;
            }
        }
        return maxVal;

    }

    
    public static int search_Problem_24_367dbae6_5c7a_438c_8efc_e29ad080c2b3(ArrayList<Integer> lst) {

        // your code here
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i,  1);
            }
        }
        int max = 0;
        for (Integer i : map.keySet()) {
            if (map.get(i) >= i && i > max) {
                max = i;
            }
        }
        return max;
    }

    
    public static int search_Problem_8_17ae3662_124b_41f9_a35b_8da829c38f55(ArrayList<Integer> lst) {

        // Your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        for (Integer i : lst) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        }
        for (int i = lst.size(); i > 0; i--) {
            if (map.containsKey(i) && map.get(i) >= i) {
                return i;
            }
        }
        return -1;
    }

}
